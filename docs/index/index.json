{
  "includedArchiveIdentifiers" : [
    "com.charcoaldesign.Euclid"
  ],
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Using Euclid",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/euclid\/constructingmeshes",
            "title" : "Constructing Meshes",
            "type" : "article"
          },
          {
            "path" : "\/documentation\/euclid\/renderingmeshes",
            "title" : "Rendering Meshes",
            "type" : "article"
          },
          {
            "title" : "Surfaces",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Default Meshes",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/empty",
                "title" : "static let empty: Mesh",
                "type" : "property"
              },
              {
                "title" : "Geometric Primitives",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/cone(radius:height:slices:stacks:poledetail:adddetailatbottompole:faces:wrapmode:material:)",
                "title" : "static func cone(radius: Double, height: Double, slices: Int, stacks: Int, poleDetail: Int?, addDetailAtBottomPole: Bool, faces: Faces, wrapMode: WrapMode, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/cube(center:size:faces:wrapmode:material:)-8t5q8",
                "title" : "static func cube(center: Vector, size: Vector, faces: Faces, wrapMode: WrapMode, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/cube(center:size:faces:wrapmode:material:)-eado",
                "title" : "static func cube(center: Vector, size: Double, faces: Faces, wrapMode: WrapMode, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/cylinder(radius:height:slices:poledetail:faces:wrapmode:material:)",
                "title" : "static func cylinder(radius: Double, height: Double, slices: Int, poleDetail: Int, faces: Faces, wrapMode: WrapMode, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/sphere(radius:slices:stacks:poledetail:faces:wrapmode:material:)",
                "title" : "static func sphere(radius: Double, slices: Int, stacks: Int?, poleDetail: Int, faces: Faces, wrapMode: WrapMode, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/icosahedron(radius:faces:wrapmode:material:)",
                "title" : "static func icosahedron(radius: Double, faces: Faces, wrapMode: WrapMode, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/wrapmode\/default",
                    "title" : "case `default`",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/wrapmode\/none",
                    "title" : "case none",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/wrapmode\/shrink",
                    "title" : "case shrink",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/wrapmode\/tube",
                    "title" : "case tube",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/euclid\/mesh\/wrapmode\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/euclid\/mesh\/wrapmode\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/euclid\/mesh\/wrapmode",
                "title" : "Mesh.WrapMode",
                "type" : "enum"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/faces\/back",
                    "title" : "case back",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/faces\/default",
                    "title" : "case `default`",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/faces\/front",
                    "title" : "case front",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/faces\/frontandback",
                    "title" : "case frontAndBack",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/euclid\/mesh\/faces\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/euclid\/mesh\/faces\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/euclid\/mesh\/faces",
                "title" : "Mesh.Faces",
                "type" : "enum"
              },
              {
                "title" : "Creating Meshes from Other Meshes",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/init(submeshes:)",
                "title" : "init(submeshes: [Mesh])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/convexhull(of:)-6c896",
                "title" : "static func convexHull(of: [Polygon]) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/union(_:iscancelled:)-swift.method",
                "title" : "func union(Mesh, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/union(_:iscancelled:)-swift.type.method",
                "title" : "static func union<T>(T, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/intersection(_:iscancelled:)-swift.method",
                "title" : "func intersection(Mesh, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/intersection(_:iscancelled:)-swift.type.method",
                "title" : "static func intersection<T>(T, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/subtracting(_:iscancelled:)",
                "title" : "func subtracting(Mesh, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/difference(_:iscancelled:)",
                "title" : "static func difference<T>(T, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/symmetricdifference(_:iscancelled:)-swift.method",
                "title" : "func symmetricDifference(Mesh, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/symmetricdifference(_:iscancelled:)-swift.type.method",
                "title" : "static func symmetricDifference<T>(T, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/stencil(_:iscancelled:)-swift.method",
                "title" : "func stencil(Mesh, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/stencil(_:iscancelled:)-swift.type.method",
                "title" : "static func stencil<T>(T, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/cancellationhandler",
                "title" : "Mesh.CancellationHandler",
                "type" : "typealias"
              },
              {
                "title" : "Creating Meshes from Polygons",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/init(_:)",
                "title" : "init([Polygon])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/convexhull(of:)-8x4al",
                "title" : "static func convexHull(of: [Mesh]) -> Mesh",
                "type" : "method"
              },
              {
                "title" : "Creating Meshes from Paths",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/convexhull(of:material:)-4hvi3",
                "title" : "static func convexHull<T>(of: T, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/lathe(_:slices:poledetail:adddetailforflatpoles:faces:wrapmode:material:)",
                "title" : "static func lathe(Path, slices: Int, poleDetail: Int, addDetailForFlatPoles: Bool, faces: Faces, wrapMode: WrapMode, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/extrude(_:along:twist:align:faces:material:iscancelled:)",
                "title" : "static func extrude(Path, along: Path, twist: Angle, align: Alignment, faces: Faces, material: Material?, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/extrude(_:depth:twist:sections:faces:material:)",
                "title" : "static func extrude(Path, depth: Double, twist: Angle, sections: Int, faces: Faces, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/extrude(_:depth:twist:sections:faces:material:iscancelled:)",
                "title" : "static func extrude([Path], depth: Double, twist: Angle, sections: Int, faces: Faces, material: Material?, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/fill(_:faces:material:)",
                "title" : "static func fill(Path, faces: Faces, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/fill(_:faces:material:)",
                "title" : "static func fill(Path, faces: Faces, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/loft(_:faces:material:)",
                "title" : "static func loft([Path], faces: Faces, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/stroke(_:width:detail:material:)",
                "title" : "static func stroke<T>(T, width: Double, detail: Int, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/stroke(_:width:detail:material:iscancelled:)-85o14",
                "title" : "static func stroke(Path, width: Double, detail: Int, material: Material?, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/stroke(_:width:detail:material:iscancelled:)-9mn9o",
                "title" : "static func stroke([Path], width: Double, detail: Int, material: Material?, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "title" : "Creating Meshes from Vertices, Points or LineSegments",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/convexhull(of:material:)-6176",
                "title" : "static func convexHull<T>(of: T, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/convexhull(of:material:)-75on2",
                "title" : "static func convexHull<T>(of: T, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/convexhull(of:material:)-91swk",
                "title" : "static func convexHull<T>(of: T, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/convexhull(of:material:)-5ztum",
                "title" : "static func convexHull<T>(of: T, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "title" : "Creating Meshes from Text",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/text(_:font:width:depth:detail:material:)",
                "title" : "static func text(String, font: CTFont?, width: Double?, depth: Double, detail: Int, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/text(_:width:depth:detail:material:)",
                "title" : "static func text(NSAttributedString, width: Double?, depth: Double, detail: Int, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "title" : "Creating Meshes from SceneKit Models",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/init(_:material:)",
                "title" : "init?(SCNGeometry, material: Material?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/init(_:ignoringtransforms:materiallookup:)",
                "title" : "init(SCNNode, ignoringTransforms: Bool, materialLookup: SCNMaterialProvider?)",
                "type" : "init"
              },
              {
                "title" : "Importing Meshes",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/init(stlstring:)",
                "title" : "init?(stlString: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/init(stldata:materiallookup:)",
                "title" : "init?(stlData: Data, materialLookup: STLMaterialProvider?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/init(url:materiallookup:)",
                "title" : "init(url: URL, materialLookup: ((AnyHashable?) -> Material?)?) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/init(url:ignoringtransforms:materiallookup:)",
                "title" : "init(url: URL, ignoringTransforms: Bool, materialLookup: SCNMaterialProvider?) throws",
                "type" : "init"
              },
              {
                "title" : "Exporting Meshes",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/objstring()",
                "title" : "func objString() -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/stlstring(name:)",
                "title" : "func stlString(name: String) -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/stldata(colorlookup:)",
                "title" : "func stlData(colorLookup: STLColorProvider?) -> Data",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/write(to:materiallookup:)",
                "title" : "func write(to: URL, materialLookup: ((Material?) -> AnyHashable?)?) throws",
                "type" : "method"
              },
              {
                "title" : "Mesh Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/polygons",
                "title" : "var polygons: [Polygon]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/materials",
                "title" : "var materials: [Material?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/bounds",
                "title" : "var bounds: Bounds",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/hastexcoords",
                "title" : "var hasTexcoords: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/hasvertexcolors",
                "title" : "var hasVertexColors: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/iswatertight",
                "title" : "var isWatertight: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/polygonsbymaterial",
                "title" : "var polygonsByMaterial: [Material? : [Polygon]]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/uniqueedges",
                "title" : "var uniqueEdges: Set<LineSegment>",
                "type" : "property"
              },
              {
                "title" : "Comparing Meshes",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/containspoint(_:)",
                "title" : "func containsPoint(Vector) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/edges(intersecting:)",
                "title" : "func edges(intersecting: Plane) -> Set<LineSegment>",
                "type" : "method"
              },
              {
                "title" : "Transforming Meshes",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/rotated(by:)",
                "title" : "func rotated(by: Rotation) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/scaled(by:)-90bab",
                "title" : "func scaled(by: Vector) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/scaled(by:)-94kks",
                "title" : "func scaled(by: Double) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/translated(by:)",
                "title" : "func translated(by: Vector) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/transformed(by:)",
                "title" : "func transformed(by: Transform) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/inverted()",
                "title" : "func inverted() -> Mesh",
                "type" : "method"
              },
              {
                "title" : "Updating Materials and Texture Coordinates",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/replacing(_:with:)",
                "title" : "func replacing(Material?, with: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/withmaterial(_:)",
                "title" : "func withMaterial(Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/withouttexcoords()",
                "title" : "func withoutTexcoords() -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/withtexturetransform(_:)",
                "title" : "func withTextureTransform(Transform) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/spheremapped()",
                "title" : "func sphereMapped() -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/cylindermapped()",
                "title" : "func cylinderMapped() -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/cubemapped()",
                "title" : "func cubeMapped() -> Mesh",
                "type" : "method"
              },
              {
                "title" : "Merging Meshes",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/merge(_:)-swift.method",
                "title" : "func merge(Mesh) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/merge(_:)-swift.type.method",
                "title" : "static func merge<T>(T) -> Mesh",
                "type" : "method"
              },
              {
                "title" : "Splitting Meshes",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/clip(to:fill:)",
                "title" : "func clip(to: Plane, fill: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/split(along:)",
                "title" : "func split(along: Plane) -> (front: Mesh?, back: Mesh?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/submeshes",
                "title" : "var submeshes: [Mesh]",
                "type" : "property"
              },
              {
                "title" : "Adjusting Mesh Topology",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/tessellate(maxsides:)",
                "title" : "func tessellate(maxSides: Int) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/triangulate()",
                "title" : "func triangulate() -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/detessellate()",
                "title" : "func detessellate() -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/detriangulate()",
                "title" : "func detriangulate() -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/makewatertight()",
                "title" : "func makeWatertight() -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/smoothingnormals(foranglesgreaterthan:)",
                "title" : "func smoothingNormals(forAnglesGreaterThan: Angle) -> Mesh",
                "type" : "method"
              },
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/ioerror\/erroruserinfo",
                    "title" : "var errorUserInfo: [String : Any]",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/euclid\/mesh\/ioerror\/errorcode",
                        "title" : "var errorCode: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Type Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/euclid\/mesh\/ioerror\/errordomain",
                        "title" : "static var errorDomain: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/euclid\/mesh\/ioerror\/customnserror-implementations",
                    "title" : "CustomNSError Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/euclid\/mesh\/ioerror\/localizeddescription",
                        "title" : "var localizedDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/euclid\/mesh\/ioerror\/error-implementations",
                    "title" : "Error Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/euclid\/mesh\/ioerror",
                "title" : "Mesh.IOError",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/init(_:materiallookup:)-155xt",
                "title" : "init(ModelComponent, materialLookup: RealityKitMaterialProvider?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/init(_:materiallookup:)-3drza",
                "title" : "init(ModelEntity, materialLookup: RealityKitMaterialProvider?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/init(_:materiallookup:)-7p5hd",
                "title" : "init?(SCNGeometry, materialLookup: SCNMaterialProvider?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/init(_:materials:)-22brv",
                "title" : "init(MeshDescriptor, materials: [Polygon.Material?])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/init(_:materials:)-4k8gs",
                "title" : "init(MeshResource, materials: [Polygon.Material?])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/init(_:materials:)-4y1bs",
                "title" : "init(MeshResource.Model, materials: [Polygon.Material?])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/init(scngeometry:materiallookup:)",
                "title" : "init?(scnGeometry: SCNGeometry, materialLookup: SCNMaterialProvider?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/hasvertexnormals",
                "title" : "var hasVertexNormals: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/surfacearea",
                "title" : "var surfaceArea: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/volume",
                "title" : "var volume: Double",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/edges(intersecting:iscancelled:)",
                "title" : "func edges(intersecting: Mesh, isCancelled: CancellationHandler) -> Set<LineSegment>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/inset(by:)",
                "title" : "func inset(by: Double) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/intersect(_:iscancelled:)",
                "title" : "func intersect(Mesh, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/reflected(along:)",
                "title" : "func reflected(along: Plane) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/smoothnormals(_:)",
                "title" : "func smoothNormals(Angle) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/subdivide()",
                "title" : "func subdivide() -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/subtract(_:iscancelled:)",
                "title" : "func subtract(Mesh, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/withoutvertexcolors()",
                "title" : "func withoutVertexColors() -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/xor(_:iscancelled:)-swift.method",
                "title" : "func xor(Mesh, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/alignment",
                "title" : "Mesh.Alignment",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/material",
                "title" : "Mesh.Material",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/materialprovider",
                "title" : "Mesh.MaterialProvider",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/realitykitmaterialprovider",
                "title" : "Mesh.RealityKitMaterialProvider",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/scnmaterialprovider",
                "title" : "Mesh.SCNMaterialProvider",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/stlcolorprovider",
                "title" : "Mesh.STLColorProvider",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/stlmaterialprovider",
                "title" : "Mesh.STLMaterialProvider",
                "type" : "typealias"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/fill(_:faces:material:iscancelled:)",
                "title" : "static func fill([Path], faces: Faces, material: Material?, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/icosphere(radius:subdivisions:faces:wrapmode:material:)",
                "title" : "static func icosphere(radius: Double, subdivisions: Int, faces: Faces, wrapMode: WrapMode, material: Material?) -> Mesh",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/mesh\/xor(_:iscancelled:)-swift.type.method",
                "title" : "static func xor<T>(T, isCancelled: CancellationHandler) -> Mesh",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/bounds",
                    "title" : "var bounds: Bounds",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/euclid\/mesh\/bounded-implementations",
                "title" : "Bounded Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/euclid\/mesh\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/mesh\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/mesh\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/*(_:_:)",
                    "title" : "static func * (Self, Transform) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/*=(_:_:)",
                    "title" : "static func *= (inout Self, Transform)",
                    "type" : "op"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/rotate(by:)-3uymx",
                    "title" : "func rotate(by: Quaternion)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/rotate(by:)-7y2vv",
                    "title" : "func rotate(by: Rotation)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/rotated(by:)",
                    "title" : "func rotated(by: Rotation) -> Mesh",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/scale(by:)-1h2f7",
                    "title" : "func scale(by: Double)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/scale(by:)-9pjki",
                    "title" : "func scale(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/scaled(by:)-90bab",
                    "title" : "func scaled(by: Vector) -> Mesh",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/scaled(by:)-94kks",
                    "title" : "func scaled(by: Double) -> Mesh",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/transform(by:)",
                    "title" : "func transform(by: Transform)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/transformed(by:)",
                    "title" : "func transformed(by: Transform) -> Mesh",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/translate(by:)",
                    "title" : "func translate(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/mesh\/translated(by:)",
                    "title" : "func translated(by: Vector) -> Mesh",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/mesh\/transformable-implementations",
                "title" : "Transformable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/euclid\/mesh",
            "title" : "Mesh",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Creating Polygons",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/init(_:material:)-8gsiw",
                "title" : "init?<T>(T, material: Material?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/init(_:material:)-9mns5",
                "title" : "init?([Vertex], material: Material?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/init(shape:material:)",
                "title" : "init?(shape: Path, material: Material?)",
                "type" : "init"
              },
              {
                "title" : "Polygon Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/vertices",
                "title" : "var vertices: [Vertex]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/plane",
                "title" : "var plane: Plane",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/bounds",
                "title" : "var bounds: Bounds",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/center",
                "title" : "var center: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/material-swift.property",
                "title" : "var material: Material?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/isconvex",
                "title" : "var isConvex: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/hastexcoords",
                "title" : "var hasTexcoords: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/hasvertexcolors",
                "title" : "var hasVertexColors: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/orderededges",
                "title" : "var orderedEdges: [LineSegment]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/undirectededges",
                "title" : "var undirectedEdges: Set<LineSegment>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/area",
                "title" : "var area: Double",
                "type" : "property"
              },
              {
                "title" : "Comparing Polygons",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/containspoint(_:)",
                "title" : "func containsPoint(Vector) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/edges(intersecting:)",
                "title" : "func edges(intersecting: Plane) -> Set<LineSegment>",
                "type" : "method"
              },
              {
                "title" : "Transforming Polygons",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/rotated(by:)",
                "title" : "func rotated(by: Rotation) -> Polygon",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/scaled(by:)-69m6m",
                "title" : "func scaled(by: Double) -> Polygon",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/scaled(by:)-8sjrv",
                "title" : "func scaled(by: Vector) -> Polygon",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/translated(by:)",
                "title" : "func translated(by: Vector) -> Polygon",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/transformed(by:)",
                "title" : "func transformed(by: Transform) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/merge(_:ensureconvex:)",
                "title" : "func merge(Polygon, ensureConvex: Bool) -> Polygon?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/inverted()",
                "title" : "func inverted() -> Polygon",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/withmaterial(_:)",
                "title" : "func withMaterial(Material?) -> Polygon",
                "type" : "method"
              },
              {
                "title" : "Splitting Polygons",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/clip(to:)",
                "title" : "func clip(to: Plane) -> [Polygon]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/split(along:)",
                "title" : "func split(along: Plane) -> (front: [Polygon], back: [Polygon])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/tessellate(maxsides:)",
                "title" : "func tessellate(maxSides: Int) -> [Polygon]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/triangulate()",
                "title" : "func triangulate() -> [Polygon]",
                "type" : "method"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/hasvertexnormals",
                "title" : "var hasVertexNormals: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/signedvolume",
                "title" : "var signedVolume: Double",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/inset(by:)",
                "title" : "func inset(by: Double) -> Polygon?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/maptexcoords(_:)",
                "title" : "func mapTexcoords((Vector) -> Vector) -> Polygon",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/mapvertexcolors(_:)",
                "title" : "func mapVertexColors((Color) -> Color?) -> Polygon",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/mapvertices(_:)",
                "title" : "func mapVertices((Vertex) -> Vertex) -> Polygon",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/reflected(along:)",
                "title" : "func reflected(along: Plane) -> Polygon",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/subdivide()",
                "title" : "func subdivide() -> [Polygon]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/with(material:)",
                "title" : "func with(material: Material?) -> Polygon",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/withouttexcoords()",
                "title" : "func withoutTexcoords() -> Polygon",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/withoutvertexcolors()",
                "title" : "func withoutVertexColors() -> Polygon",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/material-swift.typealias",
                "title" : "Polygon.Material",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/polygon\/codableclasses",
                "title" : "static var codableClasses: [AnyClass]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/bounds",
                    "title" : "var bounds: Bounds",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/euclid\/polygon\/bounded-implementations",
                "title" : "Bounded Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/euclid\/polygon\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/polygon\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/polygon\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/*(_:_:)",
                    "title" : "static func * (Self, Transform) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/*=(_:_:)",
                    "title" : "static func *= (inout Self, Transform)",
                    "type" : "op"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/rotate(by:)-7073s",
                    "title" : "func rotate(by: Rotation)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/rotate(by:)-8lp0l",
                    "title" : "func rotate(by: Quaternion)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/rotated(by:)",
                    "title" : "func rotated(by: Rotation) -> Polygon",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/scale(by:)-2pycj",
                    "title" : "func scale(by: Double)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/scale(by:)-3en6y",
                    "title" : "func scale(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/scaled(by:)-69m6m",
                    "title" : "func scaled(by: Double) -> Polygon",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/scaled(by:)-8sjrv",
                    "title" : "func scaled(by: Vector) -> Polygon",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/transform(by:)",
                    "title" : "func transform(by: Transform)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/transformed(by:)",
                    "title" : "func transformed(by: Transform) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/translate(by:)",
                    "title" : "func translate(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/polygon\/translated(by:)",
                    "title" : "func translated(by: Vector) -> Polygon",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/polygon\/transformable-implementations",
                "title" : "Transformable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/euclid\/polygon",
            "title" : "Polygon",
            "type" : "struct"
          },
          {
            "title" : "Lines and Paths",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Default Paths",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/path\/empty",
                "title" : "static let empty: Path",
                "type" : "property"
              },
              {
                "title" : "Creating Paths",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/path\/init(_:)-3c0eo",
                "title" : "init(Polygon)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/path\/init(_:)-4jhkw",
                "title" : "init([PathPoint])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/path\/init(subpaths:)",
                "title" : "init(subpaths: [Path])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/path\/init(_:detail:color:)",
                "title" : "init(CGPath, detail: Int, color: Color?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/path\/curve(_:detail:)",
                "title" : "static func curve([PathPoint], detail: Int) -> Path",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/line(_:_:color:)",
                "title" : "static func line(Vector, Vector, color: Color?) -> Path",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/line(_:color:)",
                "title" : "static func line(LineSegment, color: Color?) -> Path",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/arc(angle:radius:segments:color:)",
                "title" : "static func arc(angle: Angle, radius: Double, segments: Int?, color: Color?) -> Path",
                "type" : "method"
              },
              {
                "title" : "Creating Shape Paths",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/path\/circle(radius:segments:color:)",
                "title" : "static func circle(radius: Double, segments: Int, color: Color?) -> Path",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/ellipse(width:height:segments:color:)",
                "title" : "static func ellipse(width: Double, height: Double, segments: Int, color: Color?) -> Path",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/rectangle(width:height:color:)",
                "title" : "static func rectangle(width: Double, height: Double, color: Color?) -> Path",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/roundedrectangle(width:height:radius:detail:color:)",
                "title" : "static func roundedRectangle(width: Double, height: Double, radius: Double, detail: Int, color: Color?) -> Path",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/square(size:color:)",
                "title" : "static func square(size: Double, color: Color?) -> Path",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/polygon(radius:sides:color:)",
                "title" : "static func polygon(radius: Double, sides: Int, color: Color?) -> Path",
                "type" : "method"
              },
              {
                "title" : "Creating Text Paths",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/path\/text(_:font:width:detail:)",
                "title" : "static func text(String, font: CTFont?, width: Double?, detail: Int) -> [Path]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/text(_:width:detail:)",
                "title" : "static func text(NSAttributedString, width: Double?, detail: Int) -> [Path]",
                "type" : "method"
              },
              {
                "title" : "Path Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/path\/points",
                "title" : "let points: [PathPoint]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/path\/plane",
                "title" : "var plane: Plane?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/path\/bounds",
                "title" : "var bounds: Bounds",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/path\/length",
                "title" : "var length: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/path\/isclosed",
                "title" : "let isClosed: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/path\/isplanar",
                "title" : "var isPlanar: Bool",
                "type" : "property"
              },
              {
                "title" : "Transforming Paths",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/path\/rotated(by:)",
                "title" : "func rotated(by: Rotation) -> Path",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/scaled(by:)-19jpq",
                "title" : "func scaled(by: Vector) -> Path",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/scaled(by:)-84xdd",
                "title" : "func scaled(by: Double) -> Path",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/translated(by:)",
                "title" : "func translated(by: Vector) -> Path",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/transformed(by:)",
                "title" : "func transformed(by: Transform) -> Path",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/withcolor(_:)",
                "title" : "func withColor(Color?) -> Path",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/closed()",
                "title" : "func closed() -> Path",
                "type" : "method"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/path\/init(_:color:)-5lnql",
                "title" : "init(LineSegment, color: Color?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/path\/init(_:color:)-snde",
                "title" : "init<T>(T, color: Color?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/path\/init(cgpath:detail:color:)",
                "title" : "init(cgPath: CGPath, detail: Int, color: Color?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/path\/init(polygon:)",
                "title" : "init(polygon: Polygon)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/path\/edgevertices",
                "title" : "var edgeVertices: [Vertex]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/path\/facenormal",
                "title" : "var faceNormal: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/path\/facevertices",
                "title" : "var faceVertices: [Vertex]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/path\/latheprofile",
                "title" : "var latheProfile: Path",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/path\/subpaths",
                "title" : "var subpaths: [Path]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/path\/edgevertices(for:)",
                "title" : "func edgeVertices(for: Mesh.WrapMode) -> [Vertex]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/extrusioncontours(along:twist:align:)",
                "title" : "func extrusionContours(along: Path, twist: Angle, align: Alignment) -> [Path]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/facepolygons(material:)",
                "title" : "func facePolygons(material: Mesh.Material?) -> [Polygon]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/inset(by:)",
                "title" : "func inset(by: Double) -> Path",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/mapcolors(_:)",
                "title" : "func mapColors((Color?) -> Color?) -> Path",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/path\/with(color:)",
                "title" : "func with(color: Color?) -> Path",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/alignment\/axis",
                    "title" : "case axis",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/alignment\/default",
                    "title" : "case `default`",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/alignment\/tangent",
                    "title" : "case tangent",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/euclid\/path\/alignment\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/euclid\/path\/alignment\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/euclid\/path\/alignment",
                "title" : "Path.Alignment",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/bounds",
                    "title" : "var bounds: Bounds",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/euclid\/path\/bounded-implementations",
                "title" : "Bounded Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/euclid\/path\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/path\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/path\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/*(_:_:)",
                    "title" : "static func * (Self, Transform) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/*=(_:_:)",
                    "title" : "static func *= (inout Self, Transform)",
                    "type" : "op"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/rotate(by:)-3m9le",
                    "title" : "func rotate(by: Rotation)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/rotate(by:)-93ypi",
                    "title" : "func rotate(by: Quaternion)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/rotated(by:)",
                    "title" : "func rotated(by: Rotation) -> Path",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/scale(by:)-1kdd7",
                    "title" : "func scale(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/scale(by:)-vnel",
                    "title" : "func scale(by: Double)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/scaled(by:)-19jpq",
                    "title" : "func scaled(by: Vector) -> Path",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/scaled(by:)-84xdd",
                    "title" : "func scaled(by: Double) -> Path",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/transform(by:)",
                    "title" : "func transform(by: Transform)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/transformed(by:)",
                    "title" : "func transformed(by: Transform) -> Path",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/translate(by:)",
                    "title" : "func translate(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/path\/translated(by:)",
                    "title" : "func translated(by: Vector) -> Path",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/path\/transformable-implementations",
                "title" : "Transformable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/euclid\/path",
            "title" : "Path",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Creating Path Points",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/init(_:texcoord:color:iscurved:)",
                "title" : "init(Vector, texcoord: Vector?, color: Color?, isCurved: Bool)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/init(_:)",
                "title" : "init(Vertex)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/point(_:_:_:texcoord:color:)",
                "title" : "static func point(Double, Double, Double, texcoord: Vector?, color: Color?) -> PathPoint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/point(_:texcoord:color:)",
                "title" : "static func point(Vector, texcoord: Vector?, color: Color?) -> PathPoint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/curve(_:_:_:texcoord:color:)",
                "title" : "static func curve(Double, Double, Double, texcoord: Vector?, color: Color?) -> PathPoint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/curve(_:texcoord:color:)",
                "title" : "static func curve(Vector, texcoord: Vector?, color: Color?) -> PathPoint",
                "type" : "method"
              },
              {
                "title" : "Path Point Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/position",
                "title" : "var position: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/color",
                "title" : "var color: Color?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/texcoord",
                "title" : "var texcoord: Vector?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/iscurved",
                "title" : "var isCurved: Bool",
                "type" : "property"
              },
              {
                "title" : "Interpolating Path Points",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/lerp(_:_:)",
                "title" : "func lerp(PathPoint, Double) -> PathPoint",
                "type" : "method"
              },
              {
                "title" : "Transforming Path Points",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/rotated(by:)",
                "title" : "func rotated(by: Rotation) -> PathPoint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/scaled(by:)-4wtbg",
                "title" : "func scaled(by: Vector) -> PathPoint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/scaled(by:)-7e3o7",
                "title" : "func scaled(by: Double) -> PathPoint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/translated(by:)",
                "title" : "func translated(by: Vector) -> PathPoint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/transformed(by:)",
                "title" : "func transformed(by: Transform) -> PathPoint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/withcolor(_:)",
                "title" : "func withColor(Color?) -> PathPoint",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/curved(_:)",
                "title" : "func curved(Bool) -> PathPoint",
                "type" : "method"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/pathpoint\/with(color:)",
                "title" : "func with(color: Color?) -> PathPoint",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/pathpoint\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/euclid\/pathpoint\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/pathpoint\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/pathpoint\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/pathpoint\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/pathpoint\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/pathpoint\/*(_:_:)",
                    "title" : "static func * (Self, Transform) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/pathpoint\/*=(_:_:)",
                    "title" : "static func *= (inout Self, Transform)",
                    "type" : "op"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/pathpoint\/rotate(by:)-4cg0v",
                    "title" : "func rotate(by: Rotation)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/pathpoint\/rotate(by:)-r7j4",
                    "title" : "func rotate(by: Quaternion)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/pathpoint\/rotated(by:)",
                    "title" : "func rotated(by: Rotation) -> PathPoint",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/pathpoint\/scale(by:)-4egi6",
                    "title" : "func scale(by: Double)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/pathpoint\/scale(by:)-7pxnt",
                    "title" : "func scale(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/pathpoint\/scaled(by:)-4wtbg",
                    "title" : "func scaled(by: Vector) -> PathPoint",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/pathpoint\/scaled(by:)-7e3o7",
                    "title" : "func scaled(by: Double) -> PathPoint",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/pathpoint\/transform(by:)",
                    "title" : "func transform(by: Transform)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/pathpoint\/transformed(by:)",
                    "title" : "func transformed(by: Transform) -> PathPoint",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/pathpoint\/translate(by:)",
                    "title" : "func translate(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/pathpoint\/translated(by:)",
                    "title" : "func translated(by: Vector) -> PathPoint",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/pathpoint\/transformable-implementations",
                "title" : "Transformable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/euclid\/pathpoint",
            "title" : "PathPoint",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Creating Lines",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/line\/init(_:)",
                "title" : "init(LineSegment)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/line\/init(origin:direction:)",
                "title" : "init?(origin: Vector, direction: Vector)",
                "type" : "init"
              },
              {
                "title" : "Line Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/line\/origin",
                "title" : "let origin: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/line\/direction",
                "title" : "let direction: Vector",
                "type" : "property"
              },
              {
                "title" : "Comparing Lines",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/line\/containspoint(_:)",
                "title" : "func containsPoint(Vector) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/line\/distance(from:)-4o41",
                "title" : "func distance(from: Vector) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/line\/distance(from:)-77i61",
                "title" : "func distance(from: Line) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/line\/intersection(with:)-2nysu",
                "title" : "func intersection(with: Line) -> Vector?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/line\/intersection(with:)-7s1sd",
                "title" : "func intersection(with: Plane) -> Vector?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/line\/intersects(_:)",
                "title" : "func intersects(Line) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/line\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/euclid\/line\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/line\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/line\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/line\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/line\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/euclid\/line",
            "title" : "Line",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Creating Line Segments",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/init(_:_:)",
                "title" : "init?(Vector, Vector)",
                "type" : "init"
              },
              {
                "title" : "Line Segment Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/start",
                "title" : "let start: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/end",
                "title" : "let end: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/length",
                "title" : "var length: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/direction",
                "title" : "var direction: Vector",
                "type" : "property"
              },
              {
                "title" : "Comparing Line Segments",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/containspoint(_:)",
                "title" : "func containsPoint(Vector) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/intersection(with:)-1tffl",
                "title" : "func intersection(with: Plane) -> Vector?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/intersection(with:)-2u7vo",
                "title" : "func intersection(with: LineSegment) -> Vector?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/intersects(_:)",
                "title" : "func intersects(LineSegment) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Transforming Line Segments",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/rotated(by:)",
                "title" : "func rotated(by: Rotation) -> LineSegment",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/scaled(by:)-2lm8c",
                "title" : "func scaled(by: Vector) -> LineSegment",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/scaled(by:)-37r1v",
                "title" : "func scaled(by: Double) -> LineSegment",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/translated(by:)",
                "title" : "func translated(by: Vector) -> LineSegment",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/transformed(by:)",
                "title" : "func transformed(by: Transform) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/inverted()",
                "title" : "func inverted() -> LineSegment",
                "type" : "method"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/init(start:end:)",
                "title" : "init?(start: Vector, end: Vector)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/init(undirected:)",
                "title" : "init(undirected: LineSegment)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/init(undirected:_:)",
                "title" : "init?(undirected: Vector, Vector)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/clip(to:)",
                "title" : "func clip(to: Plane) -> LineSegment?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/linesegment\/split(along:)",
                "title" : "func split(along: Plane) -> (front: LineSegment?, back: LineSegment?)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/bounds",
                    "title" : "var bounds: Bounds",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/euclid\/linesegment\/bounded-implementations",
                "title" : "Bounded Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/'...(_:)-2uz97",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/'...(_:)-732z3",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/_(_:_:)-2si4j",
                    "title" : "static func < (LineSegment, LineSegment) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/_(_:_:)-9688a",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/_=(_:_:)-5dvuy",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/_=(_:_:)-8q2nt",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/linesegment\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/euclid\/linesegment\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/linesegment\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/linesegment\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/*(_:_:)",
                    "title" : "static func * (Self, Transform) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/*=(_:_:)",
                    "title" : "static func *= (inout Self, Transform)",
                    "type" : "op"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/rotate(by:)-16elu",
                    "title" : "func rotate(by: Quaternion)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/rotate(by:)-l48f",
                    "title" : "func rotate(by: Rotation)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/rotated(by:)",
                    "title" : "func rotated(by: Rotation) -> LineSegment",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/scale(by:)-2v2ef",
                    "title" : "func scale(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/scale(by:)-8v4ag",
                    "title" : "func scale(by: Double)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/scaled(by:)-2lm8c",
                    "title" : "func scaled(by: Vector) -> LineSegment",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/scaled(by:)-37r1v",
                    "title" : "func scaled(by: Double) -> LineSegment",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/transform(by:)",
                    "title" : "func transform(by: Transform)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/transformed(by:)",
                    "title" : "func transformed(by: Transform) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/translate(by:)",
                    "title" : "func translate(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/linesegment\/translated(by:)",
                    "title" : "func translated(by: Vector) -> LineSegment",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/linesegment\/transformable-implementations",
                "title" : "Transformable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/euclid\/linesegment",
            "title" : "LineSegment",
            "type" : "struct"
          },
          {
            "title" : "Rotations and Transforms",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Creating Rotations",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/init(_:)-5w6mn",
                "title" : "init(Quaternion)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/init(_:)-68leo",
                "title" : "init(SCNQuaternion)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/init(_:)-7j4ql",
                "title" : "init(simd_quatd)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/init(axis:angle:)",
                "title" : "init?(axis: Vector, angle: Angle)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/init(pitch:yaw:roll:)",
                "title" : "init(pitch: Angle, yaw: Angle, roll: Angle)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/init(roll:yaw:pitch:)",
                "title" : "init(roll: Angle, yaw: Angle, pitch: Angle)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/init(yaw:pitch:roll:)",
                "title" : "init(yaw: Angle, pitch: Angle, roll: Angle)",
                "type" : "init"
              },
              {
                "title" : "Default Quaternions",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/identity",
                "title" : "static let identity: Rotation",
                "type" : "property"
              },
              {
                "title" : "Creating Rotations Around an Axis",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/pitch(_:)",
                "title" : "static func pitch(Angle) -> Rotation",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/roll(_:)",
                "title" : "static func roll(Angle) -> Rotation",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/yaw(_:)",
                "title" : "static func yaw(Angle) -> Rotation",
                "type" : "method"
              },
              {
                "title" : "Rotation Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/pitch",
                "title" : "var pitch: Angle",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/roll",
                "title" : "var roll: Angle",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/yaw",
                "title" : "var yaw: Angle",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/axis",
                "title" : "var axis: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/angle",
                "title" : "var angle: Angle",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/forward",
                "title" : "var forward: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/right",
                "title" : "var right: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/up",
                "title" : "var up: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/isidentity",
                "title" : "var isIdentity: Bool",
                "type" : "property"
              },
              {
                "title" : "Interpolating Rotations",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/slerp(_:_:)",
                "title" : "func slerp(Rotation, Double) -> Rotation",
                "type" : "method"
              },
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/-(_:)",
                "title" : "static func - (Rotation) -> Rotation",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/*(_:_:)-55zcf",
                "title" : "static func * (Rotation, Rotation) -> Rotation",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/*(_:_:)-5fe82",
                "title" : "static func * (Rotation, Double) -> Rotation",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/*=(_:_:)-68kkw",
                "title" : "static func *= (inout Rotation, Rotation)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/*=(_:_:)-7u9hf",
                "title" : "static func *= (inout Rotation, Double)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/_(_:_:)",
                "title" : "static func \/ (Rotation, Double) -> Rotation",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/_=(_:_:)",
                "title" : "static func \/= (inout Rotation, Double)",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/init(_:)-8izj",
                "title" : "init(simd_quatf)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/rotation\/rotate(_:)",
                "title" : "func rotate(Vector) -> Vector",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/rotation\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/euclid\/rotation\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/rotation\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/rotation\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/rotation\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/rotation\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/rotation\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/rotation\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/euclid\/rotation",
            "title" : "Rotation",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Creating Transforms",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/init(offset:rotation:scale:)",
                "title" : "init(offset: Vector?, rotation: Rotation?, scale: Vector?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/offset(_:)",
                "title" : "static func offset(Vector) -> Transform",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/rotation(_:)",
                "title" : "static func rotation(Rotation) -> Transform",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/scale(_:)-55t4p",
                "title" : "static func scale(Vector) -> Transform",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/scale(_:)-7a30s",
                "title" : "static func scale(Double) -> Transform",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/transform(from:)",
                "title" : "static func transform(from: SCNNode) -> Transform",
                "type" : "method"
              },
              {
                "title" : "Default Transforms",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/identity",
                "title" : "static let identity: Transform",
                "type" : "property"
              },
              {
                "title" : "Transform properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/rotation",
                "title" : "var rotation: Rotation",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/scale",
                "title" : "var scale: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/offset",
                "title" : "var offset: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/isflipped",
                "title" : "var isFlipped: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/isidentity",
                "title" : "var isIdentity: Bool",
                "type" : "property"
              },
              {
                "title" : "Combining Transforms",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/rotated(by:)",
                "title" : "func rotated(by: Rotation) -> Transform",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/scaled(by:)-19ukh",
                "title" : "func scaled(by: Double) -> Transform",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/scaled(by:)-9vwak",
                "title" : "func scaled(by: Vector) -> Transform",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/translated(by:)",
                "title" : "func translated(by: Vector) -> Transform",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/transformed(by:)",
                "title" : "func transformed(by: Transform) -> Transform",
                "type" : "method"
              },
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/*(_:_:)",
                "title" : "static func * (Self, Transform) -> Self",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/*=(_:_:)",
                "title" : "static func *= (inout Self, Transform)",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/init(_:)-7hvb3",
                "title" : "init(simd_float4x4)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/init(_:)-83oy3",
                "title" : "init(SCNMatrix4)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/transform\/init(_:)-cys2",
                "title" : "init(RealityKit.Transform)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/transform\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/euclid\/transform\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/transform\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/transform\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/transform\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/transform\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/transform\/*(_:_:)",
                    "title" : "static func * (Self, Transform) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/transform\/*=(_:_:)",
                    "title" : "static func *= (inout Self, Transform)",
                    "type" : "op"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/transform\/rotate(by:)-11t07",
                    "title" : "func rotate(by: Rotation)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/transform\/rotate(by:)-577nk",
                    "title" : "func rotate(by: Quaternion)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/transform\/rotated(by:)",
                    "title" : "func rotated(by: Rotation) -> Transform",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/transform\/scale(by:)-55r4j",
                    "title" : "func scale(by: Double)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/transform\/scale(by:)-9i9s9",
                    "title" : "func scale(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/transform\/scaled(by:)-19ukh",
                    "title" : "func scaled(by: Double) -> Transform",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/transform\/scaled(by:)-9vwak",
                    "title" : "func scaled(by: Vector) -> Transform",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/transform\/transform(by:)",
                    "title" : "func transform(by: Transform)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/transform\/transformed(by:)",
                    "title" : "func transformed(by: Transform) -> Transform",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/transform\/translate(by:)",
                    "title" : "func translate(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/transform\/translated(by:)",
                    "title" : "func translated(by: Vector) -> Transform",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/transform\/transformable-implementations",
                "title" : "Transformable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/euclid\/transform",
            "title" : "Transform",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Creating Quaternions",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/init(_:)-27eol",
                "title" : "init(simd_quatd)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/init(_:)-7xa5o",
                "title" : "init(Rotation)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/init(_:)-b3v3",
                "title" : "init(SCNQuaternion)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/init(_:)-fyhx",
                "title" : "init?([Double])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/init(_:_:_:_:)",
                "title" : "init(Double, Double, Double, Double)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/init(axis:angle:)",
                "title" : "init?(axis: Vector, angle: Angle)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/init(roll:yaw:pitch:)",
                "title" : "init(roll: Angle, yaw: Angle, pitch: Angle)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/pitch(_:)",
                "title" : "static func pitch(Angle) -> Quaternion",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/roll(_:)",
                "title" : "static func roll(Angle) -> Quaternion",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/yaw(_:)",
                "title" : "static func yaw(Angle) -> Quaternion",
                "type" : "method"
              },
              {
                "title" : "Default Quaternions",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/zero",
                "title" : "static let zero: Quaternion",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/identity",
                "title" : "static let identity: Quaternion",
                "type" : "property"
              },
              {
                "title" : "Quaternion Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/pitch",
                "title" : "var pitch: Angle",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/roll",
                "title" : "var roll: Angle",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/yaw",
                "title" : "var yaw: Angle",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/axis",
                "title" : "var axis: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/angle",
                "title" : "var angle: Angle",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/isidentity",
                "title" : "var isIdentity: Bool",
                "type" : "property"
              },
              {
                "title" : "Computing Quaternions",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/dot(_:)",
                "title" : "func dot(Quaternion) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/normalized()",
                "title" : "func normalized() -> Quaternion",
                "type" : "method"
              },
              {
                "title" : "Interpolating Quaternions",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/slerp(_:_:)",
                "title" : "func slerp(Quaternion, Double) -> Quaternion",
                "type" : "method"
              },
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/+(_:_:)",
                "title" : "static func + (Quaternion, Quaternion) -> Quaternion",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/+=(_:_:)",
                "title" : "static func += (inout Quaternion, Quaternion)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/-(_:_:)",
                "title" : "static func - (Quaternion, Quaternion) -> Quaternion",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/-(_:)",
                "title" : "static func - (Quaternion) -> Quaternion",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/-=(_:_:)",
                "title" : "static func -= (inout Quaternion, Quaternion)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/*(_:_:)-2drke",
                "title" : "static func * (Quaternion, Double) -> Quaternion",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/*(_:_:)-305tn",
                "title" : "static func * (Quaternion, Quaternion) -> Quaternion",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/*=(_:_:)-5ic2j",
                "title" : "static func *= (inout Quaternion, Quaternion)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/*=(_:_:)-lsgo",
                "title" : "static func *= (inout Quaternion, Double)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/_(_:_:)",
                "title" : "static func \/ (Quaternion, Double) -> Quaternion",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/_=(_:_:)",
                "title" : "static func \/= (inout Quaternion, Double)",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/init(_:)-99vxt",
                "title" : "init(simd_quatf)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/components",
                "title" : "var components: [Double]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/isnormalized",
                "title" : "var isNormalized: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/length",
                "title" : "var length: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/lengthsquared",
                "title" : "var lengthSquared: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/w",
                "title" : "var w: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/x",
                "title" : "var x: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/y",
                "title" : "var y: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/quaternion\/z",
                "title" : "var z: Double",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/quaternion\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/euclid\/quaternion\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/quaternion\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/quaternion\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/quaternion\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/quaternion\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/quaternion\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/quaternion\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/euclid\/quaternion",
            "title" : "Quaternion",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Creating Angles",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/init(degrees:)",
                "title" : "init(degrees: Double)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/init(radians:)",
                "title" : "init(radians: Double)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/degrees(_:)",
                "title" : "static func degrees(Double) -> Angle",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/radians(_:)",
                "title" : "static func radians(Double) -> Angle",
                "type" : "method"
              },
              {
                "title" : "Default Angles",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/zero",
                "title" : "static let zero: Angle",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/halfpi",
                "title" : "static let halfPi: Angle",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/pi",
                "title" : "static let pi: Angle",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/twopi",
                "title" : "static let twoPi: Angle",
                "type" : "property"
              },
              {
                "title" : "Angle Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/degrees",
                "title" : "var degrees: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/radians",
                "title" : "var radians: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/iszero",
                "title" : "var isZero: Bool",
                "type" : "property"
              },
              {
                "title" : "Computing Angles",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/acos(_:)",
                "title" : "static func acos(Double) -> Angle",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/asin(_:)",
                "title" : "static func asin(Double) -> Angle",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/atan(_:)",
                "title" : "static func atan(Double) -> Angle",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/atan2(y:x:)",
                "title" : "static func atan2(y: Double, x: Double) -> Angle",
                "type" : "method"
              },
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/+(_:_:)",
                "title" : "static func + (Angle, Angle) -> Angle",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/+=(_:_:)",
                "title" : "static func += (inout Self, Self)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/-(_:)",
                "title" : "static func - (Angle) -> Angle",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/-(_:_:)",
                "title" : "static func - (Angle, Angle) -> Angle",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/-=(_:_:)",
                "title" : "static func -= (inout Self, Self)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/*(_:_:)-2ew65",
                "title" : "static func * (Double, Angle) -> Angle",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/*(_:_:)-8l78z",
                "title" : "static func * (Angle, Double) -> Angle",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/*=(_:_:)",
                "title" : "static func *= (inout Angle, Double)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/_(_:_:)-34kn9",
                "title" : "static func \/ (Angle, Double) -> Angle",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/angle\/_=(_:_:)-81sn3",
                "title" : "static func \/= (inout Angle, Double)",
                "type" : "op"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/+(_:)",
                    "title" : "static func + (Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/+(_:_:)",
                    "title" : "static func + (Angle, Angle) -> Angle",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/+=(_:_:)",
                    "title" : "static func += (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/-(_:_:)",
                    "title" : "static func - (Angle, Angle) -> Angle",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/-=(_:_:)",
                    "title" : "static func -= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/zero",
                    "title" : "static let zero: Angle",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/euclid\/angle\/additivearithmetic-implementations",
                "title" : "AdditiveArithmetic Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/'...(_:)-3s6ak",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/'...(_:)-7xdsm",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/_(_:_:)-1aqv9",
                    "title" : "static func < (Angle, Angle) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/_(_:_:)-filj",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/_=(_:_:)-375to",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/_=(_:_:)-9rm6o",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/angle\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/euclid\/angle\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/angle\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/angle\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/angle\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/euclid\/angle",
            "title" : "Angle",
            "type" : "struct"
          },
          {
            "title" : "Fundamental Types",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Creating Vectors",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/init(_:)-228p6",
                "title" : "init(SCNVector3)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/init(_:)-4eop9",
                "title" : "init(CGPoint)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/init(_:)-5n3j",
                "title" : "init(simd_double3)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/init(_:)-228p6",
                "title" : "init(SCNVector3)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/init(_:)-6nlm",
                "title" : "init(CGSize)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/init(_:)-3hpag",
                "title" : "init<T>(T)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/init(_:_:_:)",
                "title" : "init(Double, Double, Double)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/init(size:)-8y52g",
                "title" : "init<T>(size: T)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/init(size:)-nkyk",
                "title" : "init(size: Double)",
                "type" : "init"
              },
              {
                "title" : "Default Vectors",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/zero",
                "title" : "static let zero: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/one",
                "title" : "static let one: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/unitx",
                "title" : "static let unitX: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/unity",
                "title" : "static let unitY: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/unitz",
                "title" : "static let unitZ: Vector",
                "type" : "property"
              },
              {
                "title" : "Vector Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/x",
                "title" : "var x: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/y",
                "title" : "var y: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/z",
                "title" : "var z: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/length",
                "title" : "var length: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/lengthsquared",
                "title" : "var lengthSquared: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/iszero",
                "title" : "var isZero: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/isone",
                "title" : "var isOne: Bool",
                "type" : "property"
              },
              {
                "title" : "Computing Vectors",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/dot(_:)",
                "title" : "func dot(Vector) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/cross(_:)",
                "title" : "func cross(Vector) -> Vector",
                "type" : "method"
              },
              {
                "title" : "Interpolating Vectors",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/lerp(_:_:)",
                "title" : "func lerp(Vector, Double) -> Vector",
                "type" : "method"
              },
              {
                "title" : "Transforming Vectors",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/normalized()",
                "title" : "func normalized() -> Vector",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/rotated(by:)",
                "title" : "func rotated(by: Rotation) -> Vector",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/scaled(by:)-350oy",
                "title" : "func scaled(by: Double) -> Vector",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/scaled(by:)-356zr",
                "title" : "func scaled(by: Vector) -> Vector",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/translated(by:)",
                "title" : "func translated(by: Vector) -> Vector",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/transformed(by:)",
                "title" : "func transformed(by: Transform) -> Self",
                "type" : "method"
              },
              {
                "title" : "Comparing Vectors",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/angle(with:)-29paf",
                "title" : "func angle(with: Vector) -> Angle",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/angle(with:)-9sfg1",
                "title" : "func angle(with: Plane) -> Angle",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/distance(from:)-3eglz",
                "title" : "func distance(from: Line) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/distance(from:)-5p7ko",
                "title" : "func distance(from: Plane) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/project(onto:)-817o2",
                "title" : "func project(onto: Plane) -> Vector",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/project(onto:)-rksk",
                "title" : "func project(onto: Line) -> Vector",
                "type" : "method"
              },
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/+(_:_:)",
                "title" : "static func + (Vector, Vector) -> Vector",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/+=(_:_:)",
                "title" : "static func += (inout Self, Self)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/-(_:_:)",
                "title" : "static func - (Vector, Vector) -> Vector",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/-(_:)",
                "title" : "static func - (Vector) -> Vector",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/-=(_:_:)",
                "title" : "static func -= (inout Self, Self)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/*(_:_:)-48gl1",
                "title" : "static func * (Double, Vector) -> Vector",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/*(_:_:)-5mcy5",
                "title" : "static func * (Vector, Double) -> Vector",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/*=(_:_:)-3ur4e",
                "title" : "static func *= (inout Self, Transform)",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/_(_:_:)-3ro6k",
                "title" : "static func \/ (Vector, Double) -> Vector",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/_=(_:_:)-84cm9",
                "title" : "static func \/= (inout Vector, Double)",
                "type" : "op"
              },
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/*=(_:_:)-9l46a",
                "title" : "static func *= (inout Vector, Double)",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/init(_:)-5s4mt",
                "title" : "init(simd_float3)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/init(_:)-7r7et",
                "title" : "init(simd_float2)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/components",
                "title" : "var components: [Double]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/isnormalized",
                "title" : "var isNormalized: Bool",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/distance(from:)-2e328",
                "title" : "func distance(from: Vector) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/projected(onto:)-2zsww",
                "title" : "func projected(onto: Plane) -> Vector",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/projected(onto:)-6d7xl",
                "title" : "func projected(onto: Line) -> Vector",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vector\/rotation(with:)",
                "title" : "func rotation(with: Vector) -> Rotation",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/+(_:)",
                    "title" : "static func + (Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/+(_:_:)",
                    "title" : "static func + (Vector, Vector) -> Vector",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/+=(_:_:)",
                    "title" : "static func += (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/-(_:_:)",
                    "title" : "static func - (Vector, Vector) -> Vector",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/-=(_:_:)",
                    "title" : "static func -= (inout Self, Self)",
                    "type" : "op"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/zero",
                    "title" : "static let zero: Vector",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/euclid\/vector\/additivearithmetic-implementations",
                "title" : "AdditiveArithmetic Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/'...(_:)-14arr",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/'...(_:)-8feph",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/_(_:_:)-7i9lp",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/_(_:_:)-9obdn",
                    "title" : "static func < (Vector, Vector) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/_=(_:_:)-9s7pp",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/_=(_:_:)-j6oq",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/vector\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/euclid\/vector\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/vector\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/vector\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/*(_:_:)-98mbu",
                    "title" : "static func * (Self, Transform) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/*=(_:_:)-3ur4e",
                    "title" : "static func *= (inout Self, Transform)",
                    "type" : "op"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/rotate(by:)-3ed6z",
                    "title" : "func rotate(by: Rotation)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/rotate(by:)-hj8h",
                    "title" : "func rotate(by: Quaternion)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/rotated(by:)",
                    "title" : "func rotated(by: Rotation) -> Vector",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/scale(by:)-55ayx",
                    "title" : "func scale(by: Double)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/scale(by:)-8g7t0",
                    "title" : "func scale(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/scaled(by:)-350oy",
                    "title" : "func scaled(by: Double) -> Vector",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/scaled(by:)-356zr",
                    "title" : "func scaled(by: Vector) -> Vector",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/transform(by:)",
                    "title" : "func transform(by: Transform)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/transformed(by:)",
                    "title" : "func transformed(by: Transform) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/translate(by:)",
                    "title" : "func translate(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vector\/translated(by:)",
                    "title" : "func translated(by: Vector) -> Vector",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/vector\/transformable-implementations",
                "title" : "Transformable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/euclid\/vector",
            "title" : "Vector",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Creating Bounds",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/init(_:)-1icmf",
                "title" : "init<T>(T)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/init(_:)-27jri",
                "title" : "init<T>(T)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/init(min:max:)",
                "title" : "init(min: Vector, max: Vector)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/init(_:_:)",
                "title" : "init(Vector, Vector)",
                "type" : "init"
              },
              {
                "title" : "Default Bounds",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/empty",
                "title" : "static let empty: Bounds",
                "type" : "property"
              },
              {
                "title" : "Bounds Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/min",
                "title" : "let min: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/max",
                "title" : "let max: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/size",
                "title" : "var size: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/center",
                "title" : "var center: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/corners",
                "title" : "var corners: [Vector]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/isempty",
                "title" : "var isEmpty: Bool",
                "type" : "property"
              },
              {
                "title" : "Comparing Bounds",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/containspoint(_:)",
                "title" : "func containsPoint(Vector) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/intersects(_:)-7br6p",
                "title" : "func intersects(Plane) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/intersects(_:)-95v17",
                "title" : "func intersects(Bounds) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Combining and Modifying Bounds",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/inset(by:)-49ykf",
                "title" : "func inset(by: Vector) -> Bounds",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/inset(by:)-4gk62",
                "title" : "func inset(by: Double) -> Bounds",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/intersection(_:)",
                "title" : "func intersection(Bounds) -> Bounds",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/union(_:)",
                "title" : "func union(Bounds) -> Bounds",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/formintersection(_:)",
                "title" : "func formIntersection(Bounds)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/formunion(_:)",
                "title" : "func formUnion(Bounds)",
                "type" : "method"
              },
              {
                "title" : "Transforming Bounds",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/rotated(by:)",
                "title" : "func rotated(by: Rotation) -> Bounds",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/scaled(by:)-5dvvh",
                "title" : "func scaled(by: Vector) -> Bounds",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/scaled(by:)-6epo6",
                "title" : "func scaled(by: Double) -> Bounds",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/translated(by:)",
                "title" : "func translated(by: Vector) -> Bounds",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/transformed(by:)",
                "title" : "func transformed(by: Transform) -> Self",
                "type" : "method"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/init(_:)-5bh7b",
                "title" : "init((min: SCNVector3, max: SCNVector3))",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/init(_:)-r54o",
                "title" : "init<T>(T)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/init(bounds:)",
                "title" : "init(bounds: [Bounds])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/init(points:)",
                "title" : "init(points: [Vector])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/bounds\/init(polygons:)",
                "title" : "init(polygons: [Polygon])",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/bounds\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/euclid\/bounds\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/bounds\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/bounds\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/bounds\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/bounds\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/bounds\/*(_:_:)",
                    "title" : "static func * (Self, Transform) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/bounds\/*=(_:_:)",
                    "title" : "static func *= (inout Self, Transform)",
                    "type" : "op"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/bounds\/rotate(by:)-15yni",
                    "title" : "func rotate(by: Rotation)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/bounds\/rotate(by:)-ntgj",
                    "title" : "func rotate(by: Quaternion)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/bounds\/rotated(by:)",
                    "title" : "func rotated(by: Rotation) -> Bounds",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/bounds\/scale(by:)-7dhh3",
                    "title" : "func scale(by: Double)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/bounds\/scale(by:)-mpk5",
                    "title" : "func scale(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/bounds\/scaled(by:)-5dvvh",
                    "title" : "func scaled(by: Vector) -> Bounds",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/bounds\/scaled(by:)-6epo6",
                    "title" : "func scaled(by: Double) -> Bounds",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/bounds\/transform(by:)",
                    "title" : "func transform(by: Transform)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/bounds\/transformed(by:)",
                    "title" : "func transformed(by: Transform) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/bounds\/translate(by:)",
                    "title" : "func translate(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/bounds\/translated(by:)",
                    "title" : "func translated(by: Vector) -> Bounds",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/bounds\/transformable-implementations",
                "title" : "Transformable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/euclid\/bounds",
            "title" : "Bounds",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Creating Planes",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/init(normal:pointonplane:)",
                "title" : "init?(normal: Vector, pointOnPlane: Vector)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/init(points:)",
                "title" : "init?(points: [Vector])",
                "type" : "init"
              },
              {
                "title" : "Default Planes",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/xy",
                "title" : "static let xy: Plane",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/xz",
                "title" : "static let xz: Plane",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/yz",
                "title" : "static let yz: Plane",
                "type" : "property"
              },
              {
                "title" : "Plane Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/normal",
                "title" : "let normal: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/w",
                "title" : "let w: Double",
                "type" : "property"
              },
              {
                "title" : "Comparing Planes",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/containspoint(_:)",
                "title" : "func containsPoint(Vector) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/distance(from:)",
                "title" : "func distance(from: Vector) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/intersection(with:)-4v7tg",
                "title" : "func intersection(with: Plane) -> Line?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/intersection(with:)-79olr",
                "title" : "func intersection(with: Line) -> Vector?",
                "type" : "method"
              },
              {
                "title" : "Transforming Planes",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/inverted()",
                "title" : "func inverted() -> Plane",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/rotated(by:)",
                "title" : "func rotated(by: Rotation) -> Plane",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/scaled(by:)-29v7y",
                "title" : "func scaled(by: Vector) -> Plane",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/scaled(by:)-6axqe",
                "title" : "func scaled(by: Double) -> Plane",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/translated(by:)",
                "title" : "func translated(by: Vector) -> Plane",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/transformed(by:)",
                "title" : "func transformed(by: Transform) -> Self",
                "type" : "method"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/plane\/intersection(with:)-9o28g",
                "title" : "func intersection(with: LineSegment) -> Vector?",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/'...(_:)-49h2f",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/'...(_:)-4yucl",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/_(_:_:)-3fd8h",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/_(_:_:)-6eeco",
                    "title" : "static func < (Plane, Plane) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/_=(_:_:)-1oq2t",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/_=(_:_:)-5nk27",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/plane\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/euclid\/plane\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/plane\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/plane\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/*(_:_:)",
                    "title" : "static func * (Self, Transform) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/*=(_:_:)",
                    "title" : "static func *= (inout Self, Transform)",
                    "type" : "op"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/rotate(by:)-1azi6",
                    "title" : "func rotate(by: Quaternion)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/rotate(by:)-2ix6y",
                    "title" : "func rotate(by: Rotation)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/rotated(by:)",
                    "title" : "func rotated(by: Rotation) -> Plane",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/scale(by:)-677dp",
                    "title" : "func scale(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/scale(by:)-758tv",
                    "title" : "func scale(by: Double)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/scaled(by:)-29v7y",
                    "title" : "func scaled(by: Vector) -> Plane",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/scaled(by:)-6axqe",
                    "title" : "func scaled(by: Double) -> Plane",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/transform(by:)",
                    "title" : "func transform(by: Transform)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/transformed(by:)",
                    "title" : "func transformed(by: Transform) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/translate(by:)",
                    "title" : "func translate(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/plane\/translated(by:)",
                    "title" : "func translated(by: Vector) -> Plane",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/plane\/transformable-implementations",
                "title" : "Transformable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/euclid\/plane",
            "title" : "Plane",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Creating Vertices",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/init(_:_:_:_:)",
                "title" : "init(Vector, Vector?, Vector?, Color?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/init(_:)-5517j",
                "title" : "init(Vector)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/init(_:)-7go25",
                "title" : "init(PathPoint)",
                "type" : "init"
              },
              {
                "title" : "Vertex Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/position",
                "title" : "var position: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/normal",
                "title" : "var normal: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/texcoord",
                "title" : "var texcoord: Vector",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/color",
                "title" : "var color: Color",
                "type" : "property"
              },
              {
                "title" : "Transforming Vertices",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/inverted()",
                "title" : "func inverted() -> Vertex",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/rotated(by:)",
                "title" : "func rotated(by: Rotation) -> Vertex",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/scaled(by:)-1dtbr",
                "title" : "func scaled(by: Double) -> Vertex",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/scaled(by:)-20sq4",
                "title" : "func scaled(by: Vector) -> Vertex",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/translated(by:)",
                "title" : "func translated(by: Vector) -> Vertex",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/transformed(by:)",
                "title" : "func transformed(by: Transform) -> Self",
                "type" : "method"
              },
              {
                "title" : "Interpolating Vertices",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/lerp(_:_:)",
                "title" : "func lerp(Vertex, Double) -> Vertex",
                "type" : "method"
              },
              {
                "title" : "Encoding and Decoding Vertices",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/reflected(along:)",
                "title" : "func reflected(along: Plane) -> Vertex",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/withcolor(_:)",
                "title" : "func withColor(Color?) -> Vertex",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/withnormal(_:)",
                "title" : "func withNormal(Vector) -> Vertex",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/withposition(_:)",
                "title" : "func withPosition(Vector) -> Vertex",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/vertex\/withtexcoord(_:)",
                "title" : "func withTexcoord(Vector) -> Vertex",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vertex\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/euclid\/vertex\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vertex\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/vertex\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vertex\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/vertex\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vertex\/*(_:_:)",
                    "title" : "static func * (Self, Transform) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vertex\/*=(_:_:)",
                    "title" : "static func *= (inout Self, Transform)",
                    "type" : "op"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vertex\/rotate(by:)-1umln",
                    "title" : "func rotate(by: Quaternion)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vertex\/rotate(by:)-622p8",
                    "title" : "func rotate(by: Rotation)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vertex\/rotated(by:)",
                    "title" : "func rotated(by: Rotation) -> Vertex",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vertex\/scale(by:)-1hyw0",
                    "title" : "func scale(by: Double)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vertex\/scale(by:)-6c0wl",
                    "title" : "func scale(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vertex\/scaled(by:)-1dtbr",
                    "title" : "func scaled(by: Double) -> Vertex",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vertex\/scaled(by:)-20sq4",
                    "title" : "func scaled(by: Vector) -> Vertex",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vertex\/transform(by:)",
                    "title" : "func transform(by: Transform)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vertex\/transformed(by:)",
                    "title" : "func transformed(by: Transform) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vertex\/translate(by:)",
                    "title" : "func translate(by: Vector)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/euclid\/vertex\/translated(by:)",
                    "title" : "func translated(by: Vector) -> Vertex",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/vertex\/transformable-implementations",
                "title" : "Transformable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/euclid\/vertex",
            "title" : "Vertex",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Creating a Color",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/color\/init(_:_:_:_:)",
                "title" : "init(Double, Double, Double, Double)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/color\/init(_:_:)",
                "title" : "init(Double, Double)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/color\/init(_:)-25eby",
                "title" : "init(CGColor)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/color\/init(_:)-53lhy",
                "title" : "init?([Double])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/euclid\/color\/init(_:)-7d8un",
                "title" : "init(NSColor)",
                "type" : "init"
              },
              {
                "title" : "Default Colors",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/color\/clear",
                "title" : "static let clear: Color",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/color\/black",
                "title" : "static let black: Color",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/color\/white",
                "title" : "static let white: Color",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/color\/gray",
                "title" : "static let gray: Color",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/color\/red",
                "title" : "static let red: Color",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/color\/green",
                "title" : "static let green: Color",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/color\/blue",
                "title" : "static let blue: Color",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/color\/yellow",
                "title" : "static let yellow: Color",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/color\/cyan",
                "title" : "static let cyan: Color",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/color\/magenta",
                "title" : "static let magenta: Color",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/color\/orange",
                "title" : "static let orange: Color",
                "type" : "property"
              },
              {
                "title" : "Color properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/color\/r",
                "title" : "var r: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/color\/g",
                "title" : "var g: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/color\/b",
                "title" : "var b: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/euclid\/color\/a",
                "title" : "var a: Double",
                "type" : "property"
              },
              {
                "title" : "Mutating Colors",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/color\/withalpha(_:)",
                "title" : "func withAlpha(Double) -> Color",
                "type" : "method"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/color\/components",
                "title" : "var components: [Double]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/color\/lerp(_:_:)",
                "title" : "func lerp(Color, Double) -> Color",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/color\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/euclid\/color\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/color\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/euclid\/color\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/euclid\/color\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/euclid\/color\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/euclid\/color",
            "title" : "Color",
            "type" : "struct"
          },
          {
            "title" : "Supporting Functions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/euclid\/sin(_:)",
            "title" : "func sin(Angle) -> Double",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/euclid\/cos(_:)",
            "title" : "func cos(Angle) -> Double",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/euclid\/tan(_:)",
            "title" : "func tan(Angle) -> Double",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/euclid\/min(_:_:)",
            "title" : "func min(Vector, Vector) -> Vector",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/euclid\/max(_:_:)",
            "title" : "func max(Vector, Vector) -> Vector",
            "type" : "func"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/bounded\/bounds",
                "title" : "var bounds: Bounds",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/euclid\/bounded",
            "title" : "Bounded",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/transformable\/*(_:_:)",
                "title" : "static func * (Self, Transform) -> Self",
                "type" : "op"
              },
              {
                "path" : "\/documentation\/euclid\/transformable\/*=(_:_:)",
                "title" : "static func *= (inout Self, Transform)",
                "type" : "op"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/euclid\/transformable\/rotate(by:)-1l9u5",
                "title" : "func rotate(by: Rotation)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/transformable\/rotate(by:)-5a3iz",
                "title" : "func rotate(by: Quaternion)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/euclid\/transformable\/rotated(by:)-5mcqw",
                        "title" : "func rotated(by: Quaternion) -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "Transformable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/euclid\/transformable\/rotated(by:)-76uyz",
                "title" : "func rotated(by: Rotation) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/transformable\/scale(by:)-89xwv",
                "title" : "func scale(by: Double)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/transformable\/scale(by:)-8ec9r",
                "title" : "func scale(by: Vector)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/transformable\/scaled(by:)-3shbk",
                "title" : "func scaled(by: Vector) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/transformable\/scaled(by:)-5p6di",
                "title" : "func scaled(by: Double) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/transformable\/transform(by:)",
                "title" : "func transform(by: Transform)",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/euclid\/transformable\/transformed(by:)-21ah6",
                        "title" : "func transformed(by: Transform) -> Self",
                        "type" : "method"
                      }
                    ],
                    "title" : "Transformable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/euclid\/transformable\/transformed(by:)-9m686",
                "title" : "func transformed(by: Transform) -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/transformable\/translate(by:)",
                "title" : "func translate(by: Vector)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/euclid\/transformable\/translated(by:)",
                "title" : "func translated(by: Vector) -> Self",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/euclid\/transformable",
            "title" : "Transformable",
            "type" : "protocol"
          }
        ],
        "path" : "\/documentation\/euclid",
        "title" : "Euclid",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 2
  }
}