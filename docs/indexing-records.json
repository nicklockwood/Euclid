[{"rawIndexableTextContent":"Translates the transform.  An offset vector to apply to the transform.","kind":"symbol","title":"translate(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/translate(by:)","interfaceLanguage":"swift"}},"summary":"Translates the transform."},{"rawIndexableTextContent":"Returns the angle between this vector and another.  The vector to compare with.","kind":"symbol","title":"angle(with:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/angle(with:)-29paf","interfaceLanguage":"swift"}},"summary":"Returns the angle between this vector and another."},{"rawIndexableTextContent":"A vector with all coordinates set to 1. ","kind":"symbol","title":"one","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/one","interfaceLanguage":"swift"}},"summary":"A vector with all coordinates set to 1."},{"rawIndexableTextContent":"A surface normal vector, perpendicular to the plane. ","kind":"symbol","title":"normal","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/normal","interfaceLanguage":"swift"}},"summary":"A surface normal vector, perpendicular to the plane."},{"rawIndexableTextContent":"Encodes this quaternion into the given encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this quaternion into the given encoder."},{"rawIndexableTextContent":"Inherited from Comparable....(_:). ","kind":"symbol","title":"...(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/...(_:)-49h2f","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable....(_:)."},{"rawIndexableTextContent":"Returns a translated copy of the path.  An offset vector to apply to the path.","kind":"symbol","title":"translated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/translated(by:)","interfaceLanguage":"swift"}},"summary":"Returns a translated copy of the path."},{"rawIndexableTextContent":"Creates a rotation from Euler angles applied in pitch\/yaw\/roll order.  The angle of rotation around the X axis. This is applied first. The angle of rotation around the Y axis. This is applied second. The angle of rotation around the Z axis. This is applied last.","kind":"symbol","title":"init(pitch:yaw:roll:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init(pitch:yaw:roll:)","interfaceLanguage":"swift"}},"summary":"Creates a rotation from Euler angles applied in pitch\/yaw\/roll order."},{"rawIndexableTextContent":"Generate both the front and back faces. ","kind":"symbol","title":"Mesh.Faces.frontAndBack","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Faces\/frontAndBack","interfaceLanguage":"swift"}},"summary":"Generate both the front and back faces."},{"rawIndexableTextContent":"Returns a scaled copy of the plane.  A scale vector to apply to the plane.","kind":"symbol","title":"scaled(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/scaled(by:)-29v7y","interfaceLanguage":"swift"}},"summary":"Returns a scaled copy of the plane."},{"rawIndexableTextContent":"Create a bounds from an array of points.  An array of polygons that the bounds contains.","kind":"symbol","title":"init(polygons:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/init(polygons:)","interfaceLanguage":"swift"}},"summary":"Create a bounds from an array of points."},{"rawIndexableTextContent":"Creates a new identity rotation. ","kind":"symbol","title":"init()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init()","interfaceLanguage":"swift"}},"summary":"Creates a new identity rotation."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"scaleCorrected(for:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/scaleCorrected(for:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns the reverse (aka transpose) rotation. ","kind":"symbol","title":"-(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/-(_:)","interfaceLanguage":"swift"}},"summary":"Returns the reverse (aka transpose) rotation."},{"rawIndexableTextContent":"The translation or position component of the transform. ","kind":"symbol","title":"offset","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/offset","interfaceLanguage":"swift"}},"summary":"The translation or position component of the transform."},{"rawIndexableTextContent":"The texture coordinate of the path point (optional). If omitted, will be inferred automatically. ","kind":"symbol","title":"texcoord","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/texcoord","interfaceLanguage":"swift"}},"summary":"The texture coordinate of the path point (optional). If omitted, will be inferred automatically."},{"rawIndexableTextContent":"Returns the point where the specified plane intersects the line.  Return Value The point of intersection, or nil if the line and plane are parallel (don’t intersect). The plane to compare with.","kind":"symbol","title":"intersection(with:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/intersection(with:)-7s1sd","interfaceLanguage":"swift"}},"summary":"Returns the point where the specified plane intersects the line."},{"rawIndexableTextContent":"Encodes this line into the given encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this line into the given encoder."},{"rawIndexableTextContent":"Creates an axis-aligned cuboidal mesh.  The center point of the mesh. The size of the cuboid mesh. The direction of the generated polygon faces. The optional material for the mesh.","kind":"symbol","title":"cube(center:size:faces:material:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/cube(center:size:faces:material:)-7wdr2","interfaceLanguage":"swift"}},"summary":"Creates an axis-aligned cuboidal mesh."},{"rawIndexableTextContent":"Creates a mesh by stroking a path with the line width, detail, and material you provide.  The path to stroke. The line width of the stroke. The number of sides to use for the cross-sectional shape of the stroked mesh. The optional material for the mesh.","kind":"symbol","title":"stroke(_:width:detail:material:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/stroke(_:width:detail:material:)-9mb5w","interfaceLanguage":"swift"}},"summary":"Creates a mesh by stroking a path with the line width, detail, and material you provide."},{"rawIndexableTextContent":"A Boolean value that indicates whether the polygon includes vertex colors. ","kind":"symbol","title":"hasVertexColors","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/hasVertexColors","interfaceLanguage":"swift"}},"summary":"A Boolean value that indicates whether the polygon includes vertex colors."},{"rawIndexableTextContent":"The size of the bounds. The minimum returned size is zero, even if max < min. ","kind":"symbol","title":"size","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/size","interfaceLanguage":"swift"}},"summary":"The size of the bounds. The minimum returned size is zero, even if max < min."},{"rawIndexableTextContent":"Creates a mesh by filling a path to form one or more polygons.  The shape to be filled. The direction the polygon faces. The optional material for the mesh.","kind":"symbol","title":"fill(_:faces:material:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/fill(_:faces:material:)","interfaceLanguage":"swift"}},"summary":"Creates a mesh by filling a path to form one or more polygons."},{"rawIndexableTextContent":"Creates a new line by decoding from the given decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new line by decoding from the given decoder."},{"rawIndexableTextContent":"Returns a new mesh that retains the shape of the receiver, but with the intersecting area colored using material from the parameter.  Return Value a new mesh representing the result of stencilling. Discussion  Parameters mesh: The mesh to be stencilled onto this one. isCancelled: Callback used to cancel the operation.","kind":"symbol","title":"stencil(_:isCancelled:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/stencil(_:isCancelled:)-swift.method","interfaceLanguage":"swift"}},"summary":"Returns a new mesh that retains the shape of the receiver, but with the intersecting area colored using material from the parameter."},{"rawIndexableTextContent":"Creates an angle from a radians value.  The angle in radians.","kind":"symbol","title":"radians(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/radians(_:)","interfaceLanguage":"swift"}},"summary":"Creates an angle from a radians value."},{"rawIndexableTextContent":"The Y component of the vector. ","kind":"symbol","title":"y","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/y","interfaceLanguage":"swift"}},"summary":"The Y component of the vector."},{"rawIndexableTextContent":"Returns the reverse quaternion rotation. ","kind":"symbol","title":"-(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/-(_:)","interfaceLanguage":"swift"}},"summary":"Returns the reverse quaternion rotation."},{"rawIndexableTextContent":"Texture coordinates for the vertex. Set this to zero if you are not using a texture map. ","kind":"symbol","title":"texcoord","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/texcoord","interfaceLanguage":"swift"}},"summary":"Texture coordinates for the vertex. Set this to zero if you are not using a texture map."},{"rawIndexableTextContent":"Creates a new vertex.  The position of the vertex in 3D space. The surface normal for the vertex (defaults to zero). The optional texture coordinates for the vertex (defaults to zero). The optional vertex color (defaults to white).","kind":"symbol","title":"init(_:_:_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/init(_:_:_:_:)","interfaceLanguage":"swift"}},"summary":"Creates a new vertex."},{"rawIndexableTextContent":"Creates a polygon from an array of vertices.  An array of Vertex that make up the polygon. An optional Polygon.Material to use for the polygon. Discussion A polygon can be convex or concave, but vertices must be coplanar and non-degenerate. Vertices are assumed to be in anti-clockwise order for the purpose of deriving the face normal.","kind":"symbol","title":"init(_:material:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/init(_:material:)-9mns5","interfaceLanguage":"swift"}},"summary":"Creates a polygon from an array of vertices."},{"rawIndexableTextContent":"No overview available.  An array of 4 floating-point values.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/init(_:)-fyhx","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a rotation from Euler angles applied in roll\/yaw\/pitch order.  The angle of rotation around the Z axis. This is applied first. The angle of rotation around the Y axis. This is applied second. The angle of rotation around the X axis. This is applied last.","kind":"symbol","title":"init(roll:yaw:pitch:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/init(roll:yaw:pitch:)","interfaceLanguage":"swift"}},"summary":"Creates a rotation from Euler angles applied in roll\/yaw\/pitch order."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a scaled copy of the path point.  A scale factor to apply to the path point.","kind":"symbol","title":"scaled(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/scaled(by:)-7e3o7","interfaceLanguage":"swift"}},"summary":"Returns a scaled copy of the path point."},{"rawIndexableTextContent":"Indicates whether the path is a closed path. ","kind":"symbol","title":"isClosed","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/isClosed","interfaceLanguage":"swift"}},"summary":"Indicates whether the path is a closed path."},{"rawIndexableTextContent":"Linearly interpolates between two path points.  Return Value A new path point at the interpolated position. The path point to interpolate with. The normalized extent of interpolation, from 0 to 1.","kind":"symbol","title":"lerp(_:_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/lerp(_:_:)","interfaceLanguage":"swift"}},"summary":"Linearly interpolates between two path points."},{"rawIndexableTextContent":"Returns a transformed copy of the path point.  A transform to apply to the path point.","kind":"symbol","title":"transformed(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/transformed(by:)","interfaceLanguage":"swift"}},"summary":"Returns a transformed copy of the path point."},{"rawIndexableTextContent":"Returns a translated copy of the vertex.  An offset vector to apply to the vertex.","kind":"symbol","title":"translated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/translated(by:)","interfaceLanguage":"swift"}},"summary":"Returns a translated copy of the vertex."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"black","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/black","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Merges the polygons from two meshes.  Return Value A new mesh that includes all polygons from both meshes. The mesh to merge with this one. Discussion No attempt is made to deduplicate or join meshes. Polygons are neither split nor removed.","kind":"symbol","title":"merge(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/merge(_:)-swift.method","interfaceLanguage":"swift"}},"summary":"Merges the polygons from two meshes."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Encodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/Encodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a polygon from a set of vertex positions.  An array of Vector positions for the polygon vertices. An optional Polygon.Material to use for the polygon. Discussion Vertex normals will be set to match the overall face normal of the polygon. Texture coordinates will be set to zero. Vertex colors will be defaulted to white.","kind":"symbol","title":"init(_:material:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/init(_:material:)-5ryug","interfaceLanguage":"swift"}},"summary":"Creates a polygon from a set of vertex positions."},{"rawIndexableTextContent":"An array containing the raw components of the quaternion. ","kind":"symbol","title":"components","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/components","interfaceLanguage":"swift"}},"summary":"An array containing the raw components of the quaternion."},{"rawIndexableTextContent":"Returns a new mesh representing the combined volume of the mesh parameter and the receiver, with inner faces removed.  Return Value a new mesh representing the union of the input meshes. Discussion  Parameters mesh: The mesh to form a union with. isCancelled: Callback used to cancel the operation.","kind":"symbol","title":"union(_:isCancelled:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/union(_:isCancelled:)-swift.method","interfaceLanguage":"swift"}},"summary":"Returns a new mesh representing the combined volume of the mesh parameter and the receiver, with inner faces removed."},{"rawIndexableTextContent":"Returns a transformed copy of the polygon.  A transform to apply to the polygon.","kind":"symbol","title":"transformed(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/transformed(by:)","interfaceLanguage":"swift"}},"summary":"Returns a transformed copy of the polygon."},{"rawIndexableTextContent":"Creates a closed elliptical path.  The horizontal diameter of the ellipse. The vertical diameter of the ellipse. The number of line segments used to approximate the ellipse. An optional Color to apply to the path’s points.","kind":"symbol","title":"ellipse(width:height:segments:color:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/ellipse(width:height:segments:color:)","interfaceLanguage":"swift"}},"summary":"Creates a closed elliptical path."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Decodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a vector from an array of coordinates.  An array of vector components. Discussion Omitted values default to 0 and extra components are ignored.","kind":"symbol","title":"init(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(_:)-63ct7","interfaceLanguage":"swift"}},"summary":"Creates a vector from an array of coordinates."},{"rawIndexableTextContent":"The magnitude of the quaternion. ","kind":"symbol","title":"length","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/length","interfaceLanguage":"swift"}},"summary":"The magnitude of the quaternion."},{"rawIndexableTextContent":"Inherited from Comparable...<(_:_:). ","kind":"symbol","title":"..<(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/.._(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable...<(_:_:)."},{"rawIndexableTextContent":"Returns a rotated copy of the bounds.  A quaternion to apply to the bounds. Discussion Because a bounds must be axially-aligned, rotating by an angle that is not a multiple of 90 degrees will result in the bounds being increased in size. Rotating it back again will not reduce the size, so this is a potentially irreversible operation. In general, after rotating a shape it is better to recalculate the bounds rather than trying to rotate the previous bounds.","kind":"symbol","title":"rotated(by:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/rotated(by:)-5g62b","interfaceLanguage":"swift"}},"summary":"Returns a rotated copy of the bounds."},{"rawIndexableTextContent":"Divides the components of the vector by the specified value. ","kind":"symbol","title":"\/=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/\/=(_:_:)","interfaceLanguage":"swift"}},"summary":"Divides the components of the vector by the specified value."},{"rawIndexableTextContent":"Returns the distance between the vector (representing a position in space) from the specified line.  Return Value The absolute perpendicular distance between the point and line. The line to compare with.","kind":"symbol","title":"distance(from:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/distance(from:)-3eglz","interfaceLanguage":"swift"}},"summary":"Returns the distance between the vector (representing a position in space) from the specified line."},{"rawIndexableTextContent":"The center of the bounds. If the bounds is empty this will return the zero vector. ","kind":"symbol","title":"center","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/center","interfaceLanguage":"swift"}},"summary":"The center of the bounds. If the bounds is empty this will return the zero vector."},{"rawIndexableTextContent":"A Boolean value that indicates whether the bounds is empty (has zero volume). ","kind":"symbol","title":"isEmpty","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/isEmpty","interfaceLanguage":"swift"}},"summary":"A Boolean value that indicates whether the bounds is empty (has zero volume)."},{"rawIndexableTextContent":"Returns a translated copy of the polygon.  An offset vector to apply to the polygon.","kind":"symbol","title":"translated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/translated(by:)","interfaceLanguage":"swift"}},"summary":"Returns a translated copy of the polygon."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Encodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/Encodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The identity rotation (i.e. no rotation). ","kind":"symbol","title":"identity","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/identity","interfaceLanguage":"swift"}},"summary":"The identity rotation (i.e. no rotation)."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Decodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns the distance between a point and the plane.  Return Value The distance between the point and the plane. The value is positive if the point lies in front of the plane, and negative if behind. The point to compare with.","kind":"symbol","title":"distance(from:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/distance(from:)","interfaceLanguage":"swift"}},"summary":"Returns the distance between a point and the plane."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"Returns a Boolean value that indicates whether a point lies inside the polygon, on the same plane.  Return Value true if the point lies inside the polygon and false otherwise. The point to test.","kind":"symbol","title":"containsPoint(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/containsPoint(_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value that indicates whether a point lies inside the polygon, on the same plane."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Combines two rotations to get the cumulative rotation. ","kind":"symbol","title":"*(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/*(_:_:)","interfaceLanguage":"swift"}},"summary":"Combines two rotations to get the cumulative rotation."},{"rawIndexableTextContent":"A Boolean value that indicates whether the polygon is convex. ","kind":"symbol","title":"isConvex","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/isConvex","interfaceLanguage":"swift"}},"summary":"A Boolean value that indicates whether the polygon is convex."},{"rawIndexableTextContent":"Encodes this line segment into the given encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this line segment into the given encoder."},{"rawIndexableTextContent":"Returns a new vector representing the maximum of the components of the two vectors. ","kind":"symbol","title":"max(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/max(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns a new vector representing the maximum of the components of the two vectors."},{"rawIndexableTextContent":"Multiplies the components of the vector by the specified value. ","kind":"symbol","title":"*=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/*=(_:_:)","interfaceLanguage":"swift"}},"summary":"Multiplies the components of the vector by the specified value."},{"rawIndexableTextContent":"A closure that maps a SceneKit material to a Euclid material.  Return Value A Mesh.Material instance, or nil for the default material. An SCNMaterial material to convert.","kind":"symbol","title":"Mesh.MaterialProvider","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/MaterialProvider","interfaceLanguage":"swift"}},"summary":"A closure that maps a SceneKit material to a Euclid material."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Encodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/Encodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns an array containing the red, green, blue, and alpha components of the color. ","kind":"symbol","title":"components","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/components","interfaceLanguage":"swift"}},"summary":"Returns an array containing the red, green, blue, and alpha components of the color."},{"rawIndexableTextContent":"Returns the angle between this vector and the specified plane.  The plane to compare with.","kind":"symbol","title":"angle(with:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/angle(with:)-9sfg1","interfaceLanguage":"swift"}},"summary":"Returns the angle between this vector and the specified plane."},{"rawIndexableTextContent":"The array of vertices that make up the polygon. ","kind":"symbol","title":"vertices","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/vertices","interfaceLanguage":"swift"}},"summary":"The array of vertices that make up the polygon."},{"rawIndexableTextContent":"Adds the components of the vector on the right to the ones on the left. ","kind":"symbol","title":"+=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/+=(_:_:)","interfaceLanguage":"swift"}},"summary":"Adds the components of the vector on the right to the ones on the left."},{"rawIndexableTextContent":"Returns the inverse angle. ","kind":"symbol","title":"-(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/-(_:)","interfaceLanguage":"swift"}},"summary":"Returns the inverse angle."},{"rawIndexableTextContent":"Tessellates the polygon into triangles.  Return Value An array of triangles. Discussion If the polygon is already a triangle then it is returned unchanged.","kind":"symbol","title":"triangulate()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/triangulate()","interfaceLanguage":"swift"}},"summary":"Tessellates the polygon into triangles."},{"rawIndexableTextContent":"Returns a quaternion with its components multiplied by the specified value. ","kind":"symbol","title":"*(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/*(_:_:)-2drke","interfaceLanguage":"swift"}},"summary":"Returns a quaternion with its components multiplied by the specified value."},{"rawIndexableTextContent":"An array of vertices suitable for constructing a polygon from the path.  Discussion Vertices include normals and uv coordinates normalized to the bounding rectangle of the path. Returns nil if path is not closed, or has subpaths.","kind":"symbol","title":"faceVertices","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/faceVertices","interfaceLanguage":"swift"}},"summary":"An array of vertices suitable for constructing a polygon from the path."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"isFlipped","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/isFlipped","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a line segment with a start and end point.  The start of the line segment. The end of the line segment.","kind":"symbol","title":"init(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/init(_:_:)","interfaceLanguage":"swift"}},"summary":"Creates a line segment with a start and end point."},{"rawIndexableTextContent":"Creates a plane from a point and surface normal.  The surface normal of the plane. An arbitrary point on the plane.","kind":"symbol","title":"init(normal:pointOnPlane:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/init(normal:pointOnPlane:)","interfaceLanguage":"swift"}},"summary":"Creates a plane from a point and surface normal."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Faces\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"Returns whether the leftmost angle has the lower value. ","kind":"symbol","title":"<(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/_(_:_:)-1aqv9","interfaceLanguage":"swift"}},"summary":"Returns whether the leftmost angle has the lower value."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Decodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"A normalized direction vector pointing upwards relative to the current rotaion. ","kind":"symbol","title":"up","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/up","interfaceLanguage":"swift"}},"summary":"A normalized direction vector pointing upwards relative to the current rotaion."},{"rawIndexableTextContent":"A plane located at the origin, aligned with the X and Z axes. ","kind":"symbol","title":"xz","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/xz","interfaceLanguage":"swift"}},"summary":"A plane located at the origin, aligned with the X and Z axes."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":" Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a rotationally symmetrical mesh by turning the specified path around the Y axis.  The path to use as the profile for the mesh. The number of slices that make up the lathed mesh. The number of segments used to make the pole. A Boolean value that indicates whether to add detail to the poles. The direction of the generated polygon faces. The mode in which texture coordinates are wrapped around the mesh. The optional material for the mesh. Discussion The profile path can be open or closed. Define a closed path by ending with the same point that you started with. The path can be placed on either side of the Y axis, however the behavior is undefined for paths that cross the axis Open paths that do not start and end on the Y axis will produce a shape with a hole in it","kind":"symbol","title":"lathe(_:slices:poleDetail:addDetailForFlatPoles:faces:wrapMode:material:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/lathe(_:slices:poleDetail:addDetailForFlatPoles:faces:wrapMode:material:)","interfaceLanguage":"swift"}},"summary":"Creates a rotationally symmetrical mesh by turning the specified path around the Y axis."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"Linearly interpolates between two vertices.  Return Value A new vertex with values interpolated between the two vertices. The vertex to interpolate towards. The unit value that indicates the distance between of this vertex and the target vertex. Discussion Interpolation is applied to the texture coordinate, normal and color, as well as the position.","kind":"symbol","title":"lerp(_:_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/lerp(_:_:)","interfaceLanguage":"swift"}},"summary":"Linearly interpolates between two vertices."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"direction","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/direction","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Inherited from Comparable.<=(_:_:). ","kind":"symbol","title":"<=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/_=(_:_:)-8q2nt","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable.<=(_:_:)."},{"rawIndexableTextContent":"The array of points that makes up this path. ","kind":"symbol","title":"points","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/points","interfaceLanguage":"swift"}},"summary":"The array of points that makes up this path."},{"rawIndexableTextContent":"Returns a transformed copy of the plane.  A transform to apply to the plane.","kind":"symbol","title":"transformed(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/transformed(by:)","interfaceLanguage":"swift"}},"summary":"Returns a transformed copy of the plane."},{"rawIndexableTextContent":"An infinite 2D plane in 3D space. ","kind":"symbol","title":"Plane","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane","interfaceLanguage":"swift"}},"summary":"An infinite 2D plane in 3D space."},{"rawIndexableTextContent":"Returns a Boolean value that indicates if the two vectors are approximately equal. ","kind":"symbol","title":"==(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/==(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value that indicates if the two vectors are approximately equal."},{"rawIndexableTextContent":"Creates an angle representing the trigonometric arc tangent of the value you provide.  The tangent value to use to calculate the angle.","kind":"symbol","title":"atan(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/atan(_:)","interfaceLanguage":"swift"}},"summary":"Creates an angle representing the trigonometric arc tangent of the value you provide."},{"rawIndexableTextContent":"Returns a new bounds inset by the specified amount.  Return Value The inset bounds. The amount to inset the bounds by. Use a negative value to expand the bounds.","kind":"symbol","title":"inset(by:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/inset(by:)-4gk62","interfaceLanguage":"swift"}},"summary":"Returns a new bounds inset by the specified amount."},{"rawIndexableTextContent":"Multiplies the angle by a numeric value. ","kind":"symbol","title":"*=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/*=(_:_:)","interfaceLanguage":"swift"}},"summary":"Multiplies the angle by a numeric value."},{"rawIndexableTextContent":"An angle or 2D rotation. ","kind":"symbol","title":"Angle","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle","interfaceLanguage":"swift"}},"summary":"An angle or 2D rotation."},{"rawIndexableTextContent":"Computes the line of intersection between two planes.  Return Value The line of intersection between the planes, or nil if the planes are parallel. The plane to compare with.","kind":"symbol","title":"intersection(with:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/intersection(with:)-4v7tg","interfaceLanguage":"swift"}},"summary":"Computes the line of intersection between two planes."},{"rawIndexableTextContent":"Returns the componentwise difference between two vectors. ","kind":"symbol","title":"-(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/-(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns the componentwise difference between two vectors."},{"rawIndexableTextContent":"A Boolean value that indicates whether the mesh includes vertex colors. ","kind":"symbol","title":"hasVertexColors","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/hasVertexColors","interfaceLanguage":"swift"}},"summary":"A Boolean value that indicates whether the mesh includes vertex colors."},{"rawIndexableTextContent":"Inherited from Comparable.>=(_:_:). ","kind":"symbol","title":">=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/_=(_:_:)-9s7pp","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable.>=(_:_:)."},{"rawIndexableTextContent":"Returns a scaled copy of the path point.  A scale vector to apply to the path point.","kind":"symbol","title":"scaled(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/scaled(by:)-4wtbg","interfaceLanguage":"swift"}},"summary":"Returns a scaled copy of the path point."},{"rawIndexableTextContent":"Returns a scaled copy of the polygon.  A scale factor to apply to the polygon.","kind":"symbol","title":"scaled(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/scaled(by:)-69m6m","interfaceLanguage":"swift"}},"summary":"Returns a scaled copy of the polygon."},{"rawIndexableTextContent":"Returns the difference between two angles. ","kind":"symbol","title":"-(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/-(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns the difference between two angles."},{"rawIndexableTextContent":"Loads a mesh from a file using any format supported by SceneKit,  with optional material mapping.  The URL of the file to be loaded. An optional closure to map the SceneKit materials to Euclid materials. If omitted, the SCNMaterial will be directly used as the mesh material.","kind":"symbol","title":"init(url:materialLookup:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(url:materialLookup:)","interfaceLanguage":"swift"}},"summary":"Loads a mesh from a file using any format supported by SceneKit,  with optional material mapping."},{"rawIndexableTextContent":"Split the mesh along a plane.  Return Value A tuple of two new meshes representing the parts behind and in front of the plane. The Plane to split the mesh along. Discussion If the plane and mesh do not intersect, one of the returned meshes will be nil.","kind":"symbol","title":"split(along:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/split(along:)","interfaceLanguage":"swift"}},"summary":"Split the mesh along a plane."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Encodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/Encodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Efficiently forms a union from multiple meshes.  Return Value a new mesh representing the union of the input meshes. Discussion Parameters meshes: The meshes to form a union from. isCancelled: Callback used to cancel the operation.","kind":"symbol","title":"union(_:isCancelled:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/union(_:isCancelled:)-swift.type.method","interfaceLanguage":"swift"}},"summary":"Efficiently forms a union from multiple meshes."},{"rawIndexableTextContent":"Returns the nearest point on the specified line to the vector (representing a position in space).  Return Value The nearest point in 3D space that lies on the line. The line to project onto.","kind":"symbol","title":"project(onto:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/project(onto:)-rksk","interfaceLanguage":"swift"}},"summary":"Returns the nearest point on the specified line to the vector (representing a position in space)."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"clear","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/clear","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a rotation around the Z axis.  The angle to rotate by.","kind":"symbol","title":"roll(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/roll(_:)","interfaceLanguage":"swift"}},"summary":"Creates a rotation around the Z axis."},{"rawIndexableTextContent":"The color of the path point (optional). ","kind":"symbol","title":"color","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/color","interfaceLanguage":"swift"}},"summary":"The color of the path point (optional)."},{"rawIndexableTextContent":"Linearly interpolate between this vector and another.  The vector to interpolate towards. The normalized extent of interpolation, from 0 to 1.","kind":"symbol","title":"lerp(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/lerp(_:_:)","interfaceLanguage":"swift"}},"summary":"Linearly interpolate between this vector and another."},{"rawIndexableTextContent":"A normalized direction vector pointing forwards relative to the current rotaion. ","kind":"symbol","title":"forward","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/forward","interfaceLanguage":"swift"}},"summary":"A normalized direction vector pointing forwards relative to the current rotaion."},{"rawIndexableTextContent":"The square of the length of the quaternion. This is less expensive to compute than the length itself. ","kind":"symbol","title":"lengthSquared","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/lengthSquared","interfaceLanguage":"swift"}},"summary":"The square of the length of the quaternion. This is less expensive to compute than the length itself."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":" Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The maximum coordinate of the bounds. ","kind":"symbol","title":"max","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/max","interfaceLanguage":"swift"}},"summary":"The maximum coordinate of the bounds."},{"rawIndexableTextContent":"Efficiently strokes a set of line segments (useful for drawing wireframes)  A collection of LineSegment to stroke. The line width of the strokes. The number of sides to use for the cross-sectional shape of the stroked mesh. The optional material for the mesh.","kind":"symbol","title":"stroke(_:width:detail:material:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/stroke(_:width:detail:material:)-uzi1","interfaceLanguage":"swift"}},"summary":"Efficiently strokes a set of line segments (useful for drawing wireframes)"},{"rawIndexableTextContent":"The blue component of the color. ","kind":"symbol","title":"b","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/b","interfaceLanguage":"swift"}},"summary":"The blue component of the color."},{"rawIndexableTextContent":"A choice of the face directions that Euclid generates for polygons. ","kind":"symbol","title":"Mesh.Faces","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Faces","interfaceLanguage":"swift"}},"summary":"A choice of the face directions that Euclid generates for polygons."},{"rawIndexableTextContent":"Returns a translated copy of the plane.  An offset vector to apply to the plane.","kind":"symbol","title":"translated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/translated(by:)","interfaceLanguage":"swift"}},"summary":"Returns a translated copy of the plane."},{"rawIndexableTextContent":"Returns a Boolean value that indicates whether the two bounds intersect.  Return Value true if the bounds intersect, and false otherwise. The bounds to compare.","kind":"symbol","title":"intersects(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/intersects(_:)-95v17","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value that indicates whether the two bounds intersect."},{"rawIndexableTextContent":"Inherited from Comparable....(_:). ","kind":"symbol","title":"...(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/...(_:)-732z3","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable....(_:)."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The identity transform (i.e. no transform). ","kind":"symbol","title":"identity","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/identity","interfaceLanguage":"swift"}},"summary":"The identity transform (i.e. no transform)."},{"rawIndexableTextContent":"Returns a rotated copy of the polygon.  A rotation to apply to the polygon.","kind":"symbol","title":"rotated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/rotated(by:)-8zgb0","interfaceLanguage":"swift"}},"summary":"Returns a rotated copy of the polygon."},{"rawIndexableTextContent":"Returns a vector with its components multiplied by the specified value. ","kind":"symbol","title":"*(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/*(_:_:)-48gl1","interfaceLanguage":"swift"}},"summary":"Returns a vector with its components multiplied by the specified value."},{"rawIndexableTextContent":"A plane located at the origin, aligned with the X and Y axes. ","kind":"symbol","title":"xy","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/xy","interfaceLanguage":"swift"}},"summary":"A plane located at the origin, aligned with the X and Y axes."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Decodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Angle representing a zero (identity) rotation. ","kind":"symbol","title":"zero","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/zero","interfaceLanguage":"swift"}},"summary":"Angle representing a zero (identity) rotation."},{"rawIndexableTextContent":"Encodes this rotation into the given encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this rotation into the given encoder."},{"rawIndexableTextContent":"Creates an extruded text model from a string.  The text to convert into a model The font to use for the text glyphs. The optional width at which to line-wrap the text. The depth of the extruded text. The number line segments used to approximate glyph curves. An optional material to apply to the mesh.","kind":"symbol","title":"init(text:font:width:depth:detail:material:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(text:font:width:depth:detail:material:)","interfaceLanguage":"swift"}},"summary":"Creates an extruded text model from a string."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Comparable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/Comparable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The polygons that make up the mesh. ","kind":"symbol","title":"polygons","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/polygons","interfaceLanguage":"swift"}},"summary":"The polygons that make up the mesh."},{"rawIndexableTextContent":"Creates a vector from a CoreGraphics CGPoint.  the CoreGraphics point.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(_:)-4eop9","interfaceLanguage":"swift"}},"summary":"Creates a vector from a CoreGraphics CGPoint."},{"rawIndexableTextContent":"Creates a new rotation by decoding from the given decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new rotation by decoding from the given decoder."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a mesh by connecting a series of 3D paths representing the cross sections  The paths to connect. The direction of the generated polygon faces. The optional material for the mesh.","kind":"symbol","title":"loft(_:faces:material:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/loft(_:faces:material:)","interfaceLanguage":"swift"}},"summary":"Creates a mesh by connecting a series of 3D paths representing the cross sections"},{"rawIndexableTextContent":"Encodes this path into the given encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this path into the given encoder."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"blue","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/blue","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"All materials used by the mesh. The array may contain nil if some or all of the mesh uses the default material. ","kind":"symbol","title":"materials","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/materials","interfaceLanguage":"swift"}},"summary":"All materials used by the mesh. The array may contain nil if some or all of the mesh uses the default material."},{"rawIndexableTextContent":"Creates a new vector by decoding from the given decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new vector by decoding from the given decoder."},{"rawIndexableTextContent":"Create a color from RGB values and optional alpha component  The red component of the color, from 0 to 1. The green component of the color, from 0 to 1. The blue component of the color, from 0 to 1. The alpha component of the color. Defaults to 1 (fully opaque)","kind":"symbol","title":"init(_:_:_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/init(_:_:_:_:)","interfaceLanguage":"swift"}},"summary":"Create a color from RGB values and optional alpha component"},{"rawIndexableTextContent":"Creates a new polygon by decoding from the given decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new polygon by decoding from the given decoder."},{"rawIndexableTextContent":"The default face generation behavior. Context-dependent. ","kind":"symbol","title":"Mesh.Faces.default","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Faces\/default","interfaceLanguage":"swift"}},"summary":"The default face generation behavior. Context-dependent."},{"rawIndexableTextContent":"Creates a corner path point at the specified position.  The location of the path point. An optional texture coordinate for this path point. An optional vertex color for this path point.","kind":"symbol","title":"point(_:texcoord:color:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/point(_:texcoord:color:)","interfaceLanguage":"swift"}},"summary":"Creates a corner path point at the specified position."},{"rawIndexableTextContent":"Inherited from Comparable....(_:). ","kind":"symbol","title":"...(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/...(_:)-3s6ak","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable....(_:)."},{"rawIndexableTextContent":"Inherited from Comparable.<=(_:_:). ","kind":"symbol","title":"<=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/_=(_:_:)-j6oq","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable.<=(_:_:)."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"scaleCorrected(for:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/scaleCorrected(for:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a new line segment by decoding from the given decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new line segment by decoding from the given decoder."},{"rawIndexableTextContent":"The quaternion component values. ","kind":"symbol","title":"x","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/x","interfaceLanguage":"swift"}},"summary":"The quaternion component values."},{"rawIndexableTextContent":"Returns whether the leftmost plane has the lower value. This provides a stable order when sorting collections of planes. ","kind":"symbol","title":"<(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/_(_:_:)-6eeco","interfaceLanguage":"swift"}},"summary":"Returns whether the leftmost plane has the lower value. This provides a stable order when sorting collections of planes."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"The position of the vertex. ","kind":"symbol","title":"position","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/position","interfaceLanguage":"swift"}},"summary":"The position of the vertex."},{"rawIndexableTextContent":"Creates a path from an array of  path points.  An array of PathPoint making up the path.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/init(_:)","interfaceLanguage":"swift"}},"summary":"Creates a path from an array of  path points."},{"rawIndexableTextContent":"Creates a vector of uniform size.  The value to use for all components.","kind":"symbol","title":"init(size:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(size:)-nkyk","interfaceLanguage":"swift"}},"summary":"Creates a vector of uniform size."},{"rawIndexableTextContent":"An array containing the X, Y, and Z components of the vector. ","kind":"symbol","title":"components","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/components","interfaceLanguage":"swift"}},"summary":"An array containing the X, Y, and Z components of the vector."},{"rawIndexableTextContent":"Returns a scaled copy of the bounds.  A scale factor to apply to the bounds.","kind":"symbol","title":"scaled(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/scaled(by:)-6epo6","interfaceLanguage":"swift"}},"summary":"Returns a scaled copy of the bounds."},{"rawIndexableTextContent":"Inherited from Comparable...<(_:). ","kind":"symbol","title":"..<(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/.._(_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable...<(_:)."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"init(_:texcoord:isCurved:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/init(_:texcoord:isCurved:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Inherited from Comparable....(_:_:). ","kind":"symbol","title":"...(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/...(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable....(_:_:)."},{"rawIndexableTextContent":"Returns a rotated copy of the vertex.  A rotation to apply to the vertex.","kind":"symbol","title":"rotated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/rotated(by:)-8pqx8","interfaceLanguage":"swift"}},"summary":"Returns a rotated copy of the vertex."},{"rawIndexableTextContent":"Inherited from Comparable...<(_:_:). ","kind":"symbol","title":"..<(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/.._(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable...<(_:_:)."},{"rawIndexableTextContent":"Returns a rotated copy of the path.  A quaternion to apply to the path.","kind":"symbol","title":"rotated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/rotated(by:)-3qnnh","interfaceLanguage":"swift"}},"summary":"Returns a rotated copy of the path."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Encodes this mesh into the given encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this mesh into the given encoder."},{"rawIndexableTextContent":"Returns a Boolean value that indicates whether the lines intersect.  Return Value true if the lines intersect and false otherwise. The line to compare with.","kind":"symbol","title":"intersects(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/intersects(_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value that indicates whether the lines intersect."},{"rawIndexableTextContent":"Returns a rotated copy of the mesh.  A rotation to apply to the mesh.","kind":"symbol","title":"rotated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/rotated(by:)-38lip","interfaceLanguage":"swift"}},"summary":"Returns a rotated copy of the mesh."},{"rawIndexableTextContent":"Creates an angle representing the trigonometric arc tangent of the vector you provide.  Discussion Parameters y: The Y component of the input vector x: The X component of the input vector","kind":"symbol","title":"atan2(y:x:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/atan2(y:x:)","interfaceLanguage":"swift"}},"summary":"Creates an angle representing the trigonometric arc tangent of the vector you provide."},{"rawIndexableTextContent":"Returns the difference between two quaternion rotations,. ","kind":"symbol","title":"-(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/-(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns the difference between two quaternion rotations,."},{"rawIndexableTextContent":"Returns a scaled copy of the plane.  A scale factor to apply to the plane.","kind":"symbol","title":"scaled(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/scaled(by:)-6axqe","interfaceLanguage":"swift"}},"summary":"Returns a scaled copy of the plane."},{"rawIndexableTextContent":"Combines two transforms to get the cumulative transform. ","kind":"symbol","title":"*(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/*(_:_:)","interfaceLanguage":"swift"}},"summary":"Combines two transforms to get the cumulative transform."},{"rawIndexableTextContent":"The bounds of all the path’s points. ","kind":"symbol","title":"bounds","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/bounds","interfaceLanguage":"swift"}},"summary":"The bounds of all the path’s points."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Encodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/Encodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a Boolean value that indicates whether the specified point lies on the line segment.  Return Value true if the point lies on the line segment and false otherwise. The point to test.","kind":"symbol","title":"containsPoint(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/containsPoint(_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value that indicates whether the specified point lies on the line segment."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"white","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/white","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a rotated copy of the vertex.  A quaternion to apply to the vertex.","kind":"symbol","title":"rotated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/rotated(by:)-57p4w","interfaceLanguage":"swift"}},"summary":"Returns a rotated copy of the vertex."},{"rawIndexableTextContent":"Returns a transformed copy of the vector.  A transform to apply to the vector.","kind":"symbol","title":"transformed(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/transformed(by:)","interfaceLanguage":"swift"}},"summary":"Returns a transformed copy of the vector."},{"rawIndexableTextContent":"Returns the product of a numeric multiplier and an angle. ","kind":"symbol","title":"*(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/*(_:_:)-2ew65","interfaceLanguage":"swift"}},"summary":"Returns the product of a numeric multiplier and an angle."},{"rawIndexableTextContent":"Returns a Boolean value that indicates whether a point lies on the plane.  Return Value true if the point lies on the plane and false otherwise. The point to test.","kind":"symbol","title":"containsPoint(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/containsPoint(_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value that indicates whether a point lies on the plane."},{"rawIndexableTextContent":"A distance or position in 3D space.  Overview Euclid doesn’t have a 2D vector type. When working with primarily 2D shapes, such as Paths, you can omit the z component when constructing vector and it will default to zero.","kind":"symbol","title":"Vector","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector","interfaceLanguage":"swift"}},"summary":"A distance or position in 3D space."},{"rawIndexableTextContent":"Creates an angle from a radians value.  The angle in radians.","kind":"symbol","title":"init(radians:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/init(radians:)","interfaceLanguage":"swift"}},"summary":"Creates an angle from a radians value."},{"rawIndexableTextContent":"An infinite line in 3D space. ","kind":"symbol","title":"Line","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line","interfaceLanguage":"swift"}},"summary":"An infinite line in 3D space."},{"rawIndexableTextContent":"Returns one or more polygons needed to fill the path.  Return Value An array of polygons needed to fill the path, or an empty array if path is not closed. An optional Polygon.Material to apply to the polygons. Discussion Polygon normals are calculated automatically based on the curvature of the path points. If the path points do not include textcoords, they will be calculated automatically based on the path point positions relative to the bounding rectangle of the path.","kind":"symbol","title":"facePolygons(material:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/facePolygons(material:)","interfaceLanguage":"swift"}},"summary":"Returns one or more polygons needed to fill the path."},{"rawIndexableTextContent":"Creates a new path by decoding from the given decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new path by decoding from the given decoder."},{"rawIndexableTextContent":"The face normal for the path.  Discussion If path is non-planar then this returns an average\/approximate normal.","kind":"symbol","title":"faceNormal","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/faceNormal","interfaceLanguage":"swift"}},"summary":"The face normal for the path."},{"rawIndexableTextContent":"Returns the product of an angle and numeric multiplier. ","kind":"symbol","title":"*(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/*(_:_:)-8l78z","interfaceLanguage":"swift"}},"summary":"Returns the product of an angle and numeric multiplier."},{"rawIndexableTextContent":"Returns the point where the specified line intersects this one.  Return Value The point of intersection, or nil if the lines don’t intersect. The line to compare with.","kind":"symbol","title":"intersection(with:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/intersection(with:)-2nysu","interfaceLanguage":"swift"}},"summary":"Returns the point where the specified line intersects this one."},{"rawIndexableTextContent":"Creates a new vertex by decoding from the given decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new vertex by decoding from the given decoder."},{"rawIndexableTextContent":"Creates a quaternion from raw component values. ","kind":"symbol","title":"init(_:_:_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/init(_:_:_:_:)","interfaceLanguage":"swift"}},"summary":"Creates a quaternion from raw component values."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"red","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/red","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Inherited from Comparable...<(_:_:). ","kind":"symbol","title":"..<(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/.._(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable...<(_:_:)."},{"rawIndexableTextContent":"Creates a new vector from a SceneKit vector.  The SceneKit SCNVector3.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(_:)-228p6","interfaceLanguage":"swift"}},"summary":"Creates a new vector from a SceneKit vector."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Decodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Encodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/Encodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The bounding box containing the polygon. ","kind":"symbol","title":"bounds","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/bounds","interfaceLanguage":"swift"}},"summary":"The bounding box containing the polygon."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Encodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/Encodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Expands this bounds (if necessary) to contain the specified bounds.  The bounds to be included.","kind":"symbol","title":"formUnion(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/formUnion(_:)","interfaceLanguage":"swift"}},"summary":"Expands this bounds (if necessary) to contain the specified bounds."},{"rawIndexableTextContent":"Subtracts the components of the vector on the right from the ones on the left. ","kind":"symbol","title":"-=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/-=(_:_:)","interfaceLanguage":"swift"}},"summary":"Subtracts the components of the vector on the right from the ones on the left."},{"rawIndexableTextContent":"An unordered set of polygon edges. The direction of each edge is normalized relative to the origin to simplify edge-equality comparisons. ","kind":"symbol","title":"undirectedEdges","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/undirectedEdges","interfaceLanguage":"swift"}},"summary":"An unordered set of polygon edges. The direction of each edge is normalized relative to the origin to simplify edge-equality comparisons."},{"rawIndexableTextContent":"The identity quaternion (i.e. no rotation). ","kind":"symbol","title":"identity","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/identity","interfaceLanguage":"swift"}},"summary":"The identity quaternion (i.e. no rotation)."},{"rawIndexableTextContent":"Creates an angle representing the trigonometric arc cosine of the value you provide.  The cosine value to use to calculate the angle.","kind":"symbol","title":"acos(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/acos(_:)","interfaceLanguage":"swift"}},"summary":"Creates an angle representing the trigonometric arc cosine of the value you provide."},{"rawIndexableTextContent":"Creates a bounds from two points.  The first point. The second point. Discussion Unlike the init(min:max:) constructor, the order of the points doesn’t matter.","kind":"symbol","title":"init(_:_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/init(_:_:)","interfaceLanguage":"swift"}},"summary":"Creates a bounds from two points."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Encodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/Encodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a closed square path.  The width and height of the square. An optional Color to apply to the path’s points.","kind":"symbol","title":"square(size:color:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/square(size:color:)","interfaceLanguage":"swift"}},"summary":"Creates a closed square path."},{"rawIndexableTextContent":"An array of vertices suitable for constructing a set of edge polygons for the path.  Discussion Returns an empty array if the path has subpaths.","kind":"symbol","title":"edgeVertices","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/edgeVertices","interfaceLanguage":"swift"}},"summary":"An array of vertices suitable for constructing a set of edge polygons for the path."},{"rawIndexableTextContent":"Creates a bounds from an array of points.  An array of points that the bounds contains.","kind":"symbol","title":"init(points:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/init(points:)","interfaceLanguage":"swift"}},"summary":"Creates a bounds from an array of points."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Encodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/Encodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Encodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/Encodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates an axis-aligned cubical mesh.  The center point of the mesh. The size of the mesh. The direction of the generated polygon faces. The optional material for the mesh.","kind":"symbol","title":"cube(center:size:faces:material:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/cube(center:size:faces:material:)-imdm","interfaceLanguage":"swift"}},"summary":"Creates an axis-aligned cubical mesh."},{"rawIndexableTextContent":"Creates a vertex from a flat array of values.  The array of values. Discussion The number of values specified determines how each value is interpreted. The following patterns are supported (P = position, N = normal, T = texcoord, RGB[A] = color): PP PPP PPP NNN PPP NNN TT PPP NNN TTT PPP NNN TTT RGB PPP NNN TTT RGBA","kind":"symbol","title":"init(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/init(_:)","interfaceLanguage":"swift"}},"summary":"Creates a vertex from a flat array of values."},{"rawIndexableTextContent":"Create an extruded text model from an attributed string  The text to convert into a model The optional width at which to line-wrap the text. The depth of the extruded text. The number line segments used to approximate glyph curves. Optional material to apply to the mesh.","kind":"symbol","title":"init(text:width:depth:detail:material:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(text:width:depth:detail:material:)","interfaceLanguage":"swift"}},"summary":"Create an extruded text model from an attributed string"},{"rawIndexableTextContent":"Inherited from Comparable....(_:). ","kind":"symbol","title":"...(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/...(_:)-2uz97","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable....(_:)."},{"rawIndexableTextContent":"Returns whether the leftmost vector has the lower value. This provides a stable order when sorting collections of vectors. ","kind":"symbol","title":"<(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/_(_:_:)-9obdn","interfaceLanguage":"swift"}},"summary":"Returns whether the leftmost vector has the lower value. This provides a stable order when sorting collections of vectors."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Faces\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Divides the components of the vector by the value you provide. ","kind":"symbol","title":"\/=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/\/=(_:_:)","interfaceLanguage":"swift"}},"summary":"Divides the components of the vector by the value you provide."},{"rawIndexableTextContent":"A vertex represents a corner of a Polygon or a point on the surface of a Mesh. ","kind":"symbol","title":"Vertex","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex","interfaceLanguage":"swift"}},"summary":"A vertex represents a corner of a Polygon or a point on the surface of a Mesh."},{"rawIndexableTextContent":"Returns the componentwise sum of two vectors. ","kind":"symbol","title":"+(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/+(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns the componentwise sum of two vectors."},{"rawIndexableTextContent":"Creates a curved path point at the specified position.  The location of the path point. The texture coordinate corresponding to this path point. An optional vertex color for this path point.","kind":"symbol","title":"curve(_:texcoord:color:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/curve(_:texcoord:color:)","interfaceLanguage":"swift"}},"summary":"Creates a curved path point at the specified position."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"Returns a new vector that represents the mininum of the components of the two vectors. ","kind":"symbol","title":"min(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/min(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns a new vector that represents the mininum of the components of the two vectors."},{"rawIndexableTextContent":"Indicates whether all the path’s points lie on a single plane. ","kind":"symbol","title":"isPlanar","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/isPlanar","interfaceLanguage":"swift"}},"summary":"Indicates whether all the path’s points lie on a single plane."},{"rawIndexableTextContent":"Subtracts the angle on the right from the one on the left. ","kind":"symbol","title":"-=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/-=(_:_:)","interfaceLanguage":"swift"}},"summary":"Subtracts the angle on the right from the one on the left."},{"rawIndexableTextContent":"The direction of the line segment as a normalized vector. ","kind":"symbol","title":"direction","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/direction","interfaceLanguage":"swift"}},"summary":"The direction of the line segment as a normalized vector."},{"rawIndexableTextContent":"Returns a scaled copy of the mesh.  A scale factor to apply to the mesh.","kind":"symbol","title":"scaled(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/scaled(by:)-94kks","interfaceLanguage":"swift"}},"summary":"Returns a scaled copy of the mesh."},{"rawIndexableTextContent":"Define 3D objects by constructing meshes. Overview To create a 3D object, create a Mesh in Euclid. You can manually create an array of Polygon instances, but that’s pretty tedious. Euclid offers a number of helper methods to quickly create complex geometry. Primitive Geometry The simplest way to create a Mesh is to start with an existing primitive, such as a cube or sphere. The following primitive types are available in Euclid, and are defined as static constructor methods on Mesh: cube(center:size:faces:material:) - A cubic Mesh (or cuboid, if you specify different values for the width, height and\/or depth). sphere(radius:slices:stacks:poleDetail:faces:wrapMode:material:) - A spherical Mesh. cylinder(radius:height:slices:poleDetail:faces:wrapMode:material:) - A cylindrical Mesh. cone(radius:height:slices:poleDetail:addDetailAtBottomPole:faces:wrapMode:material:) -  A conical Mesh. All Mesh instances are made of flat polygons. Since true curves cannot be represented using straight edges, the sphere, cylinder and cone primitives are approximations. Control the quality of these approximations by using the slices and\/or stacks parameters to configure the level of detail. In addition to the 3D Mesh primitives listed, there are also 2D Path primitives. These are implemented as static constructor methods on the Path type instead of Mesh: line(_:color:) - A straight line. ellipse(width:height:segments:color:)- A closed, elliptical Path. circle(radius:segments:color:)  - A closed, circular Path. rectangle(width:height:color:) - A closed, rectangular Path. square(size:color:) - Same as rectangle(width:height:color:), but with equal width and height. polygon(radius:sides:color:) - A regular polygon shape (not to be confused with Euclid’s Polygon type). Builders Geometric primitives are all very well, but there is a limit to what you can create by combining spheres, cubes, etc. As an intermediate step between the extremes of using predefined primitives or individually positioning polygons, you can use builders. Builders create a Mesh from a (typically) 2D Path. The following builders are defined as static constructor functions on the Mesh type: fill(_:faces:material:) - This builder fills a single Path to create a pair of Polygons (front and back faces). stroke(_:width:detail:material:) - This builder strokes a single Path to create a strip or tube. A second variant (stroke(_:width:detail:material:)) of the function accepts an array of LineSegment, which is convenient for creating a wireframe geometry from the uniqueEdges of a Mesh. lathe(_:slices:poleDetail:addDetailForFlatPoles:faces:wrapMode:material:) - This builder takes a 2D Path and rotates it around the Y-axis to create a rotationally symmetrical Mesh. This is an easy way to create complex shapes like candlesticks, chess pieces, rocket ships, etc. extrude(_:along:faces:material:) - This builder fills a Path and extrudes it along its axis, or another path. This can turn a circular path into a tube, or a square into a cube etc. loft(_:faces:material:) - This builder is similar to extrude(_:along:faces:material:), but takes multiple Path instances and joins them. The sequence of Path instances do not need to be the same shape, but must all have the same number of points and subpaths. To work correctly, each Path must be pre-positioned in 3D space so they do not all lie on the same plane. Curves Builders are a powerful tool for creating interesting Mesh instances from one or more Path instances, but what about creating an interesting Path in the first place? Creating a polygonal Path by specifying points individually is straightforward, but creating curves that way is tedious. That’s where Beziers come in. Beziers allow you to specify complex curves using just a few control points. Euclid exposes this feature via the curve(_:detail:) constructor method. The curve(_:detail:) method takes an array of PathPoint and a detail argument. Normally, the isCurved property is used to calculate surface normals (for lighting purposes), but with the curve(_:detail:) method it affects the shape of the Path. A sequence of regular (non-curved) PathPoint create sharp corners in the Path as normal, but curved ones are treated as off-curve Bezier control points. The detail argument of the curve(_:detail:) method controls how many straight line segments are used to approximate the curve. The curve(_:detail:) method uses second-order (quadratic) Bezier curves, where each curve has two on-curve end points and a single off-curve control point. If two curved PathPoint are used in sequence then an on-curve point is interpolated between them. It is therefore  possible to create curves entirely out of curved (off-curve) control points. This approach to curve generation is based on the popular TrueType (TTF) font system, and provides a good balance between simplicity and flexibility. For more complex curves, on macOS and iOS you can create Euclid Path from a Core Graphics CGPath by using the CGPath.paths() extension method. CGPath supports cubic bezier curves as well as quadratic, and has handy constructors for rounded rectangles and other shapes. Constructive Solid Geometry (CSG) CSG is another powerful tool for creating intricate geometry. CSG allows you to perform boolean operations (logical AND, OR, etc) on solid shapes. The following CSG operations are defined as methods on the Mesh type: subtract(_:isCancelled:) - Subtracts the volume of one Mesh from another. xor(_:isCancelled:) - Produces a shape representing the non-overlapping parts of the input Meshes (this is useful for rendering text glyphs). union(_:isCancelled:) - Combines two intersecting Meshes, removing internal faces and leaving only the outer shell around both shapes (logical OR). intersection(_:isCancelled:) - Returns a single Mesh representing the common volume of two intersecting Meshes (logical AND). stencil(_:isCancelled:) - This effectively “paints” part of one Mesh with the material from another. All CSG operations require Meshes that are “watertight”, that is they have no holes in their surface. Using a CSG operation on a mesh that isn’t sealed may result in unexpected results. Text On macOS and iOS you can make use of Euclid’s Core Text integration to create 2D or 3D extruded text. The text(_:width:detail:) method produces an array of 2D Path that represent the contours of each glyph in an AttributedString. You can use these paths with either fill(_:faces:material:) or extrude(_:along:faces:material:) builder methods to create solid text. Alternatively, the init(text:width:depth:detail:material:) constructor directly produces an extruded 3D text model from a String or AttributedString. Each glyph in the input string maps to a single Path in the result, but these Paths may contain nested subpaths. Glyphs formed from multiple subpaths will be filled using the even-odd rule (equivalent to an xor between the individually filled or extruded subpaths).","kind":"article","title":"Constructing Meshes","headings":["Overview","Primitive Geometry","Builders","Curves","Constructive Solid Geometry (CSG)","Text"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/ConstructingMeshes","interfaceLanguage":"swift"}},"summary":"Define 3D objects by constructing meshes."},{"rawIndexableTextContent":"Creates a spherical mesh.  The radius of the sphere. The number of vertical slices that make up the sphere. The number of horizontal stacks that make up the sphere. Optionally add extra detail around poles to prevent texture warping The direction the polygon faces. The mode in which texture coordinates are wrapped around the mesh. The optional material for the mesh.","kind":"symbol","title":"sphere(radius:slices:stacks:poleDetail:faces:wrapMode:material:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/sphere(radius:slices:stacks:poleDetail:faces:wrapMode:material:)","interfaceLanguage":"swift"}},"summary":"Creates a spherical mesh."},{"rawIndexableTextContent":"Returns a Boolean value that indicates whether the specified point lies on the line.  Return Value true if the point lies on the line and false otherwise. The point to test.","kind":"symbol","title":"containsPoint(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/containsPoint(_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value that indicates whether the specified point lies on the line."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Decodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Display the 3D shapes you created with meshes. Overview After creating some 3D shapes, you probably want to actually display them. Most of the Euclid library is completely self-contained, with no dependencies on any particular rendering technology or framework. However, when running on iOS or macOS you can take advantage of Euclid’s built-in SceneKit integration. This is demonstrated in the Example app included with the project. SceneKit is Apple’s high-level 3D engine, which can use either OpenGL or Metal for rendering on supported devices. Euclid provides extensions for creating an SCNGeometry from a Mesh, as well as converting Euclid Vector and Rotation types to SCNVector and SCNQuaternion respectively. The SceneKit integration makes it easy to display Euclid geometry on-screen, and to integrate with ARKit, etc. You can also use SceneKit to export Euclid-generated Mesh in standard 3D model formats such as DAE, STL or OBJ. Materials Interesting geometry is one thing, but to really bring a shape to life it needs colors and textures. Every Polygon has a material property that can be used to apply any kind of material you like on a per-polygon basis. All primitives and builder methods accept a material parameter which will apply that material to every polygon in the resultant Mesh. When you later combine meshes using CSG operations, the original materials from the Mesh that contributed to each part of the resultant shape are preserved. Before a material can be used with SceneKit, you need to convert the Euclid material to an SCNMaterial. If the material is already an SCNMaterial instance it will be used directly. If the material is a Color, a UI\/NSColor or UI\/NSImage it will be converted to an SCNMaterial automatically. For all other material types, you will need to do this conversion yourself. You can convert materials using the optional closure argument for Euclid’s SCNGeometry constructor, which receives the Euclid material as an input and returns an SCNMaterial. When serializing Euclid geometry using Codable, only specific material types can be supported. Currently, material serialization works for Strings, Ints, Color and any class that conforms to NSCoding (which includes many UIKit, AppKit and SceneKit types, such as UI\/NSColor, UI\/NSImage and SCNMaterial). Colors Euclid currently has no support for setting colors on a per-vertex basis, but you can apply colors to a Mesh or Polygon using the material property. The material property is of type AnyHashable which basically means it can be anything you want. You can set the material to an instance of Euclid’s Color, or you can use a UIColor or NSColor instead if you prefer. This approach is demonstrated in the Example app included in the project. Textures Euclid automatically adds 2D texture coordinates to the vertices of a Mesh created using primitives or builder methods. There is limited control over how those coordinates are specified at the moment, but they allow for simple spherical and cylindrical texture wrapping. To apply a texture image to a Mesh, store a UIImage or NSImage as the material property and it will be converted to an SCNMaterial automatically. If you want to do something more complex, such as applying both a color and texture to the same Mesh, or maybe including a normal map or some other material properties, you could create a custom material type to store all the properties you care about, or even assign an SCNMaterial directly as the material for your Euclid geometry.","kind":"article","title":"Rendering Meshes","headings":["Overview","Materials","Colors","Textures"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/RenderingMeshes","interfaceLanguage":"swift"}},"summary":"Display the 3D shapes you created with meshes."},{"rawIndexableTextContent":"Creates a mesh from a SceneKit geometry, with optional material mapping.  The SCNGeometry to convert into a mesh. An optional closure to map SceneKit materials to Euclid materials. If omitted, the SCNMaterial will be directly used as the mesh material.","kind":"symbol","title":"init(_:materialLookup:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(_:materialLookup:)-7p5hd","interfaceLanguage":"swift"}},"summary":"Creates a mesh from a SceneKit geometry, with optional material mapping."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"init(scnGeometry:materialLookup:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(scnGeometry:materialLookup:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a new bounds inset by the specified distance.  Return Value The inset bounds. The distance to inset the bounds by. Use negative values to expand the bounds.","kind":"symbol","title":"inset(by:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/inset(by:)-49ykf","interfaceLanguage":"swift"}},"summary":"Returns a new bounds inset by the specified distance."},{"rawIndexableTextContent":"Creates a rotation around the X axis.  The angle to rotate by.","kind":"symbol","title":"pitch(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/pitch(_:)","interfaceLanguage":"swift"}},"summary":"Creates a rotation around the X axis."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Encodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/Encodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a mesh by extruding one path along another path.  The shape to extrude into a mesh. The path along which to extrude the shape. The direction of the generated polygon faces. The optional material for the mesh.","kind":"symbol","title":"extrude(_:along:faces:material:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/extrude(_:along:faces:material:)","interfaceLanguage":"swift"}},"summary":"Creates a mesh by extruding one path along another path."},{"rawIndexableTextContent":"A normalized direction vector pointing rightwards relative to the current rotaion. ","kind":"symbol","title":"right","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/right","interfaceLanguage":"swift"}},"summary":"A normalized direction vector pointing rightwards relative to the current rotaion."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"cyan","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/cyan","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Comparable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/Comparable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Decodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The plane upon which all path points lie. Will be nil for non-planar paths. ","kind":"symbol","title":"plane","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/plane","interfaceLanguage":"swift"}},"summary":"The plane upon which all path points lie. Will be nil for non-planar paths."},{"rawIndexableTextContent":"Merges any coplanar polygons that share one or more edges.  Return Value A new mesh containing the merged (possibly non-convex) polygons.","kind":"symbol","title":"detessellate()","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/detessellate()","interfaceLanguage":"swift"}},"summary":"Merges any coplanar polygons that share one or more edges."},{"rawIndexableTextContent":"Creates a rotation around the Y axis.  The angle to rotate by.","kind":"symbol","title":"yaw(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/yaw(_:)","interfaceLanguage":"swift"}},"summary":"Creates a rotation around the Y axis."},{"rawIndexableTextContent":"Inherited from Comparable...<(_:_:). ","kind":"symbol","title":"..<(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/.._(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable...<(_:_:)."},{"rawIndexableTextContent":"Texture is shrink-wrapped. ","kind":"symbol","title":"Mesh.WrapMode.shrink","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/WrapMode\/shrink","interfaceLanguage":"swift"}},"summary":"Texture is shrink-wrapped."},{"rawIndexableTextContent":"Returns a transformed copy of the vertex.  A transform to apply to the vertex.","kind":"symbol","title":"transformed(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/transformed(by:)","interfaceLanguage":"swift"}},"summary":"Returns a transformed copy of the vertex."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"yaw","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/yaw","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a quaternion representing a rotation around the X axis.  The angle to rotate by.","kind":"symbol","title":"pitch(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/pitch(_:)","interfaceLanguage":"swift"}},"summary":"Creates a quaternion representing a rotation around the X axis."},{"rawIndexableTextContent":"Returns a rotated copy of the path point.  A rotation to apply to the path point.","kind":"symbol","title":"rotated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/rotated(by:)-8zjfc","interfaceLanguage":"swift"}},"summary":"Returns a rotated copy of the path point."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"Creates a rotation from Euler angles applied in yaw\/pitch\/roll order.  The angle of rotation around the Y axis. This is applied first. The angle of rotation around the X axis. This is applied second. The angle of rotation around the Z axis. This is applied last.","kind":"symbol","title":"init(yaw:pitch:roll:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init(yaw:pitch:roll:)","interfaceLanguage":"swift"}},"summary":"Creates a rotation from Euler angles applied in yaw\/pitch\/roll order."},{"rawIndexableTextContent":"Creates a new mesh by decoding from the given decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new mesh by decoding from the given decoder."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Comparable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/Comparable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a rotated copy of the bounds.  A rotation to apply to the bounds. Discussion Because a bounds must be axially-aligned, rotating by an angle that is not a multiple of 90 degrees will result in the bounds being increased in size. Rotating it back again will not reduce the size, so this is a potentially irreversible operation. In general, after rotating a shape it is better to recalculate the bounds rather than trying to rotate the previous bounds.","kind":"symbol","title":"rotated(by:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/rotated(by:)-4qxyv","interfaceLanguage":"swift"}},"summary":"Returns a rotated copy of the bounds."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a rotation from a SceneKit quaternion.  The SCNQuaternion to convert.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init(_:)-68leo","interfaceLanguage":"swift"}},"summary":"Creates a rotation from a SceneKit quaternion."},{"rawIndexableTextContent":"Creates a quaternion from a rotation matrix.  A rotation matrix.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/init(_:)-7xa5o","interfaceLanguage":"swift"}},"summary":"Creates a quaternion from a rotation matrix."},{"rawIndexableTextContent":"The minimum coordinate of the bounds. ","kind":"symbol","title":"min","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/min","interfaceLanguage":"swift"}},"summary":"The minimum coordinate of the bounds."},{"rawIndexableTextContent":"The quaternion component values. ","kind":"symbol","title":"y","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/y","interfaceLanguage":"swift"}},"summary":"The quaternion component values."},{"rawIndexableTextContent":"A finite line segment in 3D space. ","kind":"symbol","title":"LineSegment","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment","interfaceLanguage":"swift"}},"summary":"A finite line segment in 3D space."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Efficiently gets the difference between multiple meshes.  Return Value a new mesh representing the difference between the meshes. Discussion Parameters meshes: An array of meshes. All but the first will be subtracted from the first. isCancelled: Callback used to cancel the operation.","kind":"symbol","title":"difference(_:isCancelled:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/difference(_:isCancelled:)","interfaceLanguage":"swift"}},"summary":"Efficiently gets the difference between multiple meshes."},{"rawIndexableTextContent":"The angle in radians. ","kind":"symbol","title":"radians","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/radians","interfaceLanguage":"swift"}},"summary":"The angle in radians."},{"rawIndexableTextContent":"Angle representing a quarter rotation. ","kind":"symbol","title":"halfPi","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/halfPi","interfaceLanguage":"swift"}},"summary":"Angle representing a quarter rotation."},{"rawIndexableTextContent":"Inherited from Comparable....(_:_:). ","kind":"symbol","title":"...(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/...(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable....(_:_:)."},{"rawIndexableTextContent":"Creates a new mesh that is the combination of the polygons from all the specified meshes.  Return Value A new mesh that includes all polygons from all meshes. The meshes to merge. Discussion No attempt is made to deduplicate or join meshes. Polygons are neither split nor removed.","kind":"symbol","title":"merge(_:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/merge(_:)-swift.type.method","interfaceLanguage":"swift"}},"summary":"Creates a new mesh that is the combination of the polygons from all the specified meshes."},{"rawIndexableTextContent":"Angle representing a full rotation. ","kind":"symbol","title":"twoPi","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/twoPi","interfaceLanguage":"swift"}},"summary":"Angle representing a full rotation."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"orange","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/orange","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a cylindrical mesh.  The radius of the cylinder. The height of the cylinder. The number of vertical slices that make up the cylinder. Optionally add extra detail around poles to prevent texture warping. The direction of the generated polygon faces. The mode in which texture coordinates are wrapped around the mesh. The optional material for the mesh.","kind":"symbol","title":"cylinder(radius:height:slices:poleDetail:faces:wrapMode:material:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/cylinder(radius:height:slices:poleDetail:faces:wrapMode:material:)","interfaceLanguage":"swift"}},"summary":"Creates a cylindrical mesh."},{"rawIndexableTextContent":"Encodes this angle into the given encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this angle into the given encoder."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":" Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Inherited from Comparable.>(_:_:). ","kind":"symbol","title":">(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/_(_:_:)-9688a","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable.>(_:_:)."},{"rawIndexableTextContent":"Creates a line from an origin and direction.  An arbitrary point on the line selected as the origin. The direction of the line, emanating from the origin.","kind":"symbol","title":"init(origin:direction:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/init(origin:direction:)","interfaceLanguage":"swift"}},"summary":"Creates a line from an origin and direction."},{"rawIndexableTextContent":"Inherited from Comparable.<=(_:_:). ","kind":"symbol","title":"<=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/_=(_:_:)-375to","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable.<=(_:_:)."},{"rawIndexableTextContent":"Encodes this path point into the given encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this path point into the given encoder."},{"rawIndexableTextContent":"Removes hairline cracks by inserting additional vertices without altering the shape.  Return Value A new mesh with new vertices inserted if needed. Discussion This method is not always successful. Check isWatertight after to verify.","kind":"symbol","title":"makeWatertight()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/makeWatertight()","interfaceLanguage":"swift"}},"summary":"Removes hairline cracks by inserting additional vertices without altering the shape."},{"rawIndexableTextContent":"Hashes the essential components of the vector at reduced precision.  The hasher to use when combining the components of this instance.","kind":"symbol","title":"hash(into:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/hash(into:)","interfaceLanguage":"swift"}},"summary":"Hashes the essential components of the vector at reduced precision."},{"rawIndexableTextContent":"Inherited from Comparable...<(_:). ","kind":"symbol","title":"..<(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/.._(_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable...<(_:)."},{"rawIndexableTextContent":"Splits all concave polygons in the mesh into two or more convex polygons.  Return Value A new mesh containing the convex polygons.","kind":"symbol","title":"tessellate()","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/tessellate()","interfaceLanguage":"swift"}},"summary":"Splits all concave polygons in the mesh into two or more convex polygons."},{"rawIndexableTextContent":"Linearly interpolate between two colors.  Return Value The interpolated color. The color to interpolate towards. The normalized extent of interpolation, from 0 to 1.","kind":"symbol","title":"lerp(_:_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/lerp(_:_:)","interfaceLanguage":"swift"}},"summary":"Linearly interpolate between two colors."},{"rawIndexableTextContent":"An array of the subpaths that make up the path.  Discussion For paths without nested subpaths, this will return an array containing only self.","kind":"symbol","title":"subpaths","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/subpaths","interfaceLanguage":"swift"}},"summary":"An array of the subpaths that make up the path."},{"rawIndexableTextContent":"Creates a conical mesh.  The radius of the cone. The height of the cone. The number of vertical slices that make up the cone. Optionally add extra detail around top pole to prevent texture warping. Whether detail should be added at bottom pil. The direction of the generated polygon faces. The mode in which texture coordinates are wrapped around the mesh. The optional material for the mesh. Discussion The default nil value for poleDetail will derive value automatically. Use zero instead if you wish to add no extra detail at the poles.","kind":"symbol","title":"cone(radius:height:slices:poleDetail:addDetailAtBottomPole:faces:wrapMode:material:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/cone(radius:height:slices:poleDetail:addDetailAtBottomPole:faces:wrapMode:material:)","interfaceLanguage":"swift"}},"summary":"Creates a conical mesh."},{"rawIndexableTextContent":"Creates a quaternion representing a rotation around the Y axis.  The angle to rotate by.","kind":"symbol","title":"yaw(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/yaw(_:)","interfaceLanguage":"swift"}},"summary":"Creates a quaternion representing a rotation around the Y axis."},{"rawIndexableTextContent":"Inherited from Comparable....(_:). ","kind":"symbol","title":"...(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/...(_:)-4yucl","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable....(_:)."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"Creates a copy of the polygon with the specified material.  The replacement material, or nil to remove the material.","kind":"symbol","title":"with(material:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/with(material:)","interfaceLanguage":"swift"}},"summary":"Creates a copy of the polygon with the specified material."},{"rawIndexableTextContent":"Returns whether the leftmost line segment has the lower value. This provides a stable order when sorting collections of line segments. ","kind":"symbol","title":"<(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/_(_:_:)-2si4j","interfaceLanguage":"swift"}},"summary":"Returns whether the leftmost line segment has the lower value. This provides a stable order when sorting collections of line segments."},{"rawIndexableTextContent":"Returns a rotated copy of the polygon.  A quaternion to apply to the polygon.","kind":"symbol","title":"rotated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/rotated(by:)-3e445","interfaceLanguage":"swift"}},"summary":"Returns a rotated copy of the polygon."},{"rawIndexableTextContent":"A struct that represents an orientation or rotation in 3D space.  Overview Internally, a rotation is stored as a 3x3 matrix, but that’s an implementation detail that may change in future. A rotation can be converted to and from an axis vector and angle, or a set of 3 Euler angles (pitch, yaw and roll).","kind":"symbol","title":"Rotation","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation","interfaceLanguage":"swift"}},"summary":"A struct that represents an orientation or rotation in 3D space."},{"rawIndexableTextContent":"Returns the perpendicular distance of the line from a specified point.  Return Value The absolute perpendicular distance between the point and line. The point to compare.","kind":"symbol","title":"distance(from:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/distance(from:)-4o41","interfaceLanguage":"swift"}},"summary":"Returns the perpendicular distance of the line from a specified point."},{"rawIndexableTextContent":"Returns a new mesh created by subtracting the volume of the mesh parameter from the receiver.  Return Value a new mesh representing the result of the subtraction. Discussion  Parameters mesh: The mesh to subtract from this one. isCancelled: Callback used to cancel the operation.","kind":"symbol","title":"subtract(_:isCancelled:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/subtract(_:isCancelled:)","interfaceLanguage":"swift"}},"summary":"Returns a new mesh created by subtracting the volume of the mesh parameter from the receiver."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"Returns a vector with its components multiplied by the specified value. ","kind":"symbol","title":"*(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/*(_:_:)-5mcy5","interfaceLanguage":"swift"}},"summary":"Returns a vector with its components multiplied by the specified value."},{"rawIndexableTextContent":"Computes the trigonometric cosine of an angle.  Return Value The trigonometric cosine of the angle. The angle to calculate the cosine for.","kind":"symbol","title":"cos(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/cos(_:)","interfaceLanguage":"swift"}},"summary":"Computes the trigonometric cosine of an angle."},{"rawIndexableTextContent":"The quaternion component values. ","kind":"symbol","title":"z","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/z","interfaceLanguage":"swift"}},"summary":"The quaternion component values."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Decodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":" Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"gray","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/gray","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a quaternion with its components divided by the specified value. ","kind":"symbol","title":"\/(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/\/(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns a quaternion with its components divided by the specified value."},{"rawIndexableTextContent":"Returns the product of two quaternions (i.e. the effect of rotating the left by the right). ","kind":"symbol","title":"*(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/*(_:_:)-305tn","interfaceLanguage":"swift"}},"summary":"Returns the product of two quaternions (i.e. the effect of rotating the left by the right)."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/WrapMode\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The points that make up the corners of the bounds. ","kind":"symbol","title":"corners","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/corners","interfaceLanguage":"swift"}},"summary":"The points that make up the corners of the bounds."},{"rawIndexableTextContent":"Creates a bounds with min and max coordinates.  The minimum coordinate value. The maximum coordinate value. Discussion If the value for max is less than the value for min, the bounds is considered to be empty.","kind":"symbol","title":"init(min:max:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/init(min:max:)","interfaceLanguage":"swift"}},"summary":"Creates a bounds with min and max coordinates."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"start","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/start","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"The angle of rotation around the X-axis. ","kind":"symbol","title":"pitch","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/pitch","interfaceLanguage":"swift"}},"summary":"The angle of rotation around the X-axis."},{"rawIndexableTextContent":"Returns a rotated copy of the mesh.  A quaternion to apply to the mesh.","kind":"symbol","title":"rotated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/rotated(by:)-266e9","interfaceLanguage":"swift"}},"summary":"Returns a rotated copy of the mesh."},{"rawIndexableTextContent":"Creates a new vector by decoding from the given decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new vector by decoding from the given decoder."},{"rawIndexableTextContent":"Create a linear path from a start and end point.  The starting point of the line. The ending point of the line. An optional Color to apply to the path’s points.","kind":"symbol","title":"line(_:_:color:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/line(_:_:color:)","interfaceLanguage":"swift"}},"summary":"Create a linear path from a start and end point."},{"rawIndexableTextContent":"Creates a quaternion representing a rotation around the Z axis.  The angle to rotate by.","kind":"symbol","title":"roll(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/roll(_:)","interfaceLanguage":"swift"}},"summary":"Creates a quaternion representing a rotation around the Z axis."},{"rawIndexableTextContent":"A combined rotation, position, and scale that can be applied to a 3D object.  Overview Working with intermediate transform objects instead of directly updating the vertex positions of a mesh is more efficient and avoids a buildup of rounding errors.","kind":"symbol","title":"Transform","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform","interfaceLanguage":"swift"}},"summary":"A combined rotation, position, and scale that can be applied to a 3D object."},{"rawIndexableTextContent":"Inherited from Comparable.>(_:_:). ","kind":"symbol","title":">(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/_(_:_:)-7i9lp","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable.>(_:_:)."},{"rawIndexableTextContent":"Creates a Path from a CGPath. The returned path may contain nested subpaths.  The CoreGraphics path to convert. The number of line segments used to approximate cubic or quadratic bezier curves. An optional Color to apply to the path vertices.","kind":"symbol","title":"init(cgPath:detail:color:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/init(cgPath:detail:color:)","interfaceLanguage":"swift"}},"summary":"Creates a Path from a CGPath. The returned path may contain nested subpaths."},{"rawIndexableTextContent":"Inherited from Comparable...<(_:). ","kind":"symbol","title":"..<(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/.._(_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable...<(_:)."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/WrapMode\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"A point along a path.  Overview A path point can represent a sharp corner or a curve, and has a position, and optionally a texcoord and\/or color, but no normal. The isCurved property  indicates if the point is sharp or smooth, allowing the normal to be computed automatically.","kind":"symbol","title":"PathPoint","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint","interfaceLanguage":"swift"}},"summary":"A point along a path."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Comparable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/Comparable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a Boolean value that indicates whether two line segements intersect.  Return Value true if the line segments intersect and false otherwise. The line segment to compare with.","kind":"symbol","title":"intersects(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/intersects(_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value that indicates whether two line segements intersect."},{"rawIndexableTextContent":"Creates a color from a CoreGraphics CGColor.  The CoreGraphics color instance.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/init(_:)-25eby","interfaceLanguage":"swift"}},"summary":"Creates a color from a CoreGraphics CGColor."},{"rawIndexableTextContent":"Creates a new bounds that contains both the specified bounds and this one.  Return Value The combined bounds. The other bounds to be included.","kind":"symbol","title":"union(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/union(_:)","interfaceLanguage":"swift"}},"summary":"Creates a new bounds that contains both the specified bounds and this one."},{"rawIndexableTextContent":"A 3D surface made of polygons.  Overview A mesh surface can be convex or concave, and can have zero volume (for example, a flat shape such as a square) but shouldn’t contain holes or exposed back-faces. The result of CSG operations on meshes that have holes or exposed back-faces is undefined.","kind":"symbol","title":"Mesh","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh","interfaceLanguage":"swift"}},"summary":"A 3D surface made of polygons."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Generate back faces. ","kind":"symbol","title":"Mesh.Faces.back","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Faces\/back","interfaceLanguage":"swift"}},"summary":"Generate back faces."},{"rawIndexableTextContent":"The color for the vertex. This will be multiplied by the material color, so set it to white if you do not require per-vertex colors. ","kind":"symbol","title":"color","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/color","interfaceLanguage":"swift"}},"summary":"The color for the vertex. This will be multiplied by the material color, so set it to white if you do not require per-vertex colors."},{"rawIndexableTextContent":"Splits all polygons in the mesh into triangles.  Return Value A new mesh containing the triangles.","kind":"symbol","title":"triangulate()","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/triangulate()","interfaceLanguage":"swift"}},"summary":"Splits all polygons in the mesh into triangles."},{"rawIndexableTextContent":"Divides the angle by a numeric denominator. ","kind":"symbol","title":"\/=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/\/=(_:_:)","interfaceLanguage":"swift"}},"summary":"Divides the angle by a numeric denominator."},{"rawIndexableTextContent":"Returns the perpendicular distance from another line to this one.  Return Value The perpendicular distance from the other line. The line to compare.","kind":"symbol","title":"distance(from:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/distance(from:)-77i61","interfaceLanguage":"swift"}},"summary":"Returns the perpendicular distance from another line to this one."},{"rawIndexableTextContent":"Creates an angle representing the trigonometric arc sine of the value you provide.  The sine value to use to calculate the angle.","kind":"symbol","title":"asin(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/asin(_:)","interfaceLanguage":"swift"}},"summary":"Creates an angle representing the trigonometric arc sine of the value you provide."},{"rawIndexableTextContent":"Inherited from Comparable....(_:). ","kind":"symbol","title":"...(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/...(_:)-7xdsm","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable....(_:)."},{"rawIndexableTextContent":"The perpendicular distance from the world origin to the plane. ","kind":"symbol","title":"w","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/w","interfaceLanguage":"swift"}},"summary":"The perpendicular distance from the world origin to the plane."},{"rawIndexableTextContent":"A Boolean value that indicates whether the vector has a length of 1. ","kind":"symbol","title":"isNormalized","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/isNormalized","interfaceLanguage":"swift"}},"summary":"A Boolean value that indicates whether the vector has a length of 1."},{"rawIndexableTextContent":"The alpha component of the color. ","kind":"symbol","title":"a","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/a","interfaceLanguage":"swift"}},"summary":"The alpha component of the color."},{"rawIndexableTextContent":"Efficiently computes the intersection of multiple meshes.  Return Value a new mesh representing the intersection of the meshes. Discussion Parameters meshes: An array of meshes to intersect. isCancelled: Callback used to cancel the operation.","kind":"symbol","title":"intersection(_:isCancelled:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/intersection(_:isCancelled:)","interfaceLanguage":"swift"}},"summary":"Efficiently computes the intersection of multiple meshes."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Decodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a new bounds representing the intersection between the specified bounds and this one.  Return Value The combined bounds, which may be empty if the bounds don’t intersect. The bounds with which to intersect.","kind":"symbol","title":"intersection(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/intersection(_:)","interfaceLanguage":"swift"}},"summary":"Creates a new bounds representing the intersection between the specified bounds and this one."},{"rawIndexableTextContent":"The angle of rotation around the Z-axis. ","kind":"symbol","title":"roll","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/roll","interfaceLanguage":"swift"}},"summary":"The angle of rotation around the Z-axis."},{"rawIndexableTextContent":"The angle in degrees. ","kind":"symbol","title":"degrees","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/degrees","interfaceLanguage":"swift"}},"summary":"The angle in degrees."},{"rawIndexableTextContent":"Creates a color from an NSColor.  The NSColor to convert.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/init(_:)-7d8un","interfaceLanguage":"swift"}},"summary":"Creates a color from an NSColor."},{"rawIndexableTextContent":"The polygons in the mesh, grouped by material. ","kind":"symbol","title":"polygonsByMaterial","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/polygonsByMaterial","interfaceLanguage":"swift"}},"summary":"The polygons in the mesh, grouped by material."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"pitch","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/pitch","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Computes the point of intersection between a line and a place.  Return Value The point of intersection between the line and plane, or nil if they are parallel. The Line to compare with.","kind":"symbol","title":"intersection(with:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/intersection(with:)-79olr","interfaceLanguage":"swift"}},"summary":"Computes the point of intersection between a line and a place."},{"rawIndexableTextContent":"The position  of the path point. ","kind":"symbol","title":"position","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/position","interfaceLanguage":"swift"}},"summary":"The position  of the path point."},{"rawIndexableTextContent":"Creates a new path point by decoding from the given decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new path point by decoding from the given decoder."},{"rawIndexableTextContent":"Inherited from Comparable...<(_:). ","kind":"symbol","title":"..<(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/.._(_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable...<(_:)."},{"rawIndexableTextContent":"An array of vertices suitable for constructing a set of edge polygons for the path.  Return Value The edge vertices, or an empty array if path has subpaths. The wrap mode to use for generating texture coordinates.","kind":"symbol","title":"edgeVertices(for:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/edgeVertices(for:)","interfaceLanguage":"swift"}},"summary":"An array of vertices suitable for constructing a set of edge polygons for the path."},{"rawIndexableTextContent":"Inherited from Comparable....(_:_:). ","kind":"symbol","title":"...(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/...(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable....(_:_:)."},{"rawIndexableTextContent":"The zero quaternion. ","kind":"symbol","title":"zero","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/zero","interfaceLanguage":"swift"}},"summary":"The zero quaternion."},{"rawIndexableTextContent":"Subtracts the quaternion rotation on the right from the one on the left. ","kind":"symbol","title":"-=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/-=(_:_:)","interfaceLanguage":"swift"}},"summary":"Subtracts the quaternion rotation on the right from the one on the left."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"Creates a composite path from an array of subpaths.  An array of paths.","kind":"symbol","title":"init(subpaths:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/init(subpaths:)","interfaceLanguage":"swift"}},"summary":"Creates a composite path from an array of subpaths."},{"rawIndexableTextContent":"Adds the angle on the right to the one on the left. ","kind":"symbol","title":"+=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/+=(_:_:)","interfaceLanguage":"swift"}},"summary":"Adds the angle on the right to the one on the left."},{"rawIndexableTextContent":"The default wrap behavior. Context-dependent. ","kind":"symbol","title":"Mesh.WrapMode.default","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/WrapMode\/default","interfaceLanguage":"swift"}},"summary":"The default wrap behavior. Context-dependent."},{"rawIndexableTextContent":"Returns a scaled copy of the mesh.  A scale vector to apply to the mesh.","kind":"symbol","title":"scaled(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/scaled(by:)-90bab","interfaceLanguage":"swift"}},"summary":"Returns a scaled copy of the mesh."},{"rawIndexableTextContent":"An empty bounds. ","kind":"symbol","title":"empty","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/empty","interfaceLanguage":"swift"}},"summary":"An empty bounds."},{"rawIndexableTextContent":"The angle of rotation around the Y-axis. ","kind":"symbol","title":"yaw","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/yaw","interfaceLanguage":"swift"}},"summary":"The angle of rotation around the Y-axis."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"end","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/end","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a vector with its components divided by the specified value. ","kind":"symbol","title":"\/(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/\/(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns a vector with its components divided by the specified value."},{"rawIndexableTextContent":"The magnitude of the vector. ","kind":"symbol","title":"length","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/length","interfaceLanguage":"swift"}},"summary":"The magnitude of the vector."},{"rawIndexableTextContent":"Returns a transformed copy of the path.  A transform to apply to the path.","kind":"symbol","title":"transformed(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/transformed(by:)","interfaceLanguage":"swift"}},"summary":"Returns a transformed copy of the path."},{"rawIndexableTextContent":"Creates a new line from the specified line segment.  A segment somewhere on the line.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/init(_:)","interfaceLanguage":"swift"}},"summary":"Creates a new line from the specified line segment."},{"rawIndexableTextContent":"Creates a rotation from an axis and angle.  A vector defining the axis of rotation. The angle of rotation around the axis.","kind":"symbol","title":"init(axis:angle:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init(axis:angle:)","interfaceLanguage":"swift"}},"summary":"Creates a rotation from an axis and angle."},{"rawIndexableTextContent":"Creates a new plane by decoding from the given decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new plane by decoding from the given decoder."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"magenta","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/magenta","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a rotation from a quaternion.  A quaternion defining a rotation.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init(_:)-5w6mn","interfaceLanguage":"swift"}},"summary":"Creates a rotation from a quaternion."},{"rawIndexableTextContent":"Creates a closed circular path.  The distance from the center of the circle to each point used to approximate its shape. The number of line segments used to approximate the circle. An optional Color to apply to the path’s points. Discussion Because the circle is approximated using line segments, its radius is not uniform. The radius specified is the outer radius, i.e. the radius at the corners of the polygon.","kind":"symbol","title":"circle(radius:segments:color:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/circle(radius:segments:color:)","interfaceLanguage":"swift"}},"summary":"Creates a closed circular path."},{"rawIndexableTextContent":"A zero-length vector. ","kind":"symbol","title":"zero","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/zero","interfaceLanguage":"swift"}},"summary":"A zero-length vector."},{"rawIndexableTextContent":"Creates a transform from the current position, scale and orientation of a SceneKit node.  The SCNNode from which to determine the transform.","kind":"symbol","title":"transform(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/transform(from:)","interfaceLanguage":"swift"}},"summary":"Creates a transform from the current position, scale and orientation of a SceneKit node."},{"rawIndexableTextContent":"An orientation or rotation in 3D space.  Overview A quaternion can be created from a from a Rotation matrix, or directly from an axis vector and angle, or a from a set of 3 Euler angles (pitch, yaw and roll). In addition to being more compact than a 3x3 rotation matrix, quaternions also avoid a problem known as gymbal lock.","kind":"symbol","title":"Quaternion","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion","interfaceLanguage":"swift"}},"summary":"An orientation or rotation in 3D space."},{"rawIndexableTextContent":"Inherited from Comparable.>=(_:_:). ","kind":"symbol","title":">=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/_=(_:_:)-9rm6o","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable.>=(_:_:)."},{"rawIndexableTextContent":"Encodes this color into the given encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this color into the given encoder."},{"rawIndexableTextContent":"The Z component of the vector. ","kind":"symbol","title":"z","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/z","interfaceLanguage":"swift"}},"summary":"The Z component of the vector."},{"rawIndexableTextContent":"Computes the trigonometric tangent of an angle.  Return Value The trigonometric tangent of the angle. The angle to calculate the tangent for.","kind":"symbol","title":"tan(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/tan(_:)","interfaceLanguage":"swift"}},"summary":"Computes the trigonometric tangent of an angle."},{"rawIndexableTextContent":"Creates a new color by decoding from the given decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new color by decoding from the given decoder."},{"rawIndexableTextContent":"Creates a path from a polygon.  A Polygon to convert to a path.","kind":"symbol","title":"init(polygon:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/init(polygon:)","interfaceLanguage":"swift"}},"summary":"Creates a path from a polygon."},{"rawIndexableTextContent":"A choice of how texture coordinates should be generated. ","kind":"symbol","title":"Mesh.WrapMode","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/WrapMode","interfaceLanguage":"swift"}},"summary":"A choice of how texture coordinates should be generated."},{"rawIndexableTextContent":"Creates a new mesh from an array of polygons.  The polygons making up the mesh.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(_:)","interfaceLanguage":"swift"}},"summary":"Creates a new mesh from an array of polygons."},{"rawIndexableTextContent":"Creates a bounds from two SceneKit vectors.  A tuple of two SCNVector3 that represent opposite corners of the bounding box volume.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/init(_:)","interfaceLanguage":"swift"}},"summary":"Creates a bounds from two SceneKit vectors."},{"rawIndexableTextContent":"Returns a scaled copy of the bounds.  A scale vector to apply to the bounds.","kind":"symbol","title":"scaled(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/scaled(by:)-5dvvh","interfaceLanguage":"swift"}},"summary":"Returns a scaled copy of the bounds."},{"rawIndexableTextContent":"Inherited from Comparable.>(_:_:). ","kind":"symbol","title":">(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/_(_:_:)-3fd8h","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable.>(_:_:)."},{"rawIndexableTextContent":"Returns a translated copy of the mesh.  An offset vector to apply to the mesh.","kind":"symbol","title":"translated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/translated(by:)","interfaceLanguage":"swift"}},"summary":"Returns a translated copy of the mesh."},{"rawIndexableTextContent":"Efficiently performs a stencil with multiple meshes.  Return Value a new mesh representing the result of stencilling. Discussion Parameters meshes: An array of meshes. All but the first will be stencilled onto the first. isCancelled: Callback used to cancel the operation.","kind":"symbol","title":"stencil(_:isCancelled:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/stencil(_:isCancelled:)-swift.type.method","interfaceLanguage":"swift"}},"summary":"Efficiently performs a stencil with multiple meshes."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"Returns a Boolean value that indicates if the specified point is within the bounds.  Return Value true if the point lies inside the bounds, and false otherwise. The point to compare.","kind":"symbol","title":"containsPoint(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/containsPoint(_:)","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value that indicates if the specified point is within the bounds."},{"rawIndexableTextContent":"The size or scale component of the transform. ","kind":"symbol","title":"scale","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/scale","interfaceLanguage":"swift"}},"summary":"The size or scale component of the transform."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"origin","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/origin","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"Creates a color from a luminance value and optional alpha component.  The luminance value, from 0 to 1. The alpha component. Defaults to 1 (fully opaque)","kind":"symbol","title":"init(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/init(_:_:)","interfaceLanguage":"swift"}},"summary":"Creates a color from a luminance value and optional alpha component."},{"rawIndexableTextContent":"A color in RGBA format.  Overview Color can be used as a material or as a color.","kind":"symbol","title":"Color","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color","interfaceLanguage":"swift"}},"summary":"A color in RGBA format."},{"rawIndexableTextContent":"Returns the distance between the vector (representing a position in space) from the specified plane.  Return Value The distance between the point and the plane. The value is positive if the point lies in front of the plane, and negative if behind. The plane to compare with.","kind":"symbol","title":"distance(from:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/distance(from:)-5p7ko","interfaceLanguage":"swift"}},"summary":"Returns the distance between the vector (representing a position in space) from the specified plane."},{"rawIndexableTextContent":"Creates a mesh by extruding a path along its face normal.  The path to extrude in order to create the mesh. The depth of the extrusion. The direction of the generated polygon faces. The optional material for the mesh.","kind":"symbol","title":"extrude(_:depth:faces:material:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/extrude(_:depth:faces:material:)","interfaceLanguage":"swift"}},"summary":"Creates a mesh by extruding a path along its face normal."},{"rawIndexableTextContent":"Inherited from Comparable....(_:_:). ","kind":"symbol","title":"...(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/...(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable....(_:_:)."},{"rawIndexableTextContent":"Creates a closed rectangular path.  The width of the rectangle. The height of the rectangle. An optional Color to apply to the path’s points.","kind":"symbol","title":"rectangle(width:height:color:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/rectangle(width:height:color:)","interfaceLanguage":"swift"}},"summary":"Creates a closed rectangular path."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Reduces the bounds to contain just the intersection of itself and the specified bounds.  The bounds with which to intersect.","kind":"symbol","title":"formIntersection(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/formIntersection(_:)","interfaceLanguage":"swift"}},"summary":"Reduces the bounds to contain just the intersection of itself and the specified bounds."},{"rawIndexableTextContent":"Returns a rotated copy of the vector.  A rotation to apply to the vector.","kind":"symbol","title":"rotated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/rotated(by:)-6owvr","interfaceLanguage":"swift"}},"summary":"Returns a rotated copy of the vector."},{"rawIndexableTextContent":"Encodes this polygon into the given encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this polygon into the given encoder."},{"rawIndexableTextContent":"Returns a rotated copy of the path point.  A quaternion to apply to the path point.","kind":"symbol","title":"rotated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/rotated(by:)-9koyv","interfaceLanguage":"swift"}},"summary":"Returns a rotated copy of the path point."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"Computes the trigonometric sine of an angle.  Return Value The trigonometric sine of the angle. The angle to calculate the sine for.","kind":"symbol","title":"sin(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/sin(_:)","interfaceLanguage":"swift"}},"summary":"Computes the trigonometric sine of an angle."},{"rawIndexableTextContent":"Creates an Angle from a degrees value.  The angle in degrees.","kind":"symbol","title":"init(degrees:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/init(degrees:)","interfaceLanguage":"swift"}},"summary":"Creates an Angle from a degrees value."},{"rawIndexableTextContent":"Encodes this vertex into the given encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this vertex into the given encoder."},{"rawIndexableTextContent":"Replaces an existing material with the specified new one.  Return Value a new Mesh with the material replaced. The Mesh.Material to be replaced. The Mesh.Material to use instead.","kind":"symbol","title":"replacing(_:with:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/replacing(_:with:)","interfaceLanguage":"swift"}},"summary":"Replaces an existing material with the specified new one."},{"rawIndexableTextContent":"Returns the normalized quaternion.  Return Value The normalized quaternion (with a length of 1) or  zero if the length is 0.","kind":"symbol","title":"normalized()","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/normalized()","interfaceLanguage":"swift"}},"summary":"Returns the normalized quaternion."},{"rawIndexableTextContent":"Creates a quaternion from an axis and angle.  A vector defining the axis of rotation. The angle of rotation around the axis.","kind":"symbol","title":"init(axis:angle:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/init(axis:angle:)","interfaceLanguage":"swift"}},"summary":"Creates a quaternion from an axis and angle."},{"rawIndexableTextContent":"Returns the flip-side of the plane. ","kind":"symbol","title":"inverted()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/inverted()","interfaceLanguage":"swift"}},"summary":"Returns the flip-side of the plane."},{"rawIndexableTextContent":"A polygon in 3D space.  Overview A polygon must be composed of three or more vertices, and those vertices must all lie on the same plane. The edges of a polygon can be either convex or concave, but not self-intersecting.","kind":"symbol","title":"Polygon","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon","interfaceLanguage":"swift"}},"summary":"A polygon in 3D space."},{"rawIndexableTextContent":"Efficiently XORs multiple meshes.  Return Value a new mesh representing the XOR of the meshes. Discussion Parameters meshes: An array of meshes. All but the first will be subtracted from the first. isCancelled: Callback used to cancel the operation","kind":"symbol","title":"xor(_:isCancelled:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/xor(_:isCancelled:)-swift.type.method","interfaceLanguage":"swift"}},"summary":"Efficiently XORs multiple meshes."},{"rawIndexableTextContent":"Returns a new mesh reprenting only the volume exclusively occupied by one shape or the other, but not both.  Return Value a new mesh representing the XOR of the meshes. Discussion  Parameters mesh: The mesh to be XORed with this one. isCancelled: Callback used to cancel the operation.","kind":"symbol","title":"xor(_:isCancelled:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/xor(_:isCancelled:)-swift.method","interfaceLanguage":"swift"}},"summary":"Returns a new mesh reprenting only the volume exclusively occupied by one shape or the other, but not both."},{"rawIndexableTextContent":"The rotation or orientation component of the transform. ","kind":"symbol","title":"rotation","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/rotation","interfaceLanguage":"swift"}},"summary":"The rotation or orientation component of the transform."},{"rawIndexableTextContent":"Encodes this transform into the given encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this transform into the given encoder."},{"rawIndexableTextContent":"Returns a translated copy of the path point.  An offset vector to apply to the path point.","kind":"symbol","title":"translated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/translated(by:)","interfaceLanguage":"swift"}},"summary":"Returns a translated copy of the path point."},{"rawIndexableTextContent":"Returns the nearest point on the specified plane to the vector (representing a position in space).  Return Value The nearest point in 3D space that lies on the plane. The plane to project onto.","kind":"symbol","title":"project(onto:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/project(onto:)-817o2","interfaceLanguage":"swift"}},"summary":"Returns the nearest point on the specified plane to the vector (representing a position in space)."},{"rawIndexableTextContent":"Computes the dot-product of this quaternion and another.  Return Value The dot product of the two quaternions. The quaternion with which to compute the dot product.","kind":"symbol","title":"dot(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/dot(_:)","interfaceLanguage":"swift"}},"summary":"Computes the dot-product of this quaternion and another."},{"rawIndexableTextContent":"The bounds of the mesh. ","kind":"symbol","title":"bounds","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/bounds","interfaceLanguage":"swift"}},"summary":"The bounds of the mesh."},{"rawIndexableTextContent":"Creates a single polygon from a path.  Discussion Parameters shape: The Path to convert to a polygon. material: An optional Polygon.Material to apply to the polygon. Path may be convex or concave, but must be closed, planar and non-degenerate, and must not include subpaths. For a non-planar path, or one with subpaths, use facePolygons(material:).","kind":"symbol","title":"init(shape:material:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/init(shape:material:)","interfaceLanguage":"swift"}},"summary":"Creates a single polygon from a path."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"A path made up of a sequence of straight line segments between points.  Overview A Path can be either open (a polyline) or closed (a polygon), but should not be self-intersecting or otherwise degenerate. A path may be formed from multiple subpaths, which can be accessed via the subpaths property. A closed Path can be converted to one or more Polygons, but it can also be used for other purposes, such as defining a cross-section or profile of a 3D shape. Paths are typically 2-dimensional, but because PathPoint positions have a Z coordinate, they are not required to be. Even a flat Path (where all points lie on the same plane) can be translated or rotated so that its points do not necessarily lie on the XY plane.","kind":"symbol","title":"Path","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path","interfaceLanguage":"swift"}},"summary":"A path made up of a sequence of straight line segments between points."},{"rawIndexableTextContent":"Computes the cross-product of this vector and another.  Return Value Returns a vector that is orthogonal to the two vectors used to compute the cross product. The vector with which to compute the cross product.","kind":"symbol","title":"cross(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/cross(_:)","interfaceLanguage":"swift"}},"summary":"Computes the cross-product of this vector and another."},{"rawIndexableTextContent":"Returns a translated copy of the vector.  An offset vector to apply to the original vector.","kind":"symbol","title":"translated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/translated(by:)","interfaceLanguage":"swift"}},"summary":"Returns a translated copy of the vector."},{"rawIndexableTextContent":"A Boolean value that indicates whether the mesh includes texture coordinates. ","kind":"symbol","title":"hasTexcoords","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/hasTexcoords","interfaceLanguage":"swift"}},"summary":"A Boolean value that indicates whether the mesh includes texture coordinates."},{"rawIndexableTextContent":"Returns a transformed copy of the mesh.  A transform to apply to the mesh.","kind":"symbol","title":"transformed(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/transformed(by:)","interfaceLanguage":"swift"}},"summary":"Returns a transformed copy of the mesh."},{"rawIndexableTextContent":"No overview available.  Return Value The interpolated quaternion. A quaternion to interpolate with. The normalized extent of interpolation, from 0 to 1.","kind":"symbol","title":"slerp(_:_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/slerp(_:_:)","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The red component of the color. ","kind":"symbol","title":"r","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/r","interfaceLanguage":"swift"}},"summary":"The red component of the color."},{"rawIndexableTextContent":"Returns a scaled copy of the path.  A scale factor to apply to the path.","kind":"symbol","title":"scaled(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/scaled(by:)-84xdd","interfaceLanguage":"swift"}},"summary":"Returns a scaled copy of the path."},{"rawIndexableTextContent":"Returns a scaled copy of the vertex.  A scale factor to apply to the vertex.","kind":"symbol","title":"scaled(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/scaled(by:)-1dtbr","interfaceLanguage":"swift"}},"summary":"Returns a scaled copy of the vertex."},{"rawIndexableTextContent":"Flips the face direction and vertex normals of all polygons within the mesh.  Return Value The inverted mesh.","kind":"symbol","title":"inverted()","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/inverted()","interfaceLanguage":"swift"}},"summary":"Flips the face direction and vertex normals of all polygons within the mesh."},{"rawIndexableTextContent":"Creates a curved path point at the specified X, Y and Z coordinates.  The X coordinate of the path point. The Y coordinate of the path point. The Z coordinate of the path point. An optional texture coordinate for this path point. An optional vertex color for this path point.","kind":"symbol","title":"curve(_:_:_:texcoord:color:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/curve(_:_:_:texcoord:color:)","interfaceLanguage":"swift"}},"summary":"Creates a curved path point at the specified X, Y and Z coordinates."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Encodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/Encodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"Computes the dot-product of this vector and another.  Return Value The dot product of the two vectors. The vector with which to compute the dot product.","kind":"symbol","title":"dot(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/dot(_:)","interfaceLanguage":"swift"}},"summary":"Computes the dot-product of this vector and another."},{"rawIndexableTextContent":"Creates a new angle by decoding from the given decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new angle by decoding from the given decoder."},{"rawIndexableTextContent":"Inherited from Comparable.>=(_:_:). ","kind":"symbol","title":">=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/_=(_:_:)-5nk27","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable.>=(_:_:)."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Encodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/Encodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Material used by a given polygon. This can be any type that conforms to Hashable, but encoding\/decoding is only supported for the following types: Color, String, Int, Data or any NSCodable type. ","kind":"symbol","title":"Polygon.Material","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/Material-swift.typealias","interfaceLanguage":"swift"}},"summary":"Material used by a given polygon. This can be any type that conforms to Hashable, but encoding\/decoding is only supported for the following types: Color, String, Int, Data or any NSCodable type."},{"rawIndexableTextContent":"Returns a scaled copy of the path.  A scale vector to apply to the path.","kind":"symbol","title":"scaled(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/scaled(by:)-19jpq","interfaceLanguage":"swift"}},"summary":"Returns a scaled copy of the path."},{"rawIndexableTextContent":"Creates a linear path from a line segment.  The LineSegment defining the path. An optional Color to apply to the path’s points.","kind":"symbol","title":"line(_:color:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/line(_:color:)","interfaceLanguage":"swift"}},"summary":"Creates a linear path from a line segment."},{"rawIndexableTextContent":"Creates a new quaternion by decoding from the given decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new quaternion by decoding from the given decoder."},{"rawIndexableTextContent":"Returns a scaled copy of the vertex.  A scale vector to apply to the vertex.","kind":"symbol","title":"scaled(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/scaled(by:)-20sq4","interfaceLanguage":"swift"}},"summary":"Returns a scaled copy of the vertex."},{"rawIndexableTextContent":"A Boolean indicating whether the point is curved or sharp. ","kind":"symbol","title":"isCurved","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/isCurved","interfaceLanguage":"swift"}},"summary":"A Boolean indicating whether the point is curved or sharp."},{"rawIndexableTextContent":"Returns a vector with all components inverted. ","kind":"symbol","title":"-(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/-(_:)","interfaceLanguage":"swift"}},"summary":"Returns a vector with all components inverted."},{"rawIndexableTextContent":"Splits a concave polygon into two or more convex polygons using the “ear clipping” method.  Return Value An array of convex polygons. Discussion If the polygon is already convex then the original polygon is returned unchanged.","kind":"symbol","title":"tessellate()","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/tessellate()","interfaceLanguage":"swift"}},"summary":"Splits a concave polygon into two or more convex polygons using the “ear clipping” method."},{"rawIndexableTextContent":"Returns the angle divided by a numeric denominator. ","kind":"symbol","title":"\/(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/\/(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns the angle divided by a numeric denominator."},{"rawIndexableTextContent":"Creates a size\/scale vector from an array of two coordinates.  An array of vector components. Discussion Omitted values are set equal to the first value specified. If no values as specified, the size defaults to one.","kind":"symbol","title":"init(size:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(size:)-8b34m","interfaceLanguage":"swift"}},"summary":"Creates a size\/scale vector from an array of two coordinates."},{"rawIndexableTextContent":"The plane on which all vertices lie. ","kind":"symbol","title":"plane","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/plane","interfaceLanguage":"swift"}},"summary":"The plane on which all vertices lie."},{"rawIndexableTextContent":"Encodes this plane into the given encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this plane into the given encoder."},{"rawIndexableTextContent":"The surface normal of the vertex, used to calculate lighting. Set this to zero if you want the normal to be calculated automatically from the polygon face normal. ","kind":"symbol","title":"normal","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/normal","interfaceLanguage":"swift"}},"summary":"The surface normal of the vertex, used to calculate lighting. Set this to zero if you want the normal to be calculated automatically from the polygon face normal."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a rotated copy of the path.  A rotation to apply to the path.","kind":"symbol","title":"rotated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/rotated(by:)-4iaqb","interfaceLanguage":"swift"}},"summary":"Returns a rotated copy of the path."},{"rawIndexableTextContent":"Creates a mesh from an SceneKit node, with optional material mapping.  The SCNNode to convert into a mesh. An optional closure to map the SceneKit materials to Euclid materials. If omitted, the SCNMaterial will be directly used as the mesh material.","kind":"symbol","title":"init(_:materialLookup:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(_:materialLookup:)-ilb2","interfaceLanguage":"swift"}},"summary":"Creates a mesh from an SceneKit node, with optional material mapping."},{"rawIndexableTextContent":"The unique polygon edges in the mesh. The direction of each edge is normalized relative to the origin to simplify edge-equality comparisons. ","kind":"symbol","title":"uniqueEdges","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/uniqueEdges","interfaceLanguage":"swift"}},"summary":"The unique polygon edges in the mesh. The direction of each edge is normalized relative to the origin to simplify edge-equality comparisons."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"roll","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/roll","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"A Boolean value that indicates whether the quaternion has a length of 1. ","kind":"symbol","title":"isNormalized","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/isNormalized","interfaceLanguage":"swift"}},"summary":"A Boolean value that indicates whether the quaternion has a length of 1."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Encodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Encodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"The length of the line segment. ","kind":"symbol","title":"length","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/length","interfaceLanguage":"swift"}},"summary":"The length of the line segment."},{"rawIndexableTextContent":"Creates a new transform by decoding from the given decoder.  The decoder to read data from.","kind":"symbol","title":"init(from:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/init(from:)","interfaceLanguage":"swift"}},"summary":"Creates a new transform by decoding from the given decoder."},{"rawIndexableTextContent":"Returns the sum of two quaternion rotations. ","kind":"symbol","title":"+(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/+(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns the sum of two quaternion rotations."},{"rawIndexableTextContent":"A Boolean value that indicates whether the polygon includes texture coordinates. ","kind":"symbol","title":"hasTexcoords","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/hasTexcoords","interfaceLanguage":"swift"}},"summary":"A Boolean value that indicates whether the polygon includes texture coordinates."},{"rawIndexableTextContent":"A plane located at the origin, aligned with the Y and Z axes. ","kind":"symbol","title":"yz","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/yz","interfaceLanguage":"swift"}},"summary":"A plane located at the origin, aligned with the Y and Z axes."},{"rawIndexableTextContent":"Closes the path by joining last point to first.  Return Value A new path, or self if the path is already closed, or cannot be closed.","kind":"symbol","title":"closed()","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/closed()","interfaceLanguage":"swift"}},"summary":"Closes the path by joining last point to first."},{"rawIndexableTextContent":"Merges this polygon with another, removing redundant vertices where possible.  Return Value The combined polygon, or nil if the polygons can’t be merged. The polygon to merge with. A Boolean indicating is the resultant polygon must be convex.","kind":"symbol","title":"merge(_:ensureConvex:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/merge(_:ensureConvex:)","interfaceLanguage":"swift"}},"summary":"Merges this polygon with another, removing redundant vertices where possible."},{"rawIndexableTextContent":"An optional Polygon.Material associated with the polygon. ","kind":"symbol","title":"material","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/material-swift.property","interfaceLanguage":"swift"}},"summary":"An optional Polygon.Material associated with the polygon."},{"rawIndexableTextContent":"Returns a Boolean value that indicates if the bounds intersects the specified plane.  Return Value true if the plane intersects the bounds, and false otherwise. The plane to compare.","kind":"symbol","title":"intersects(_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/intersects(_:)-7br6p","interfaceLanguage":"swift"}},"summary":"Returns a Boolean value that indicates if the bounds intersects the specified plane."},{"rawIndexableTextContent":"Creates a closed regular polygon.  The distance from the center of the polygon to each point. The number of sides on the polygon. An optional Color to apply to the path’s points.","kind":"symbol","title":"polygon(radius:sides:color:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/polygon(radius:sides:color:)","interfaceLanguage":"swift"}},"summary":"Creates a closed regular polygon."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Decodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Callback used to cancel a long-running operation.  Return Value true if operation should be cancelled, or false otherwise.","kind":"symbol","title":"Mesh.CancellationHandler","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/CancellationHandler","interfaceLanguage":"swift"}},"summary":"Callback used to cancel a long-running operation."},{"rawIndexableTextContent":"Inherited from Comparable.<=(_:_:). ","kind":"symbol","title":"<=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/_=(_:_:)-1oq2t","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable.<=(_:_:)."},{"rawIndexableTextContent":"The X component of the vector. ","kind":"symbol","title":"x","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/x","interfaceLanguage":"swift"}},"summary":"The X component of the vector."},{"rawIndexableTextContent":"The square of the length of the vector. This is less expensive to compute than the length itself. ","kind":"symbol","title":"lengthSquared","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/lengthSquared","interfaceLanguage":"swift"}},"summary":"The square of the length of the vector. This is less expensive to compute than the length itself."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Decodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a translated copy of the bounds.  An offset vector to apply to the bounds.","kind":"symbol","title":"translated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/translated(by:)","interfaceLanguage":"swift"}},"summary":"Returns a translated copy of the bounds."},{"rawIndexableTextContent":"Returns a normalized vector.  Return Value The normalized vector (with a length of 1) or the zero vector if the length is 0.","kind":"symbol","title":"normalized()","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/normalized()","interfaceLanguage":"swift"}},"summary":"Returns a normalized vector."},{"rawIndexableTextContent":"Returns the intersection point between the specified line segment and this one.  Return Value The point of intersection, or nil if the line segments don’t intersect. The line segment to compare with.","kind":"symbol","title":"intersection(with:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/intersection(with:)","interfaceLanguage":"swift"}},"summary":"Returns the intersection point between the specified line segment and this one."},{"rawIndexableTextContent":"Creates a copy of the color updated with the specified alpha. ","kind":"symbol","title":"withAlpha(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/withAlpha(_:)","interfaceLanguage":"swift"}},"summary":"Creates a copy of the color updated with the specified alpha."},{"rawIndexableTextContent":"The green component of the color. ","kind":"symbol","title":"g","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/g","interfaceLanguage":"swift"}},"summary":"The green component of the color."},{"rawIndexableTextContent":"Inherited from Comparable....(_:). ","kind":"symbol","title":"...(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/...(_:)-14arr","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable....(_:)."},{"rawIndexableTextContent":"Stroke a path with the specified line width, depth and material ","kind":"symbol","title":"stroke(_:width:depth:faces:material:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/stroke(_:width:depth:faces:material:)","interfaceLanguage":"swift"}},"summary":"Stroke a path with the specified line width, depth and material"},{"rawIndexableTextContent":"Flips the polygon along its plane and reverses the order and surface normals of the vertices.  Return Value The inverted polygon.","kind":"symbol","title":"inverted()","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/inverted()","interfaceLanguage":"swift"}},"summary":"Flips the polygon along its plane and reverses the order and surface normals of the vertices."},{"rawIndexableTextContent":"Clip mesh to the specified plane and optionally fill sheared faces with specified material.  Discussion Parameters plane: The plane to clip the mesh to fill: The material to fill the sheared face(s) with. Specifying nil for the fill material will leave the sheared face unfilled.","kind":"symbol","title":"clip(to:fill:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/clip(to:fill:)","interfaceLanguage":"swift"}},"summary":"Clip mesh to the specified plane and optionally fill sheared faces with specified material."},{"rawIndexableTextContent":"Creates a plane from a set of points.  A set of coplanar points describing a polygon. Discussion The polygon can be convex or concave. The direction of the plane normal is based on the assumption that the points are wound in an anti-clockwise direction.","kind":"symbol","title":"init(points:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/init(points:)","interfaceLanguage":"swift"}},"summary":"Creates a plane from a set of points."},{"rawIndexableTextContent":"Returns a new mesh representing the volume shared by both the mesh parameter and the receiver. If these do not intersect, an empty mesh will be returned.  Return Value a new mesh representing the intersection of the meshes. Discussion  Parameters mesh: The mesh to be intersected with this one. isCancelled: Callback used to cancel the operation.","kind":"symbol","title":"intersect(_:isCancelled:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/intersect(_:isCancelled:)","interfaceLanguage":"swift"}},"summary":"Returns a new mesh representing the volume shared by both the mesh parameter and the receiver. If these do not intersect, an empty mesh will be returned."},{"rawIndexableTextContent":"The quaternion component values. ","kind":"symbol","title":"w","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/w","interfaceLanguage":"swift"}},"summary":"The quaternion component values."},{"rawIndexableTextContent":"Scales the transform.  A vector scale factor.","kind":"symbol","title":"scale(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/scale(by:)","interfaceLanguage":"swift"}},"summary":"Scales the transform."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Decodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates an array of glyph contours from a string and font you provide.  The text to convert. The font to use for the text. The optional width at which to line-wrap the text. The number line segments used to approximate glyph curves.","kind":"symbol","title":"text(_:font:width:detail:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/text(_:font:width:detail:)","interfaceLanguage":"swift"}},"summary":"Creates an array of glyph contours from a string and font you provide."},{"rawIndexableTextContent":"Returns a new vertex with the normal inverted. ","kind":"symbol","title":"inverted()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/inverted()","interfaceLanguage":"swift"}},"summary":"Returns a new vertex with the normal inverted."},{"rawIndexableTextContent":"Creates an array of glyph contours from an attributed string.  The text to convert. The optional width at which to line-wrap the text. The number line segments used to approximate glyph curves.","kind":"symbol","title":"text(_:width:detail:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/text(_:width:detail:)","interfaceLanguage":"swift"}},"summary":"Creates an array of glyph contours from an attributed string."},{"rawIndexableTextContent":"Encodes the vector into the given encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes the vector into the given encoder."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Decodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Adds the quaternion rotation on the right to the one on the left. ","kind":"symbol","title":"+=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/+=(_:_:)","interfaceLanguage":"swift"}},"summary":"Adds the quaternion rotation on the right to the one on the left."},{"rawIndexableTextContent":"Returns a rotated copy of the plane.  A quaternion to apply to the plane.","kind":"symbol","title":"rotated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/rotated(by:)-2z48u","interfaceLanguage":"swift"}},"summary":"Returns a rotated copy of the plane."},{"rawIndexableTextContent":"Returns a transformed copy of the bounds.  A transform to apply to the bounds.","kind":"symbol","title":"transformed(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/transformed(by:)","interfaceLanguage":"swift"}},"summary":"Returns a transformed copy of the bounds."},{"rawIndexableTextContent":"Creates a path point.  The location of the path point. An optional texture coordinate for this path point. An optional vertex color for this path point. A Boolean indicating if point should be curved or sharp.","kind":"symbol","title":"init(_:texcoord:color:isCurved:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/init(_:texcoord:color:isCurved:)","interfaceLanguage":"swift"}},"summary":"Creates a path point."},{"rawIndexableTextContent":"Creates a new transform.  The translation or position component of the transform. Defaults to zero (no offset). The translation or position component of the transform. Defaults to identity (no rotation). The scaling component of the transform. Defaults to one (no scale adjustment).","kind":"symbol","title":"init(offset:rotation:scale:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/init(offset:rotation:scale:)","interfaceLanguage":"swift"}},"summary":"Creates a new transform."},{"rawIndexableTextContent":"Encodes this bounds into the given encoder.  The encoder to write data to.","kind":"symbol","title":"encode(to:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/encode(to:)","interfaceLanguage":"swift"}},"summary":"Encodes this bounds into the given encoder."},{"rawIndexableTextContent":"Creates a rotation from Euler angles applied in roll\/yaw\/pitch order.  The angle of rotation around the Z axis. This is applied first. The angle of rotation around the Y axis. This is applied second. The angle of rotation around the X axis. This is applied last.","kind":"symbol","title":"init(roll:yaw:pitch:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init(roll:yaw:pitch:)","interfaceLanguage":"swift"}},"summary":"Creates a rotation from Euler angles applied in roll\/yaw\/pitch order."},{"rawIndexableTextContent":"Computes a set of edges where the mesh intersects a plane.  Return Value A Set of LineSegment representing the polygon edges intersecting the plane. A Plane to test against the mesh.","kind":"symbol","title":"edges(intersecting:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/edges(intersecting:)","interfaceLanguage":"swift"}},"summary":"Computes a set of edges where the mesh intersects a plane."},{"rawIndexableTextContent":"Rotates the transform.  A rotation to apply to the transform.","kind":"symbol","title":"rotate(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/rotate(by:)","interfaceLanguage":"swift"}},"summary":"Rotates the transform."},{"rawIndexableTextContent":"Generate front faces. ","kind":"symbol","title":"Mesh.Faces.front","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Faces\/front","interfaceLanguage":"swift"}},"summary":"Generate front faces."},{"rawIndexableTextContent":"Returns a rotated copy of the vector.  A quaternion to apply to the vector.","kind":"symbol","title":"rotated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/rotated(by:)-7qu0o","interfaceLanguage":"swift"}},"summary":"Returns a rotated copy of the vector."},{"rawIndexableTextContent":"Combines with the specified rotation. ","kind":"symbol","title":"*=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/*=(_:_:)","interfaceLanguage":"swift"}},"summary":"Combines with the specified rotation."},{"rawIndexableTextContent":"Inherited from Comparable.>=(_:_:). ","kind":"symbol","title":">=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/_=(_:_:)-5dvuy","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable.>=(_:_:)."},{"rawIndexableTextContent":"Returns the sum of two angles. ","kind":"symbol","title":"+(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/+(_:_:)","interfaceLanguage":"swift"}},"summary":"Returns the sum of two angles."},{"rawIndexableTextContent":"Euclid is a library for creating and manipulating 3D geometry using techniques such as extruding or “lathing” 2D paths to create solid 3D shapes, and CSG (Constructive Solid Geometry) to combine or subtract those shapes from one another. Overview Euclid is the underlying implementation for the open source ShapeScript scripting language and ShapeScript macOS app. Anything you can build in ShapeScript can be replicated programmatically in Swift using this library. If you would like to support the development of Euclid, please consider buying a copy of ShapeScript (the app itself is free, but there is an in-app purchase to unlock some features). You can also donate directly to the project via PayPal:  Note: Euclid is a fairly complex piece of code, at a fairly early stage of development. You should expect some bugs and breaking changes over the first few releases, and the documentation is a little sparse. Please report any issues you encounter, and I will do my best to fix them.","kind":"symbol","title":"Euclid","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid","interfaceLanguage":"swift"}},"summary":"Euclid is a library for creating and manipulating 3D geometry using techniques such as extruding or “lathing” 2D paths to create solid 3D shapes, and CSG (Constructive Solid Geometry) to combine or subtract those shapes from one another."},{"rawIndexableTextContent":"Returns a rotated copy of the plane.  A quaternion to apply to the plane.","kind":"symbol","title":"rotated(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/rotated(by:)-y8cz","interfaceLanguage":"swift"}},"summary":"Returns a rotated copy of the plane."},{"rawIndexableTextContent":"An axially-aligned bounding box in 3D space.  Overview Used for efficient intersection elimination between more complex shapes.","kind":"symbol","title":"Bounds","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds","interfaceLanguage":"swift"}},"summary":"An axially-aligned bounding box in 3D space."},{"rawIndexableTextContent":"Creates a color from an array of component values.  Discussion The number of values specified determines how each value is interpreted. The following patterns are supported (R = red, G = green, B = blue, A = alpha, L = luminance): L LA RGB RGBA","kind":"symbol","title":"init(_:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/init(_:)-53lhy","interfaceLanguage":"swift"}},"summary":"Creates a color from an array of component values."},{"rawIndexableTextContent":"Inherited from Comparable.>(_:_:). ","kind":"symbol","title":">(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/_(_:_:)-filj","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable.>(_:_:)."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Inherited from Comparable....(_:). ","kind":"symbol","title":"...(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/...(_:)-8feph","interfaceLanguage":"swift"}},"summary":"Inherited from Comparable....(_:)."},{"rawIndexableTextContent":"Angle representing a half-rotation. ","kind":"symbol","title":"pi","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/pi","interfaceLanguage":"swift"}},"summary":"Angle representing a half-rotation."},{"rawIndexableTextContent":"Creates a bounds from a set of bounds.  An array of existing bounds that the bounds contains.","kind":"symbol","title":"init(bounds:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/init(bounds:)","interfaceLanguage":"swift"}},"summary":"Creates a bounds from a set of bounds."},{"rawIndexableTextContent":"Texture is tube-wrapped. ","kind":"symbol","title":"Mesh.WrapMode.tube","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/WrapMode\/tube","interfaceLanguage":"swift"}},"summary":"Texture is tube-wrapped."},{"rawIndexableTextContent":"A Boolean value that indicates whether the mesh is watertight, meaning that every edge is attached to two polygons (or a multiple of two).  Discussion A value of true doesn’t guarantee that mesh is not self-intersecting or inside-out.","kind":"symbol","title":"isWatertight","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/isWatertight","interfaceLanguage":"swift"}},"summary":"A Boolean value that indicates whether the mesh is watertight, meaning that every edge is attached to two polygons (or a multiple of two)."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Decodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Decodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/Decodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Multiplies the quaternion rotation on the left by the one on the right. ","kind":"symbol","title":"*=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/*=(_:_:)-5ic2j","interfaceLanguage":"swift"}},"summary":"Multiplies the quaternion rotation on the left by the one on the right."},{"rawIndexableTextContent":"Returns a scaled copy of the vector.  A scale vector to apply to the vector.","kind":"symbol","title":"scaled(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/scaled(by:)","interfaceLanguage":"swift"}},"summary":"Returns a scaled copy of the vector."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"yellow","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/yellow","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates an angle from a degrees value.  The angle in degrees.","kind":"symbol","title":"degrees(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/degrees(_:)","interfaceLanguage":"swift"}},"summary":"Creates an angle from a degrees value."},{"rawIndexableTextContent":"Returns a vectors with its component values explicitly rounded to the nearest quanta.  Discussion The precion of the quantized value is defined within Euclid to round off values to avoid cracks, breaks, and math errors while computing surface within constructive solid geometry operations.","kind":"symbol","title":"quantized()","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/quantized()","interfaceLanguage":"swift"}},"summary":"Returns a vectors with its component values explicitly rounded to the nearest quanta."},{"rawIndexableTextContent":"Multiplies the components of the quaternion by the specified value. ","kind":"symbol","title":"*=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Quaternion\/*=(_:_:)-lsgo","interfaceLanguage":"swift"}},"summary":"Multiplies the components of the quaternion by the specified value."},{"rawIndexableTextContent":"No overview available.","kind":"article","title":"Encodable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/Encodable-Implementations","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Returns a scaled copy of the polygon.  A scale vector to apply to the polygon.","kind":"symbol","title":"scaled(by:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/scaled(by:)-8sjrv","interfaceLanguage":"swift"}},"summary":"Returns a scaled copy of the polygon."},{"rawIndexableTextContent":"No overview available. ","kind":"symbol","title":"green","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/green","interfaceLanguage":"swift"}},"summary":"No overview available."},{"rawIndexableTextContent":"Creates a corner path point at the specified X, Y and Z coordinates.  The X coordinate of the path point. The Y coordinate of the path point. The Z coordinate of the path point (optional - defaults to zero). An optional texture coordinate for this path point. An optional vertex color for this path point.","kind":"symbol","title":"point(_:_:_:texcoord:color:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/point(_:_:_:texcoord:color:)","interfaceLanguage":"swift"}},"summary":"Creates a corner path point at the specified X, Y and Z coordinates."},{"rawIndexableTextContent":"Creates a vector from the values you provide.  The X component of the vector. The Y component of the vector. The Z component of the vector.","kind":"symbol","title":"init(_:_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(_:_:_:)","interfaceLanguage":"swift"}},"summary":"Creates a vector from the values you provide."},{"rawIndexableTextContent":"Creates a mesh from an SceneKit geometry, with the material you provide.  The SCNGeometry to convert. A Mesh.Material to apply to the geometry, replacing any existing materials. Pass nil to use the default Euclid material.","kind":"symbol","title":"init(_:material:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(_:material:)","interfaceLanguage":"swift"}},"summary":"Creates a mesh from an SceneKit geometry, with the material you provide."},{"rawIndexableTextContent":"Material used by the mesh polygons. See Polygon.Material for details. ","kind":"symbol","title":"Mesh.Material","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Material","interfaceLanguage":"swift"}},"summary":"Material used by the mesh polygons. See Polygon.Material for details."},{"rawIndexableTextContent":"Creates a quadratic bezier spline.  The control points for the curve. The number line segments used to approximate curved sections. Discussion The method takes an array of PathPoint and a detail argument. Normally, the isCurved property is used to calculate surface normals (for lighting purposes), but with the curve(_:detail:) method it actually affects the shape of the Path. A sequence of regular (non-curved) PathPoints creates sharp corners in the Path as normal, but curved points are treated as off-curve Bezier control points. The method uses second-order (quadratic) Bezier curves, where each curve has two on-curve end points and a single off-curve control point. If two curved PathPoint are used in sequence then an on-curve point is interpolated between them. It is therefore  possible to create curves entirely out of curved (off-curve) control points. This approach to curve generation is based on the popular TrueType (TTF) font system, and provides a good balance between simplicity and flexibility. For more complex curves, on macOS and iOS you can create Euclid Path from a CGPath by using the CGPath.paths() extension method. CGPath supports cubic bezier curves as well as quadratic, and has convenience constructors for rounded rectangles and other shapes.","kind":"symbol","title":"curve(_:detail:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/curve(_:detail:)","interfaceLanguage":"swift"}},"summary":"Creates a quadratic bezier spline."}]