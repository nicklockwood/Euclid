[
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/CustomDebugStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomDebugStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/*=(_:_:)-3ur4e"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place. ",
    "summary" : "Transform the value in place.",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/intersection(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point if it intersects the receiver.  The point to compare with. Return Value The nearest point on the receiver that touches the point, or nil otherwise.",
    "summary" : "Returns the nearest point if it intersects the receiver.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/roll"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The angle of rotation around the Z-axis. ",
    "summary" : "The angle of rotation around the Z-axis.",
    "title" : "roll"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/halfPi"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Angle representing a quarter rotation. ",
    "summary" : "Angle representing a quarter rotation.",
    "title" : "halfPi"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/circle(radius:segments:color:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a closed circular path.  The distance from the center of the circle to each point used to approximate its shape. The number of line segments used to approximate the circle. An optional Color to apply to the path’s points.  Discussion Because the circle is approximated using line segments, its radius is not uniform. The radius specified is the outer radius, i.e. the radius at the corners of the polygon.",
    "summary" : "Creates a closed circular path.",
    "title" : "circle(radius:segments:color:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/scale(by:)-2pycj"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A uniform scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/scaled(by:)-7e3o7"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A uniform scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/red"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "red"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/translated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a translated copy of the value.  An offset vector to apply to the value.",
    "summary" : "Returns a translated copy of the value.",
    "title" : "translated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/fill(_:faces:material:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a mesh by filling a path to form one or more polygons.  The shape to be filled. The direction the polygon faces. The optional material for the mesh. ",
    "summary" : "Creates a mesh by filling a path to form one or more polygons.",
    "title" : "fill(_:faces:material:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/start"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The starting point of the line segment. ",
    "summary" : "The starting point of the line segment.",
    "title" : "start"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/reflected(along:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Reflects the vertex along a plane.  The Plane against which the vertices are to be reflected. Return Value A Vertex representing the reflected vertex.",
    "summary" : "Reflects the vertex along a plane.",
    "title" : "reflected(along:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/radians"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The angle in radians. ",
    "summary" : "The angle in radians.",
    "title" : "radians"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/direction"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The normalized direction of the line. ",
    "summary" : "The normalized direction of the line.",
    "title" : "direction"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Interpolatable\/interpolated(with:by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Interpolate between two values.  The value to interpolate towards. The extent of the interpolation, from 0 - 1 (unclamped) Return Value The interpolated value.",
    "summary" : "Interpolate between two values.",
    "title" : "interpolated(with:by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/formIntersection(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Reduces the bounds to contain just the intersection of itself and the specified bounds.  The bounds with which to intersect.",
    "summary" : "Reduces the bounds to contain just the intersection of itself and the specified bounds.",
    "title" : "formIntersection(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/polygonsByMaterial"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The polygons in the mesh, grouped by material. ",
    "summary" : "The polygons in the mesh, grouped by material.",
    "title" : "polygonsByMaterial"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/LineComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "LineComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/withAlpha(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a copy of the color updated with the specified alpha. ",
    "summary" : "Creates a copy of the color updated with the specified alpha.",
    "title" : "withAlpha(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/scale(by:)-55ayx"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A uniform scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/WrapMode\/shrink"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Texture is shrink-wrapped. ",
    "summary" : "Texture is shrink-wrapped.",
    "title" : "Mesh.WrapMode.shrink"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/transform(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place.  A transform to apply to the value.",
    "summary" : "Transform the value in place.",
    "title" : "transform(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/rotate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Rotate the value in place.  A rotation to apply to the value.",
    "summary" : "Rotate the value in place.",
    "title" : "rotate(by:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/isWatertight"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A Boolean value that indicates whether the mesh is watertight, meaning that every edge is attached to two polygons (or a multiple of two).  Discussion A value of true doesn’t guarantee that mesh is not self-intersecting or inside-out.",
    "summary" : "A Boolean value that indicates whether the mesh is watertight, meaning that every edge is attached to two polygons (or a multiple of two).",
    "title" : "isWatertight"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/intersection(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point if it intersects the receiver.  The point to compare with. Return Value The nearest point on the receiver that touches the point, or nil otherwise.",
    "summary" : "Returns the nearest point if it intersects the receiver.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/identity"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The identity transform (i.e. no transform). ",
    "summary" : "The identity transform (i.e. no transform).",
    "title" : "identity"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PlaneComparison\/front"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "All points in the shape lie in front of the plane. ",
    "summary" : "All points in the shape lie in front of the plane.",
    "title" : "PlaneComparison.front"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/.._(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable...<(_:). ",
    "summary" : "Inherited from Comparable...<(_:).",
    "title" : "..<(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/transform(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place.  A transform to apply to the value.",
    "summary" : "Transform the value in place.",
    "title" : "transform(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/edges(intersecting:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes a set of edges where the mesh intersects a plane.  A Plane to test against the mesh. Return Value A Set of LineSegment representing the polygon edges intersections.",
    "summary" : "Computes a set of edges where the mesh intersects a plane.",
    "title" : "edges(intersecting:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/plane"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The plane on which all vertices lie. ",
    "summary" : "The plane on which all vertices lie.",
    "title" : "plane"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/area"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the area of the polygon. ",
    "summary" : "Returns the area of the polygon.",
    "title" : "area"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/undirectedEdges"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An unordered set of polygon edges. The direction of each edge is normalized relative to the origin to simplify edge-equality comparisons. ",
    "summary" : "An unordered set of polygon edges. The direction of each edge is normalized relative to the origin to simplify edge-equality comparisons.",
    "title" : "undirectedEdges"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/min(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new vector that represents the minimum of the components of the two vectors. ",
    "summary" : "Returns a new vector that represents the minimum of the components of the two vectors.",
    "title" : "min(_:_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/split(along:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Split the mesh along a plane.  The Plane to split the mesh along. Return Value A pair of meshes representing the parts in front of and behind the plane respectively. Discussion If the plane and mesh do not intersect, one of the returned meshes will be nil.",
    "summary" : "Split the mesh along a plane.",
    "title" : "split(along:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/withTexcoord(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a copy of the vertex with the specified texture coordinate.  The texture coordinate to apply to the vertex.",
    "summary" : "Creates a copy of the vertex with the specified texture coordinate.",
    "title" : "withTexcoord(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/intersection(_:isCancelled:)-swift.type.method"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Efficiently computes the intersection of multiple meshes.  A collection of meshes to be intersected. Callback used to cancel the operation. Return Value A new mesh representing the intersection of the meshes.",
    "summary" : "Efficiently computes the intersection of multiple meshes.",
    "title" : "intersection(_:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/square(size:color:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a closed square path.  The width and height of the square. An optional Color to apply to the path’s points. ",
    "summary" : "Creates a closed square path.",
    "title" : "square(size:color:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/stencil(_:isCancelled:)-swift.type.method"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Efficiently performs a stencil with multiple meshes.  An ordered collection of meshes. All but the first will be stencilled onto the first. Callback used to cancel the operation. Return Value A new mesh representing the result of stencilling.",
    "summary" : "Efficiently performs a stencil with multiple meshes.",
    "title" : "stencil(_:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/stlString(options:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return ASCII STL string data for the mesh. ",
    "summary" : "Return ASCII STL string data for the mesh.",
    "title" : "stlString(options:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/convexHull(with:isCancelled:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new mesh representing a convex hull around the mesh parameter and the receiver, with inner faces removed.  The mesh to form a hull with. Callback used to cancel the operation. Return Value A new mesh representing the convex hull around the inputs.  Discussion ",
    "summary" : "Returns a new mesh representing a convex hull around the mesh parameter and the receiver, with inner faces removed.",
    "title" : "convexHull(with:isCancelled:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/intersects(_:)-btim"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line intersects the receiver.  The line to compare with. Return Value true if the line and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the line intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PointComparable\/intersects(_:)-7wey"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the point touches or intersects the receiver.  The point to compare with. Return Value true if the point and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the point touches or intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/bounds"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The bounds of the object. ",
    "summary" : "The bounds of the object.",
    "title" : "bounds"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/latheProfile"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Cropped and flattened version of path suitable for lathing around the Y axis. ",
    "summary" : "Cropped and flattened version of path suitable for lathing around the Y axis.",
    "title" : "latheProfile"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/transformed(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value.  A transform to apply to the value.",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "transformed(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/scale(by:)-1kdd7"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A vector scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Bounded-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Bounded Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/-(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the inverse rotation. ",
    "summary" : "Returns the inverse rotation.",
    "title" : "-(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/white"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "white"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/init(_:)-fqn0"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a bounds from a Bounded object.  A bounded object.",
    "summary" : "Creates a bounds from a Bounded object.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transformable\/rotated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a rotated copy of the value.  A rotation to apply to the value.",
    "summary" : "Returns a rotated copy of the value.",
    "title" : "rotated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/translate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Translate the value in place.  A translation to apply to the value.",
    "summary" : "Translate the value in place.",
    "title" : "translate(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/yellow"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "yellow"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/PlaneComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PlaneComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(_:)-894qv"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a Vector from a simd vector 2.  A simd vector.",
    "summary" : "Creates a Vector from a simd vector 2.",
    "title" : "init(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/distance(from:)-25au9"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the distance between the receiver and the specified point.  The point to compare with. Return Value The distance between the receiver and the point. The value is always positive if the receiver is not touching the point, or zero if it touches or intersects the point.",
    "summary" : "Returns the distance between the receiver and the specified point.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/minowskiSum(of:isCancelled:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Efficiently computes the Minowski sum of two or more meshes.  A collection of meshes to compute the sum of. Callback used to cancel the operation. Return Value A new mesh representing the Minowski sum of all the inputs.",
    "summary" : "Efficiently computes the Minowski sum of two or more meshes.",
    "title" : "minowskiSum(of:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/offset(_:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : true,
        "renamed" : "translation(_:)",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Deprecated. ",
    "summary" : "Deprecated.",
    "title" : "offset(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/CancellationHandler"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Callback used to cancel a long-running operation.  Return Value true if operation should be cancelled, or false otherwise.",
    "summary" : "Callback used to cancel a long-running operation.",
    "title" : "Mesh.CancellationHandler"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/-=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from AdditiveArithmetic.-=(_:_:). ",
    "summary" : "Inherited from AdditiveArithmetic.-=(_:_:).",
    "title" : "-=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/IOError\/errorDomain"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "8.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "10.10",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "9.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "2.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Inherited from CustomNSError.errorDomain. ",
    "summary" : "Inherited from CustomNSError.errorDomain.",
    "title" : "errorDomain"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/projected(onto:)-2zsww"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point on the specified plane to the vector (representing a position in space).  The plane to project onto. Return Value The nearest point in 3D space that lies on the plane.",
    "summary" : "Returns the nearest point on the specified plane to the vector (representing a position in space).",
    "title" : "projected(onto:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/roundedRectangle(width:height:radius:detail:color:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a rounded rectangle path.  The width of the rectangle. The height of the rectangle. The corner radius, The number of line segments used to approximate each corner curve. An optional Color to apply to the path’s points. ",
    "summary" : "Creates a rounded rectangle path.",
    "title" : "roundedRectangle(width:height:radius:detail:color:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/cubeMapped()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return a copy of the mesh with cube-mapped texture coordinates.  ",
    "summary" : "Return a copy of the mesh with cube-mapped texture coordinates.",
    "title" : "cubeMapped()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/withoutTexcoords()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return a copy of the polygon without texture coordinates ",
    "summary" : "Return a copy of the polygon without texture coordinates",
    "title" : "withoutTexcoords()"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/distance(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified line.  The line to compare with. Return Value The distance between the receiver and the line. The value is positive if the receiver lies in front or behind the line, or zero if it lies exactly on the line, or crosses it.",
    "summary" : "Returns the absolute distance between the receiver and the specified line.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/PlaneComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PlaneComparable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/compare(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The relationship between the receiver and the specified plane.  The plane to compare with. Return Value The PlaneComparison between the receiver and the plane.",
    "summary" : "The relationship between the receiver and the specified plane.",
    "title" : "compare(with:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/lathe(_:slices:poleDetail:addDetailForFlatPoles:faces:wrapMode:material:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a rotationally symmetrical mesh by turning the specified path around the Y axis.  The path to use as the profile for the mesh. The number of slices that make up the lathed mesh. The number of segments used to make the pole. A Boolean value that indicates whether to add detail to the poles. The direction of the generated polygon faces. The way that texture coordinates are calculated for the lathed mesh. The optional material for the mesh.  Discussion The profile path can be open or closed. Define a closed path by ending with the same point that you started with. The path can be placed on either side of the Y axis, however the behavior is undefined for paths that cross the axis Open paths that do not start and end on the Y axis will produce a shape with a hole in it",
    "summary" : "Creates a rotationally symmetrical mesh by turning the specified path around the Y axis.",
    "title" : "lathe(_:slices:poleDetail:addDetailForFlatPoles:faces:wrapMode:material:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/intersects(_:)-95v17"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a Boolean value that indicates whether the two bounds intersect.  The bounds to compare. Return Value true if the bounds intersect, and false otherwise.",
    "summary" : "Returns a Boolean value that indicates whether the two bounds intersect.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/withNormal(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a copy of the vertex with the specified normal.  The normal value to apply to the vertex.",
    "summary" : "Creates a copy of the vertex with the specified normal.",
    "title" : "withNormal(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/zero"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A zero-length vector. ",
    "summary" : "A zero-length vector.",
    "title" : "zero"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transformable\/transformed(by:)-21ah6"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value.  A transform to apply to the value.",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "transformed(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/fill(_:faces:material:isCancelled:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Efficiently fills an array of paths, avoiding unnecessary work if there are duplicates.  The array of paths to be filled. The direction the polygon faces. The optional material for the mesh. Callback used to cancel the operation.",
    "summary" : "Efficiently fills an array of paths, avoiding unnecessary work if there are duplicates.",
    "title" : "fill(_:faces:material:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/containsPoint(_:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : true,
        "renamed" : "intersects(_:)",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Deprecated. ",
    "summary" : "Deprecated.",
    "title" : "containsPoint(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/scaled(by:)-69m6m"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A uniform scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Transformable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Transformable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/compare(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The relationship between the receiver and the specified plane.  The plane to compare with. Return Value The PlaneComparison between the receiver and the plane.",
    "summary" : "The relationship between the receiver and the specified plane.",
    "title" : "compare(with:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/intersection(with:)-3y1jt"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the point where the specified segment intersects this line.  The line segment to compare with. Return Value The point of intersection, or nil if the lines don’t intersect.",
    "summary" : "Returns the point where the specified segment intersects this line.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/Encodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Encodable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/interpolated(with:by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Interpolate between two values.  The value to interpolate towards. The extent of the interpolation, from 0 - 1 (unclamped) Return Value The interpolated value.",
    "summary" : "Interpolate between two values.",
    "title" : "interpolated(with:by:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/init(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a bounds from two points.  The first point. The second point. Discussion Unlike the init(min:max:) constructor, the order of the points doesn’t matter.",
    "summary" : "Creates a bounds from two points.",
    "title" : "init(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/interpolated(with:by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Interpolate between two values.  The value to interpolate towards. The extent of the interpolation, from 0 - 1 (unclamped) Return Value The interpolated value.",
    "summary" : "Interpolate between two values.",
    "title" : "interpolated(with:by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/subdivide()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Subdivides triangles and quads, leaving other polygons unchanged. ",
    "summary" : "Subdivides triangles and quads, leaving other polygons unchanged.",
    "title" : "subdivide()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/debugDescription"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomDebugStringConvertible.debugDescription. ",
    "summary" : "Inherited from CustomDebugStringConvertible.debugDescription.",
    "title" : "debugDescription"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/_(_:_:)-3ro6k"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a vector with its components divided by the specified value. ",
    "summary" : "Returns a vector with its components divided by the specified value.",
    "title" : "\/(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/-(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the componentwise difference between two vectors. ",
    "summary" : "Returns the componentwise difference between two vectors.",
    "title" : "-(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/CancellationHandler"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Callback used to cancel a long-running operation.  Return Value true if operation should be cancelled, or false otherwise.",
    "summary" : "Callback used to cancel a long-running operation.",
    "title" : "LineSegment.CancellationHandler"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/Transformable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Transformable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/replacing(_:with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a copy of the mesh with the specified old material replaced by a new one.  The Mesh.Material to be replaced. The Mesh.Material to use instead. Return Value A new Mesh with the material replaced.",
    "summary" : "Returns a copy of the mesh with the specified old material replaced by a new one.",
    "title" : "replacing(_:with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/isOne"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "All vector components are one (or  close to one) in length. ",
    "summary" : "All vector components are one (or  close to one) in length.",
    "title" : "isOne"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/orderedEdges"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the ordered array of path edges. ",
    "summary" : "Returns the ordered array of path edges.",
    "title" : "orderedEdges"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/-(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the inverse angle. ",
    "summary" : "Returns the inverse angle.",
    "title" : "-(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/flatteningNormals()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Flatten vertex normals (set them to match the face normal) ",
    "summary" : "Flatten vertex normals (set them to match the face normal)",
    "title" : "flatteningNormals()"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/CustomReflectable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomReflectable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/forward"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A normalized direction vector pointing forwards relative to the current rotation. ",
    "summary" : "A normalized direction vector pointing forwards relative to the current rotation.",
    "title" : "forward"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/transform(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place.  A transform to apply to the value.",
    "summary" : "Transform the value in place.",
    "title" : "transform(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/*=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place. ",
    "summary" : "Transform the value in place.",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A polygon in 3D space.   Overview A polygon must be composed of three or more vertices, and those vertices must all lie on the same plane. The edges of a polygon can be either convex or concave, but not self-intersecting.",
    "summary" : "A polygon in 3D space.",
    "title" : "Polygon"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/hasVertexNormals"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A Boolean value that indicates whether the mesh includes vertex normals that differ from the face normal. ",
    "summary" : "A Boolean value that indicates whether the mesh includes vertex normals that differ from the face normal.",
    "title" : "hasVertexNormals"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/WrapMode\/none"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Do not generate texture coordinates. ",
    "summary" : "Do not generate texture coordinates.",
    "title" : "Mesh.WrapMode.none"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/formMinowskiSum(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Expands the bounds to the Minowski sum of the specified bounds and this one.  The bounds with which to form the Minowski sum.",
    "summary" : "Expands the bounds to the Minowski sum of the specified bounds and this one.",
    "title" : "formMinowskiSum(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/Transformable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Transformable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(url:ignoringTransforms:materialLookup:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Loads a mesh from a file using any format supported by SceneKit,  with optional material mapping.  The URL of the file to be loaded. Should node transforms from the input file be ignored. An optional closure to map the SceneKit materials to Euclid materials. If omitted, the SCNMaterial will be directly used as the mesh material.",
    "summary" : "Loads a mesh from a file using any format supported by SceneKit,  with optional material mapping.",
    "title" : "init(url:ignoringTransforms:materialLookup:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/length"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The total length of the path. ",
    "summary" : "The total length of the path.",
    "title" : "length"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/mapVertexColors(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return a copy of the polygon with transformed vertex colors  A closure to be applied to each vertex color in the polygon.",
    "summary" : "Return a copy of the polygon with transformed vertex colors",
    "title" : "mapVertexColors(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/containsPoint(_:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : true,
        "renamed" : "intersects(_:)",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Deprecated. ",
    "summary" : "Deprecated.",
    "title" : "containsPoint(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/scaled(by:)-84xdd"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A uniform scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/angle(with:)-29paf"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the angle between this vector and another.  The vector to compare with.",
    "summary" : "Returns the angle between this vector and another.",
    "title" : "angle(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/Encodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Encodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/_(_:_:)-1aqv9"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns whether the leftmost angle has the lower value. ",
    "summary" : "Returns whether the leftmost angle has the lower value.",
    "title" : "<(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/Decodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Decodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/*=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place. ",
    "summary" : "Transform the value in place.",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/cylinderMapped()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return a copy of the mesh with cylindrically-mapped texture coordinates.  ",
    "summary" : "Return a copy of the mesh with cylindrically-mapped texture coordinates.",
    "title" : "cylinderMapped()"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/distance(from:)-6i5d"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the plane and a PlaneComparable object.  The object to compare with. Return Value The absolute distance between the object and the plane. The value will be positive if the object lies in front or behind the plane, or zero if they intersect.",
    "summary" : "Returns the absolute distance between the plane and a PlaneComparable object.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/rotated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a rotated copy of the value.  A rotation to apply to the value.",
    "summary" : "Returns a rotated copy of the value.",
    "title" : "rotated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/materials"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "All materials used by the mesh. The array may contain nil if some or all of the mesh uses the default material. ",
    "summary" : "All materials used by the mesh. The array may contain nil if some or all of the mesh uses the default material.",
    "title" : "materials"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/intersects(_:)-9r2iu"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the point touches or intersects the receiver.  The point to compare with. Return Value true if the point and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the point touches or intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/rotated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a rotated copy of the value.  A rotation to apply to the value.",
    "summary" : "Returns a rotated copy of the value.",
    "title" : "rotated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/transformed(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value.  A transform to apply to the value.",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "transformed(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/isClosed"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Indicates whether the path is a closed path. ",
    "summary" : "Indicates whether the path is a closed path.",
    "title" : "isClosed"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/init(_:)-r54o"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a bounds from a collection of bounds.  A collection of existing bounds that the bounds contains.",
    "summary" : "Creates a bounds from a collection of bounds.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/init(_:)-7go25"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a vertex from a path point.  The path point to create the vertex from.",
    "summary" : "Creates a vertex from a path point.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/Material-swift.typealias"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Material used by a given polygon. This can be any type that conforms to Hashable, but encoding\/decoding is only supported for the following types: Color, String, Int, Data or any NSSecureCodable type. ",
    "summary" : "Material used by a given polygon. This can be any type that conforms to Hashable, but encoding\/decoding is only supported for the following types: Color, String, Int, Data or any NSSecureCodable type.",
    "title" : "Polygon.Material"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/Bounded-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Bounded Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/polygons"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The polygons that make up the mesh. ",
    "summary" : "The polygons that make up the mesh.",
    "title" : "polygons"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/cylinder(radius:height:slices:poleDetail:faces:wrapMode:material:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a cylindrical mesh.  The radius of the cylinder. The height of the cylinder. The number of vertical slices that make up the cylinder. Optionally add extra detail around poles to prevent texture warping. The direction of the generated polygon faces. The way that texture coordinates are calculated for the cylinder. The optional material for the mesh. ",
    "summary" : "Creates a cylindrical mesh.",
    "title" : "cylinder(radius:height:slices:poleDetail:faces:wrapMode:material:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/customMirror"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomReflectable.customMirror. ",
    "summary" : "Inherited from CustomReflectable.customMirror.",
    "title" : "customMirror"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/intersects(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line intersects the receiver.  The line to compare with. Return Value true if the line and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the line intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(_:_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a vector from the values you provide.  The X component of the vector. The Y component of the vector. The Z component of the vector.",
    "summary" : "Creates a vector from the values you provide.",
    "title" : "init(_:_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(_:materialLookup:)-155xt"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "12.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "26.0",
        "name" : "tvOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Creates a mesh from a RealityKit ModelComponent with optional material mapping.  The ModelComponent to convert into a mesh. An optional closure to map the RealityKit materials to Euclid materials.",
    "summary" : "Creates a mesh from a RealityKit ModelComponent with optional material mapping.",
    "title" : "init(_:materialLookup:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/signedDistance(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the signed distance between the receiver and the specified plane.  The plane to compare with. Return Value The distance between the receiver and the plane. The value is positive if the receiver lies in front of the plane, negative if it lies behind it, or zero if it lies exactly on the plane, or crosses it.",
    "summary" : "Returns the signed distance between the receiver and the specified plane.",
    "title" : "signedDistance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/scale(by:)-5jfow"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A uniform scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/intersection(with:)-3mocl"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point if it intersects the receiver.  The point to compare with. Return Value The nearest point on the receiver that touches the point, or nil otherwise.",
    "summary" : "Returns the nearest point if it intersects the receiver.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/rotate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Rotate the value in place.  A rotation to apply to the value.",
    "summary" : "Rotate the value in place.",
    "title" : "rotate(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/withMaterial(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a copy of the polygon with the specified material.  The replacement material, or nil to remove the material.",
    "summary" : "Creates a copy of the polygon with the specified material.",
    "title" : "withMaterial(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/scaled(by:)-8sjrv"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A vector scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/yz"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A plane located at the origin, aligned with the Y and Z axes. ",
    "summary" : "A plane located at the origin, aligned with the Y and Z axes.",
    "title" : "yz"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/STLFormat\/binary(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Export in binary format. ",
    "summary" : "Export in binary format.",
    "title" : "STLFormat.binary(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/encode(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Encodes this line segment into the given encoder.  The encoder to write data to.",
    "summary" : "Encodes this line segment into the given encoder.",
    "title" : "encode(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/scale(by:)-7pxnt"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A vector scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/init(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new color by decoding from the given decoder.  The decoder to read data from.",
    "summary" : "Creates a new color by decoding from the given decoder.",
    "title" : "init(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/empty"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An empty bounds. ",
    "summary" : "An empty bounds.",
    "title" : "empty"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/init(_:)-8w74j"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a path from a collection of  path points.  An ordered collection of PathPoint making up the path.",
    "summary" : "Creates a path from a collection of  path points.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/min"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The minimum coordinate of the bounds. ",
    "summary" : "The minimum coordinate of the bounds.",
    "title" : "min"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/vertices"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The array of vertices that make up the polygon. ",
    "summary" : "The array of vertices that make up the polygon.",
    "title" : "vertices"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/ExpressibleByArrayLiteral-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ExpressibleByArrayLiteral Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/translate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Translate the value in place.  A translation to apply to the value.",
    "summary" : "Translate the value in place.",
    "title" : "translate(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/SCNMaterialProvider"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A closure that maps a SceneKit material to a Euclid material.  An SCNMaterial material to convert. Return Value A Mesh.Material instance, or nil for the default material.",
    "summary" : "A closure that maps a SceneKit material to a Euclid material.",
    "title" : "Mesh.SCNMaterialProvider"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/*(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value. ",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/_(_:_:)-filj"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable.>(_:_:). ",
    "summary" : "Inherited from Comparable.>(_:_:).",
    "title" : ">(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/_(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a rotation divided by the specified value. ",
    "summary" : "Returns a rotation divided by the specified value.",
    "title" : "\/(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/xz"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A plane located at the origin, aligned with the X and Z axes. ",
    "summary" : "A plane located at the origin, aligned with the X and Z axes.",
    "title" : "xz"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/minowskiSum(along:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the minowskiSum sum of the receiver along the specified edge.  A LineSegment along which to sum the mesh. Return Value A new mesh representing the Minowski sum of the inputs.",
    "summary" : "Computes the minowskiSum sum of the receiver along the specified edge.",
    "title" : "minowskiSum(along:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/inset(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Applies a uniform inset to the faces of the mesh.  The distance by which to inset the polygon faces. Return Value A copy of the mesh, inset by the specified distance. Discussion Passing a negative distance will expand the mesh instead of shrinking it.",
    "summary" : "Applies a uniform inset to the faces of the mesh.",
    "title" : "inset(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/init(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new vector by decoding from the given decoder.  The decoder to read data from.",
    "summary" : "Creates a new vector by decoding from the given decoder.",
    "title" : "init(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/Comparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Comparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/*=(_:_:)-68kkw"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Combines with the specified rotation. ",
    "summary" : "Combines with the specified rotation.",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/magenta"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "magenta"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/identity"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The identity rotation (i.e. no rotation). ",
    "summary" : "The identity rotation (i.e. no rotation).",
    "title" : "identity"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/empty"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An empty path. ",
    "summary" : "An empty path.",
    "title" : "empty"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/translated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a translated copy of the value.  An offset vector to apply to the value.",
    "summary" : "Returns a translated copy of the value.",
    "title" : "translated(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/stlData(colorLookup:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return binary STL data for the mesh.  A closure to map Euclid materials to STL facet colors. Use nil for default mapping. Return Value A Euclid Color value.",
    "summary" : "Return binary STL data for the mesh.",
    "title" : "stlData(colorLookup:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/*=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place. ",
    "summary" : "Transform the value in place.",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/init(_:)-7hvb3"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "10.15",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "26.0",
        "name" : "tvOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Creates a EuclidTransform from a simd matrix.  The simd matrix  to convert into a Euclid transform.",
    "summary" : "Creates a EuclidTransform from a simd matrix.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/_(_:_:)-7i9lp"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable.>(_:_:). ",
    "summary" : "Inherited from Comparable.>(_:_:).",
    "title" : ">(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/*(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value. ",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/cube(center:size:faces:wrapMode:material:)-8t5q8"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an axis-aligned cuboidal mesh.  The center point of the mesh. The size of the cuboid mesh. The direction of the generated polygon faces. The way that texture coordinates are calculated for the cube. The optional material for the mesh. ",
    "summary" : "Creates an axis-aligned cuboidal mesh.",
    "title" : "cube(center:size:faces:wrapMode:material:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/...(_:)-3s6ak"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable....(_:). ",
    "summary" : "Inherited from Comparable....(_:).",
    "title" : "...(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/acos(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an angle representing the trigonometric arc cosine of the value you provide.  The cosine value to use to calculate the angle.",
    "summary" : "Creates an angle representing the trigonometric arc cosine of the value you provide.",
    "title" : "acos(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/debugDescription"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomDebugStringConvertible.debugDescription. ",
    "summary" : "Inherited from CustomDebugStringConvertible.debugDescription.",
    "title" : "debugDescription"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/PointComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PointComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/encode(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Encodes this path into the given encoder.  The encoder to write data to.",
    "summary" : "Encodes this path into the given encoder.",
    "title" : "encode(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/.._(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable...<(_:_:). ",
    "summary" : "Inherited from Comparable...<(_:_:).",
    "title" : "..<(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/CustomReflectable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomReflectable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/Encodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Encodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/intersects(_:)-4fnbt"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line segment intersects the specified bounds.  The bodun to compare with. Return Value true if the line and bounds intersect, and false otherwise.",
    "summary" : "Returns a true if the line segment intersects the specified bounds.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/length"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The length of the line segment. ",
    "summary" : "The length of the line segment.",
    "title" : "length"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/init(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a path point from a vertex.  The vertex to create the point from.",
    "summary" : "Creates a path point from a vertex.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/transform(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place.  A transform to apply to the value.",
    "summary" : "Transform the value in place.",
    "title" : "transform(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/rotate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Rotate the value in place.  A rotation to apply to the value.",
    "summary" : "Rotate the value in place.",
    "title" : "rotate(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/rotated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a rotated copy of the value.  A rotation to apply to the value.",
    "summary" : "Returns a rotated copy of the value.",
    "title" : "rotated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/stlData(format:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return STL data for the mesh. ",
    "summary" : "Return STL data for the mesh.",
    "title" : "stlData(format:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/convexHull(of:material:isCancelled:)-9jzvt"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the convex hull of a set of points.  An set of points to compute the hull around. An optional material to apply to the mesh. Callback used to cancel the operation. ",
    "summary" : "Computes the convex hull of a set of points.",
    "title" : "convexHull(of:material:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/init(degrees:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an Angle from a degrees value.  The angle in degrees.",
    "summary" : "Creates an Angle from a degrees value.",
    "title" : "init(degrees:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/translated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a translated copy of the value.  An offset vector to apply to the value.",
    "summary" : "Returns a translated copy of the value.",
    "title" : "translated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/g"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The green component of the color. ",
    "summary" : "The green component of the color.",
    "title" : "g"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/+(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the sum of two angles. ",
    "summary" : "Returns the sum of two angles.",
    "title" : "+(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/distance(from:)-2e328"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the distance between the vector (representing a position in space) and the specified point.  The point to compare with. Return Value The absolute perpendicular distance between the two points.",
    "summary" : "Returns the distance between the vector (representing a position in space) and the specified point.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/Encodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Encodable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/intersects(_:)-eqdg"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line intersects the receiver.  The line to compare with. Return Value true if the line and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the line intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/_=(_:_:)-j6oq"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable.<=(_:_:). ",
    "summary" : "Inherited from Comparable.<=(_:_:).",
    "title" : "<=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/isIdentity"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Rotation has no effect. ",
    "summary" : "Rotation has no effect.",
    "title" : "isIdentity"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/corners"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The points that make up the corners of the bounds. ",
    "summary" : "The points that make up the corners of the bounds.",
    "title" : "corners"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/.._(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable...<(_:_:). ",
    "summary" : "Inherited from Comparable...<(_:_:).",
    "title" : "..<(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/debugDescription"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomDebugStringConvertible.debugDescription. ",
    "summary" : "Inherited from CustomDebugStringConvertible.debugDescription.",
    "title" : "debugDescription"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/mapVertices(_:)-6evr"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return a copy of the polygon with transformed vertices.  A closure to be applied to each vertex in the polygon. Discussion Since altering the vertices can cause the polygon to become degenerate or non-planar this method returns an array of zero or more polygons constructed from the mapped vertices.",
    "summary" : "Return a copy of the polygon with transformed vertices.",
    "title" : "mapVertices(_:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/convexHull(of:material:isCancelled:)-6u5t9"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the convex hull of a set of path points.  A set of path points to compute the hull around. An optional material to apply to the mesh. Callback used to cancel the operation. Discussion The curvature of the point is currently ignored when calculating hull surface normals.",
    "summary" : "Computes the convex hull of a set of path points.",
    "title" : "convexHull(of:material:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/LineComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "LineComparable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/distance(from:)-2o5e6"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified line.  The line to compare with. Return Value The distance between the receiver and the line. The value is positive if the receiver lies in front or behind the line, or zero if it lies exactly on the line, or crosses it.",
    "summary" : "Returns the absolute distance between the receiver and the specified line.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/STLBinaryOptions\/init(header:zeroNormals:colorLookup:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "init(header:zeroNormals:colorLookup:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/init(_:_:_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new vertex.  The position of the vertex in 3D space. The surface normal for the vertex (defaults to zero). The optional texture coordinates for the vertex (defaults to zero). The optional vertex color (defaults to white).",
    "summary" : "Creates a new vertex.",
    "title" : "init(_:_:_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/smoothingNormals(forAnglesGreaterThan:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Smooth vertex normals for corners with angles greater (more obtuse) than the specified threshold.  The minimum corner angle that should appear smooth. Values should be in the range zero (no smoothing) to pi (smooth all edges).",
    "summary" : "Smooth vertex normals for corners with angles greater (more obtuse) than the specified threshold.",
    "title" : "smoothingNormals(forAnglesGreaterThan:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/offset"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : true,
        "renamed" : "translation",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Deprecated ",
    "summary" : "Deprecated",
    "title" : "offset"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/intersection(_:isCancelled:)-swift.method"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new mesh representing the volume shared by both the mesh parameter and the receiver. If these do not intersect, an empty mesh will be returned.  The mesh to be intersected with this one. Callback used to cancel the operation. Return Value A new mesh representing the intersection of the meshes.  Discussion ",
    "summary" : "Returns a new mesh representing the volume shared by both the mesh parameter and the receiver. If these do not intersect, an empty mesh will be returned.",
    "title" : "intersection(_:isCancelled:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A color in RGBA format.   Overview Color can be used as a material or as a color.",
    "summary" : "A color in RGBA format.",
    "title" : "Color"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/scaled(by:)-350oy"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A uniform scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/unitZ"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A vector of length 1 along the Z axis. ",
    "summary" : "A vector of length 1 along the Z axis.",
    "title" : "unitZ"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/CustomDebugStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomDebugStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/Encodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Encodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/init(scale:rotation:translation:)-3r4ze"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new transform with a uniform scale factor  The scaling factor of the transform. Defaults to 1.0 (no scale adjustment). The translation or position component of the transform. Defaults to identity (no rotation). The translation or position component of the transform. Defaults to zero (no translation).",
    "summary" : "Creates a new transform with a uniform scale factor",
    "title" : "init(scale:rotation:translation:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/orange"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "orange"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/debugDescription"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomDebugStringConvertible.debugDescription. ",
    "summary" : "Inherited from CustomDebugStringConvertible.debugDescription.",
    "title" : "debugDescription"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transformable\/scaled(by:)-3shbk"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A vector scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/scale(by:)-1hyw0"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A uniform scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/init(_:)-4z4uf"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a bounds from a heterogeneous collection of Bounded objects.  A collection of bounded objects.",
    "summary" : "Creates a bounds from a heterogeneous collection of Bounded objects.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/PointComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PointComparable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/distance(from:)-6cs2x"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the distance between the receiver and the specified point.  The point to compare with. Return Value The distance between the receiver and the point. The value is always positive if the receiver is not touching the point, or zero if it touches or intersects the point.",
    "summary" : "Returns the distance between the receiver and the specified point.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/translate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Translate the value in place.  A translation to apply to the value.",
    "summary" : "Translate the value in place.",
    "title" : "translate(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/intersects(_:)-9jmqh"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the point touches or intersects the receiver.  The point to compare with. Return Value true if the point and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the point touches or intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/transformed(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value.  A transform to apply to the value.",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "transformed(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/Encodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Encodable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/reflected(along:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Reflects each polygon of the mesh along a plane.  The Plane against which the vertices are to be reflected. Return Value A Mesh representing the reflected mesh.",
    "summary" : "Reflects each polygon of the mesh along a plane.",
    "title" : "reflected(along:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/init(shape:material:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a single polygon from a path.  The Path to convert to a polygon. An optional Polygon.Material to apply to the polygon. Discussion Path may be convex or concave, but must be closed, planar and non-degenerate, and must not include subpaths. For a non-planar path, or one with subpaths, use facePolygons(material:).",
    "summary" : "Creates a single polygon from a path.",
    "title" : "init(shape:material:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/subdivide()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Subdivides triangles and quads, leaving other polygons unchanged. ",
    "summary" : "Subdivides triangles and quads, leaving other polygons unchanged.",
    "title" : "subdivide()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/*=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Multiplies the angle by a numeric value. ",
    "summary" : "Multiplies the angle by a numeric value.",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/init(_:)-5bh7b"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a bounds from two SceneKit vectors.  A tuple of two SCNVector3 that represent opposite corners of the bounding box volume.",
    "summary" : "Creates a bounds from two SceneKit vectors.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/rotated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a rotated copy of the value.  A rotation to apply to the value.",
    "summary" : "Returns a rotated copy of the value.",
    "title" : "rotated(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/distance(from:)-3eglz"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified line.  The line to compare with. Return Value The distance between the receiver and the line. The value is positive if the receiver lies in front or behind the line, or zero if it lies exactly on the line, or crosses it.",
    "summary" : "Returns the absolute distance between the receiver and the specified line.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/...(_:)-8feph"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable....(_:). ",
    "summary" : "Inherited from Comparable....(_:).",
    "title" : "...(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/isPlanar"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Indicates whether all the path’s points lie on a single plane. ",
    "summary" : "Indicates whether all the path’s points lie on a single plane.",
    "title" : "isPlanar"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/init(undirected:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an ‘undirected’ line segment. Undirected segments have a normalized direction such that a -> b and b -> a are equal\/equivalent.  One end of the line segment. The other end of the line segment.",
    "summary" : "Creates an ‘undirected’ line segment. Undirected segments have a normalized direction such that a -> b and b -> a are equal\/equivalent.",
    "title" : "init(undirected:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/STLTextOptions\/indent"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A whitespace string to use as the indent value. ",
    "summary" : "A whitespace string to use as the indent value.",
    "title" : "indent"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/codableClasses"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Supported NSSecureCodable Material base classes. ",
    "summary" : "Supported NSSecureCodable Material base classes.",
    "title" : "codableClasses"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/undirectedEdges"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An unordered set of path edges. The direction of each edge is normalized relative to the origin to simplify edge-equality comparisons. ",
    "summary" : "An unordered set of path edges. The direction of each edge is normalized relative to the origin to simplify edge-equality comparisons.",
    "title" : "undirectedEdges"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/Decodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Decodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounded\/bounds"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The bounds of the object. ",
    "summary" : "The bounds of the object.",
    "title" : "bounds"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/x"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The X component of the vector. ",
    "summary" : "The X component of the vector.",
    "title" : "x"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/init(scale:rotation:translation:)-62ups"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new transform.  The scaling component of the transform. Defaults to one (no scale adjustment). The translation or position component of the transform. Defaults to identity (no rotation). The translation or position component of the transform. Defaults to zero (no translation).",
    "summary" : "Creates a new transform.",
    "title" : "init(scale:rotation:translation:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/CustomReflectable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomReflectable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/translation"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The translation or position component of the transform. ",
    "summary" : "The translation or position component of the transform.",
    "title" : "translation"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/STLFormat\/text(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Export in ASCII format. ",
    "summary" : "Export in ASCII format.",
    "title" : "STLFormat.text(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/withColor(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a copy of the vertex with the specified color.  The color to apply to the vertex.",
    "summary" : "Creates a copy of the vertex with the specified color.",
    "title" : "withColor(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/init(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a color from a luminance value and optional alpha component.  The luminance value, from 0 to 1. The alpha component. Defaults to 1 (fully opaque)",
    "summary" : "Creates a color from a luminance value and optional alpha component.",
    "title" : "init(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/transformed(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value.  A transform to apply to the value.",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "transformed(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/tan(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the trigonometric tangent of an angle.  The angle to calculate the tangent for. Return Value The trigonometric tangent of the angle.",
    "summary" : "Computes the trigonometric tangent of an angle.",
    "title" : "tan(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PlaneComparison\/init(rawValue:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from RawRepresentable.init(rawValue:). ",
    "summary" : "Inherited from RawRepresentable.init(rawValue:).",
    "title" : "init(rawValue:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new identity rotation. ",
    "summary" : "Creates a new identity rotation.",
    "title" : "init()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/convexHull(of:material:isCancelled:)-6ayc1"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the convex hull of a set of line segments.  A set of line segments to compute the hull around. An optional material to apply to the mesh. Callback used to cancel the operation.",
    "summary" : "Computes the convex hull of a set of line segments.",
    "title" : "convexHull(of:material:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/convexHull(of:material:isCancelled:)-5b6nc"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the convex hull of a set of paths.  A set of paths to compute the hull around. An optional material to apply to the mesh. Callback used to cancel the operation.",
    "summary" : "Computes the convex hull of a set of paths.",
    "title" : "convexHull(of:material:isCancelled:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/clipped(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Clip line segment to the specified plane.  The Plane  to clip the segment to. Return Value The clipped line segment, or nil if the segment lies entirely behind the plane. Discussion If the segment is coincident with the plane it will be treated as being behind the plane.",
    "summary" : "Clip line segment to the specified plane.",
    "title" : "clipped(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/right"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A normalized direction vector pointing rightwards relative to the current rotation. ",
    "summary" : "A normalized direction vector pointing rightwards relative to the current rotation.",
    "title" : "right"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/translated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a translated copy of the value.  An offset vector to apply to the value.",
    "summary" : "Returns a translated copy of the value.",
    "title" : "translated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transformable\/*(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value. ",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(_:)-7u5xi"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a Vector from a simd vector 3.  A simd vector.",
    "summary" : "Creates a Vector from a simd vector 3.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/translate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Translate the value in place.  A translation to apply to the value.",
    "summary" : "Translate the value in place.",
    "title" : "translate(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/Transformable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Transformable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/encode(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Encodes this vertex into the given encoder.  The encoder to write data to.",
    "summary" : "Encodes this vertex into the given encoder.",
    "title" : "encode(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/WrapMode\/tube"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Texture is tube-wrapped. ",
    "summary" : "Texture is tube-wrapped.",
    "title" : "Mesh.WrapMode.tube"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/degrees"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The angle in degrees. ",
    "summary" : "The angle in degrees.",
    "title" : "degrees"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/init(_:)-27jri"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a bounds from a collection of points.  A collection of points that the bounds contains.",
    "summary" : "Creates a bounds from a collection of points.",
    "title" : "init(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/intersects(_:)-6gem2"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line intersects the receiver.  The line to compare with. Return Value true if the line and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the line intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init(roll:yaw:pitch:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a rotation from Euler angles applied in roll\/yaw\/pitch order.  The angle of rotation around the Z axis. This is applied first. The angle of rotation around the Y axis. This is applied second. The angle of rotation around the X axis. This is applied last.",
    "summary" : "Creates a rotation from Euler angles applied in roll\/yaw\/pitch order.",
    "title" : "init(roll:yaw:pitch:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/intersection(with:)-3tcin"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point if it intersects the receiver.  The point to compare with. Return Value The nearest point on the receiver that touches the point, or nil otherwise.",
    "summary" : "Returns the nearest point if it intersects the receiver.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/LineComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "LineComparable Implementations"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A path made up of a sequence of straight line segments between points.   Overview A Path can be either open (a polyline) or closed (a polygon), but should not be self-intersecting or otherwise degenerate. A path may be formed from multiple subpaths, which can be accessed via the subpaths property. A closed Path can be converted to one or more Polygons, but it can also be used for other purposes, such as defining a cross-section or profile of a 3D shape. Paths are typically 2-dimensional, but because PathPoint positions have a Z coordinate, they are not required to be. Even a flat Path (where all points lie on the same plane) can be translated or rotated so that its points do not necessarily lie on the XY plane.",
    "summary" : "A path made up of a sequence of straight line segments between points.",
    "title" : "Path"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/nearestPoint(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point on the receiver to the specified point.  The point to compare with. Return Value The nearest point on the receiver to the specified point.",
    "summary" : "Returns the nearest point on the receiver to the specified point.",
    "title" : "nearestPoint(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/description"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomStringConvertible.description. ",
    "summary" : "Inherited from CustomStringConvertible.description.",
    "title" : "description"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/isEmpty"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A Boolean value that indicates whether the bounds is empty (has zero volume). ",
    "summary" : "A Boolean value that indicates whether the bounds is empty (has zero volume).",
    "title" : "isEmpty"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/intersects(_:)-76jp5"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the point touches or intersects the receiver.  The point to compare with. Return Value true if the point and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the point touches or intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/scaled(by:)-6q4xr"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A uniform scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(_:)-6nlm"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new vector from a CoreGraphics size.  The CoreGraphics size.",
    "summary" : "Creates a new vector from a CoreGraphics size.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/inverted()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the flip-side of the plane. ",
    "summary" : "Returns the flip-side of the plane.",
    "title" : "inverted()"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/interpolated(with:by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Interpolatable.interpolated(with:by:).  Discussion Interpolation is applied to the texture coordinate and color, as well as the position.",
    "summary" : "Inherited from Interpolatable.interpolated(with:by:).",
    "title" : "interpolated(with:by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/normalized()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a normalized vector.  Return Value The normalized vector (with a length of 1) or the zero vector if the length is 0.",
    "summary" : "Returns a normalized vector.",
    "title" : "normalized()"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/split(along:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Split the line segment along a plane.  The Plane to split the line segment along. Return Value A pair of segments representing the parts of the line segment in front and behind the plane. Discussion If the segment is coincident with the plane it will be treated as being behind the plane.",
    "summary" : "Split the line segment along a plane.",
    "title" : "split(along:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/*=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place. ",
    "summary" : "Transform the value in place.",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transformable\/transformed(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value.  A transform to apply to the value.",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "transformed(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/WrapMode\/default"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The default wrap behavior. Context-dependent. ",
    "summary" : "The default wrap behavior. Context-dependent.",
    "title" : "Mesh.WrapMode.default"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PlaneComparison"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The relationship between a point or shape and a plane. ",
    "summary" : "The relationship between a point or shape and a plane.",
    "title" : "PlaneComparison"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/scale(by:)-55r4j"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A uniform scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/mapColors(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return a copy of the polygon with transformed vertex colors  A closure to be applied to each color in the path.",
    "summary" : "Return a copy of the polygon with transformed vertex colors",
    "title" : "mapColors(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/rotated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a rotated copy of the value.  A rotation to apply to the value.",
    "summary" : "Returns a rotated copy of the value.",
    "title" : "rotated(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/intersects(_:)-1yz1c"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the point touches or intersects the receiver.  The point to compare with. Return Value true if the point and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the point touches or intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/Interpolatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Interpolatable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/intersects(_:)-8wr1y"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line intersects the receiver.  The line to compare with. Return Value true if the line and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the line intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/WrapMode\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/*(_:_:)-8l78z"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the product of an angle and numeric multiplier. ",
    "summary" : "Returns the product of an angle and numeric multiplier.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/stencil(_:isCancelled:)-swift.method"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new mesh that retains the shape of the receiver, but with the intersecting area colored using material from the parameter.  The mesh to be stencilled onto this one. Callback used to cancel the operation. Return Value A new mesh representing the result of stencilling.  Discussion ",
    "summary" : "Returns a new mesh that retains the shape of the receiver, but with the intersecting area colored using material from the parameter.",
    "title" : "stencil(_:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init(pitch:yaw:roll:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a rotation from Euler angles applied in pitch\/yaw\/roll order.  The angle of rotation around the X axis. This is applied first. The angle of rotation around the Y axis. This is applied second. The angle of rotation around the Z axis. This is applied last.",
    "summary" : "Creates a rotation from Euler angles applied in pitch\/yaw\/roll order.",
    "title" : "init(pitch:yaw:roll:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/STLBinaryOptions"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Configuration options for binary STL export. ",
    "summary" : "Configuration options for binary STL export.",
    "title" : "STLBinaryOptions"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/intersects(_:)-1nvd3"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the point touches or intersects the receiver.  The point to compare with. Return Value true if the point and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the point touches or intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/interpolated(with:by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Interpolate between two values.  The value to interpolate towards. The extent of the interpolation, from 0 - 1 (unclamped) Return Value The interpolated value.",
    "summary" : "Interpolate between two values.",
    "title" : "interpolated(with:by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/scaled(by:)-94kks"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A uniform scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/CustomStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/encode(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Encodes this polygon into the given encoder.  The encoder to write data to.",
    "summary" : "Encodes this polygon into the given encoder.",
    "title" : "encode(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/end"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The end point of the line segment. ",
    "summary" : "The end point of the line segment.",
    "title" : "end"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/encode(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Encodes this plane into the given encoder.  The encoder to write data to.",
    "summary" : "Encodes this plane into the given encoder.",
    "title" : "encode(to:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/signedDistance(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the signed distance between the receiver and the specified plane.  The plane to compare with. Return Value The distance between the receiver and the plane. The value is positive if the receiver lies in front of the plane, negative if it lies behind it, or zero if it lies exactly on the plane, or crosses it.",
    "summary" : "Returns the signed distance between the receiver and the specified plane.",
    "title" : "signedDistance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/unitX"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A vector of length 1 along the X axis. ",
    "summary" : "A vector of length 1 along the X axis.",
    "title" : "unitX"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/withMaterial(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a copy of the mesh with the new material applied to all polygons. ",
    "summary" : "Returns a copy of the mesh with the new material applied to all polygons.",
    "title" : "withMaterial(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/pitch"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The angle of rotation around the X-axis. ",
    "summary" : "The angle of rotation around the X-axis.",
    "title" : "pitch"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/scale(by:)-677dp"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A vector scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/intersects(_:)-10qav"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Determines if the receiver intersects the specified plane.  The plane to compare with. Return Value true if the receiver intersects the plane, and false otherwise.",
    "summary" : "Determines if the receiver intersects the specified plane.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/scale(by:)-1h2f7"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A uniform scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PlaneComparable\/signedDistance(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the signed distance between the receiver and the specified plane.  The plane to compare with. Return Value The distance between the receiver and the plane. The value is positive if the receiver lies in front of the plane, negative if it lies behind it, or zero if it lies exactly on the plane, or crosses it.",
    "summary" : "Returns the signed distance between the receiver and the specified plane.",
    "title" : "signedDistance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/PointComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PointComparable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PlaneComparable\/distance(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified plane.  The plane to compare with. Return Value The absolute distance between the receiver and the plane. The value will be positive if the receiver lies in front or behind the plane, or zero if they intersect.",
    "summary" : "Returns the absolute distance between the receiver and the specified plane.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/compare(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The relationship between the receiver and the specified plane.  The plane to compare with. Return Value The PlaneComparison between the receiver and the plane.",
    "summary" : "The relationship between the receiver and the specified plane.",
    "title" : "compare(with:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/isEmpty"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A Boolean value that indicates whether the mesh is empty (has no polygons).  Discussion This is not the same as checking if the mesh is watertight or has zero volume",
    "summary" : "A Boolean value that indicates whether the mesh is empty (has no polygons).",
    "title" : "isEmpty"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/init(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new line by decoding from the given decoder.  The decoder to read data from.",
    "summary" : "Creates a new line by decoding from the given decoder.",
    "title" : "init(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/debugDescription"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomDebugStringConvertible.debugDescription. ",
    "summary" : "Inherited from CustomDebugStringConvertible.debugDescription.",
    "title" : "debugDescription"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/formUnion(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Expands this bounds (if necessary) to contain the specified bounds.  The bounds to be included.",
    "summary" : "Expands this bounds (if necessary) to contain the specified bounds.",
    "title" : "formUnion(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/...(_:)-14arr"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable....(_:). ",
    "summary" : "Inherited from Comparable....(_:).",
    "title" : "...(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/cross(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the cross-product of this vector and another.  The vector with which to compute the cross product. Return Value Returns a vector that is orthogonal to the two vectors used to compute the cross product.",
    "summary" : "Computes the cross-product of this vector and another.",
    "title" : "cross(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/Alignment"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Alignment mode to use when extruding along a path. ",
    "summary" : "Alignment mode to use when extruding along a path.",
    "title" : "Path.Alignment"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/facePolygons(material:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns one or more polygons needed to fill the path.  An optional Polygon.Material to apply to the polygons. Return Value An array of polygons needed to fill the path, or an empty array if path is not closed. Discussion Polygon normals are calculated automatically based on the curvature of the path points. If the path points do not include textcoords, they will be calculated automatically based on the path point positions relative to the bounding rectangle of the path.",
    "summary" : "Returns one or more polygons needed to fill the path.",
    "title" : "facePolygons(material:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/init(_:color:)-5lnql"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a path from a line segment.  The LineSegment defining the path. An optional Color to apply to the path’s points.",
    "summary" : "Creates a path from a line segment.",
    "title" : "init(_:color:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/one"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A vector with all coordinates set to 1. ",
    "summary" : "A vector with all coordinates set to 1.",
    "title" : "one"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/_(_:_:)-9obdn"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns whether the leftmost vector has the lower value. This provides a stable order when sorting collections of vectors. ",
    "summary" : "Returns whether the leftmost vector has the lower value. This provides a stable order when sorting collections of vectors.",
    "title" : "<(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/CancellationHandler"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Callback used to cancel a long-running operation.  Return Value true if operation should be cancelled, or false otherwise.",
    "summary" : "Callback used to cancel a long-running operation.",
    "title" : "Polygon.CancellationHandler"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/PointComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PointComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/*(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value. ",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/scale(by:)-6c0wl"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A vector scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/plane"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The plane upon which all path points lie. Will be nil for non-planar paths. ",
    "summary" : "The plane upon which all path points lie. Will be nil for non-planar paths.",
    "title" : "plane"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/texcoord"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Texture coordinates for the vertex. Set this to zero if you are not using a texture map. ",
    "summary" : "Texture coordinates for the vertex. Set this to zero if you are not using a texture map.",
    "title" : "texcoord"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/nearestPoint(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point on the receiver to the specified point.  The point to compare with. Return Value The nearest point on the receiver to the specified point.",
    "summary" : "Returns the nearest point on the receiver to the specified point.",
    "title" : "nearestPoint(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/material-swift.property"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An optional Polygon.Material associated with the polygon.  ",
    "summary" : "An optional Polygon.Material associated with the polygon.",
    "title" : "material"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/length"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The magnitude of the vector. ",
    "summary" : "The magnitude of the vector.",
    "title" : "length"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/debugDescription"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomDebugStringConvertible.debugDescription. ",
    "summary" : "Inherited from CustomDebugStringConvertible.debugDescription.",
    "title" : "debugDescription"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/scaled(by:)-6epo6"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A uniform scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/rotate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Rotate the value in place.  A rotation to apply to the value.",
    "summary" : "Rotate the value in place.",
    "title" : "rotate(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/debugDescription"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomDebugStringConvertible.debugDescription. ",
    "summary" : "Inherited from CustomDebugStringConvertible.debugDescription.",
    "title" : "debugDescription"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineComparable\/distance(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified line.  The line to compare with. Return Value The distance between the receiver and the line. The value is positive if the receiver lies in front or behind the line, or zero if it lies exactly on the line, or crosses it.",
    "summary" : "Returns the absolute distance between the receiver and the specified line.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PlaneComparison\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/extrude(_:depth:twist:sections:faces:material:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a mesh by extruding a path along its face normal.  The path to extrude in order to create the mesh. The depth of the extrusion. Angular twist to apply along the extrusion. Number of sections to create along extrusion. The direction of the generated polygon faces. The optional material for the mesh.",
    "summary" : "Creates a mesh by extruding a path along its face normal.",
    "title" : "extrude(_:depth:twist:sections:faces:material:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/nearestPoint(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point on the receiver to the specified point.  The point to compare with. Return Value The nearest point on the receiver to the specified point.",
    "summary" : "Returns the nearest point on the receiver to the specified point.",
    "title" : "nearestPoint(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/.._(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable...<(_:_:). ",
    "summary" : "Inherited from Comparable...<(_:_:).",
    "title" : "..<(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/direction"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The direction of the line segment as a normalized vector. ",
    "summary" : "The direction of the line segment as a normalized vector.",
    "title" : "direction"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/init(start:end:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a line segment with a start and end point.  The start of the line segment. The end of the line segment.",
    "summary" : "Creates a line segment with a start and end point.",
    "title" : "init(start:end:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/split(along:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Split the path along a plane.  The Plane to split the path along. Return Value A pair of paths representing the path fragments that lie in front and behind the plane . Discussion If the path and plane do not intersect, one of the returned paths will be empty.",
    "summary" : "Split the path along a plane.",
    "title" : "split(along:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/Interpolatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Interpolatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/position"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The position of the vertex. ",
    "summary" : "The position of the vertex.",
    "title" : "position"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/debugDescription"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomDebugStringConvertible.debugDescription. ",
    "summary" : "Inherited from CustomDebugStringConvertible.debugDescription.",
    "title" : "debugDescription"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/PointComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PointComparable Implementations"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/faceNormal"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The face normal for the path.  Discussion If path is non-planar then this returns an average\/approximate normal.",
    "summary" : "The face normal for the path.",
    "title" : "faceNormal"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/customMirror"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomReflectable.customMirror. ",
    "summary" : "Inherited from CustomReflectable.customMirror.",
    "title" : "customMirror"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/encode(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Encodes this mesh into the given encoder.  The encoder to write data to.",
    "summary" : "Encodes this mesh into the given encoder.",
    "title" : "encode(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/init(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new line from the specified line segment.  A segment somewhere on the line.",
    "summary" : "Creates a new line from the specified line segment.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/Encodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Encodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/submeshes"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The distinct (disconnected) submeshes that make up the mesh. ",
    "summary" : "The distinct (disconnected) submeshes that make up the mesh.",
    "title" : "submeshes"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/intersects(_:)-4b1z8"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line segment intersects the specified line.  The lineSegment to compare with. Return Value true if the line and segment intersect, and false otherwise.",
    "summary" : "Returns a true if the line segment intersects the specified line.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/extrusionContours(along:twist:align:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an array of contours by extruding one path along another path.  The path along which to extrude the shape. Angular twist to apply along the extrusion. The alignment mode to use for the extruded shape.",
    "summary" : "Creates an array of contours by extruding one path along another path.",
    "title" : "extrusionContours(along:twist:align:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/withColor(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Replace\/remove point color.  The color to apply to the point.",
    "summary" : "Replace\/remove point color.",
    "title" : "withColor(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init(yaw:pitch:roll:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a rotation from Euler angles applied in yaw\/pitch\/roll order.  The angle of rotation around the Y axis. This is applied first. The angle of rotation around the X axis. This is applied second. The angle of rotation around the Z axis. This is applied last.",
    "summary" : "Creates a rotation from Euler angles applied in yaw\/pitch\/roll order.",
    "title" : "init(yaw:pitch:roll:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/transformed(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value.  A transform to apply to the value.",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "transformed(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/signedDistance(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the signed distance between the receiver and the specified plane.  The plane to compare with. Return Value The distance between the receiver and the plane. The value is positive if the receiver lies in front of the plane, negative if it lies behind it, or zero if it lies exactly on the plane, or crosses it.",
    "summary" : "Returns the signed distance between the receiver and the specified plane.",
    "title" : "signedDistance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/CustomDebugStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomDebugStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(url:materialLookup:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Loads a mesh from a file, with optional material mapping.  The URL of the file to be loaded. A closure to map format-specific materials to Euclid materials. Use nil for default mapping.",
    "summary" : "Loads a mesh from a file, with optional material mapping.",
    "title" : "init(url:materialLookup:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new mesh from an array of polygons.  The polygons making up the mesh.",
    "summary" : "Creates a new mesh from an array of polygons.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A combined rotation, position, and scale that can be applied to a 3D object.  Overview Working with intermediate transform objects instead of directly updating the vertex positions of a mesh is more efficient and avoids a buildup of rounding errors.",
    "summary" : "A combined rotation, position, and scale that can be applied to a 3D object.",
    "title" : "Transform"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/translated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a translated copy of the value.  An offset vector to apply to the value.",
    "summary" : "Returns a translated copy of the value.",
    "title" : "translated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/zero"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Angle representing a zero (identity) rotation. ",
    "summary" : "Angle representing a zero (identity) rotation.",
    "title" : "zero"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/blue"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "blue"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/_(_:_:)-34kn9"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the angle divided by a numeric denominator. ",
    "summary" : "Returns the angle divided by a numeric denominator.",
    "title" : "\/(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/lengthAndDirection"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The length and direction of the line segment. ",
    "summary" : "The length and direction of the line segment.",
    "title" : "lengthAndDirection"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/signedDistance(from:)-8apl1"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the signed distance between the plane and a PlaneComparable object.  The object to compare with. Return Value The distance between the object and the plane. The value will be positive if the object lies in front of the plane, negative if it lies behind it, or zero if it lies exactly on the plane, or crosses it.",
    "summary" : "Returns the signed distance between the plane and a PlaneComparable object.",
    "title" : "signedDistance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/*=(_:_:)-7u9hf"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Multiplies the rotation angle by the specified value. ",
    "summary" : "Multiplies the rotation angle by the specified value.",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/scaled(by:)-5dvvh"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A vector scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/Alignment\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/PlaneComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PlaneComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(submeshes:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a composite mesh from an array of submeshes.  An array of meshes.",
    "summary" : "Creates a composite mesh from an array of submeshes.",
    "title" : "init(submeshes:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/orderedEdges"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the ordered array of polygon edges. ",
    "summary" : "Returns the ordered array of polygon edges.",
    "title" : "orderedEdges"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PlaneComparable"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Protocol for plane-comparable types. ",
    "summary" : "Protocol for plane-comparable types.",
    "title" : "PlaneComparable"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transformable\/scaled(by:)-5p6di"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A uniform scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/signedDistance(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the signed distance between the receiver and the specified plane.  The plane to compare with. Return Value The distance between the receiver and the plane. The value is positive if the receiver lies in front of the plane, negative if it lies behind it, or zero if it lies exactly on the plane, or crosses it.",
    "summary" : "Returns the signed distance between the receiver and the specified plane.",
    "title" : "signedDistance(from:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/intersection(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point if it intersects the receiver.  The point to compare with. Return Value The nearest point on the receiver that touches the point, or nil otherwise.",
    "summary" : "Returns the nearest point if it intersects the receiver.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/distance(from:)-27q5u"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified line.  The line to compare with. Return Value The distance between the receiver and the line. The value is positive if the receiver lies in front or behind the line, or zero if it lies exactly on the line, or crosses it.",
    "summary" : "Returns the absolute distance between the receiver and the specified line.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/encode(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Encodes this color into the given encoder.  The encoder to write data to.",
    "summary" : "Encodes this color into the given encoder.",
    "title" : "encode(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/init(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new path by decoding from the given decoder.  The decoder to read data from.",
    "summary" : "Creates a new path by decoding from the given decoder.",
    "title" : "init(from:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/union(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new bounds that contains both the specified bounds and this one.  The other bounds to be included. Return Value The combined bounds.",
    "summary" : "Creates a new bounds that contains both the specified bounds and this one.",
    "title" : "union(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/init(_:)-cys2"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "13.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "10.15",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "26.0",
        "name" : "tvOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Creates a EuclidTransform from a RealityKit Transform.  The RealityKit transform  to convert into a Euclid transform.",
    "summary" : "Creates a EuclidTransform from a RealityKit Transform.",
    "title" : "init(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/closed()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Closes the path by joining last point to first.  Return Value A new path, or self if the path is already closed, or cannot be closed.",
    "summary" : "Closes the path by joining last point to first.",
    "title" : "closed()"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/convexHull(of:isCancelled:)-98ry4"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Efficiently computes the convex hull of one or more meshes.  A collection of meshes to compute a hull around. Callback used to cancel the operation. Return Value A new mesh representing the convex hull around the inputs.",
    "summary" : "Efficiently computes the convex hull of one or more meshes.",
    "title" : "convexHull(of:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/flatteningNormals()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Flatten vertex normals (set them to match the face normals of each polygon). ",
    "summary" : "Flatten vertex normals (set them to match the face normals of each polygon).",
    "title" : "flatteningNormals()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/containsPoint(_:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : true,
        "renamed" : "intersects(_:)",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Deprecated. ",
    "summary" : "Deprecated.",
    "title" : "containsPoint(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/Alignment\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/compare(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The relationship between the receiver and the specified plane.  The plane to compare with. Return Value The PlaneComparison between the receiver and the plane.",
    "summary" : "The relationship between the receiver and the specified plane.",
    "title" : "compare(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Faces\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/...(_:)-49h2f"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable....(_:). ",
    "summary" : "Inherited from Comparable....(_:).",
    "title" : "...(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/rotate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Rotate the value in place.  A rotation to apply to the value.",
    "summary" : "Rotate the value in place.",
    "title" : "rotate(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/intersects(_:)-5v6ed"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line intersects the receiver.  The line to compare with. Return Value true if the line and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the line intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/hasVertexColors"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A Boolean value that indicates whether the polygon includes vertex colors that differ from the face normal. ",
    "summary" : "A Boolean value that indicates whether the polygon includes vertex colors that differ from the face normal.",
    "title" : "hasVertexColors"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/inverted()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new vertex with the normal inverted. ",
    "summary" : "Returns a new vertex with the normal inverted.",
    "title" : "inverted()"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/union(_:isCancelled:)-swift.type.method"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Efficiently forms a union from multiple meshes.  A collection of meshes to be unioned. Callback used to cancel the operation. Return Value A new mesh representing the union of the input meshes.",
    "summary" : "Efficiently forms a union from multiple meshes.",
    "title" : "union(_:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/IOError\/CustomNSError-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomNSError Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/init(_:)-25eby"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a color from a CoreGraphics CGColor.  The CoreGraphics color instance.",
    "summary" : "Creates a color from a CoreGraphics CGColor.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/bounds"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The bounds of the mesh. ",
    "summary" : "The bounds of the mesh.",
    "title" : "bounds"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/surfaceArea"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The surface area of the mesh. Does not include polygon back-faces. ",
    "summary" : "The surface area of the mesh. Does not include polygon back-faces.",
    "title" : "surfaceArea"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/STLMaterialProvider"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A closure that maps an STL facet color to a Euclid material.  A Euclid Color to convert, or nil for the default color. Return Value A Euclid Material value, or nil for the default material.",
    "summary" : "A closure that maps an STL facet color to a Euclid material.",
    "title" : "Mesh.STLMaterialProvider"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/AdditiveArithmetic-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "AdditiveArithmetic Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/tessellate(maxSides:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Splits all polygons in the mesh that are concave or have more than the specified number of sides into two or more convex polygons.  The maximum number of sides each polygon may have. Return Value A new mesh containing the convex polygons.",
    "summary" : "Splits all polygons in the mesh that are concave or have more than the specified number of sides into two or more convex polygons.",
    "title" : "tessellate(maxSides:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/subtracting(_:isCancelled:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new mesh created by subtracting the volume of the mesh parameter from the receiver.  The mesh to subtract from this one. Callback used to cancel the operation. Return Value A new mesh representing the result of the subtraction.  Discussion ",
    "summary" : "Returns a new mesh created by subtracting the volume of the mesh parameter from the receiver.",
    "title" : "subtracting(_:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/text(_:width:depth:detail:material:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an extruded text model from an attributed string  The text to convert into a model The optional width at which to line-wrap the text. The depth of the extruded text. The number line segments used to approximate glyph curves. Optional material to apply to the mesh.",
    "summary" : "Creates an extruded text model from an attributed string",
    "title" : "text(_:width:depth:detail:material:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/*(_:_:)-48gl1"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a vector with its components multiplied by the specified value. ",
    "summary" : "Returns a vector with its components multiplied by the specified value.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(_:materials:)-2xnt3"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "12.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "26.0",
        "name" : "tvOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Creates a mesh from a RealityKit MeshResource.Model.  The MeshResource.Model to convert into a mesh. An array of materials to apply to the mesh.",
    "summary" : "Creates a mesh from a RealityKit MeshResource.Model.",
    "title" : "init(_:materials:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/uniqueEdges"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The unique polygon edges in the mesh. The direction of each edge is normalized relative to the origin to simplify edge-equality comparisons. ",
    "summary" : "The unique polygon edges in the mesh. The direction of each edge is normalized relative to the origin to simplify edge-equality comparisons.",
    "title" : "uniqueEdges"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/init(normal:pointOnPlane:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a plane from a point and surface normal.  The surface normal of the plane. An arbitrary point on the plane.",
    "summary" : "Creates a plane from a point and surface normal.",
    "title" : "init(normal:pointOnPlane:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/inset(by:)-49ykf"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new bounds inset by the specified distance.  The distance to inset the bounds by. Use negative values to expand the bounds. Return Value The inset bounds.",
    "summary" : "Returns a new bounds inset by the specified distance.",
    "title" : "inset(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/intersection(with:)-2nysu"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the point where the specified line intersects this one.  The line to compare with. Return Value The point of intersection, or nil if the lines don’t intersect.",
    "summary" : "Returns the point where the specified line intersects this one.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PlaneComparison\/spanning"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The shape spans the plane (some points are in front, some behind). ",
    "summary" : "The shape spans the plane (some points are in front, some behind).",
    "title" : "PlaneComparison.spanning"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/translate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Translate the value in place.  A translation to apply to the value.",
    "summary" : "Translate the value in place.",
    "title" : "translate(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/encode(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Encodes this rotation into the given encoder.  The encoder to write data to.",
    "summary" : "Encodes this rotation into the given encoder.",
    "title" : "encode(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/_=(_:_:)-8q2nt"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable.<=(_:_:). ",
    "summary" : "Inherited from Comparable.<=(_:_:).",
    "title" : "<=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transformable\/rotate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Rotate the value in place.  A rotation to apply to the value.",
    "summary" : "Rotate the value in place.",
    "title" : "rotate(by:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(_:)-3hpag"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a vector from an array of coordinates.  An array of vector components. Discussion Omitted values default to 0 and extra components are ignored.",
    "summary" : "Creates a vector from an array of coordinates.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/rotation(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a rotation transform.  A rotation to apply.",
    "summary" : "Creates a rotation transform.",
    "title" : "rotation(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PlaneComparison\/coplanar"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "All points in the shape lie on the plane. ",
    "summary" : "All points in the shape lie on the plane.",
    "title" : "PlaneComparison.coplanar"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/convexHull(of:material:isCancelled:)-2otb6"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the convex hull of a set of vertices.  A set of vertices to compute the hull around. An optional material to apply to the mesh. Callback used to cancel the operation.",
    "summary" : "Computes the convex hull of a set of vertices.",
    "title" : "convexHull(of:material:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/unitY"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A vector of length 1 along the Y axis. ",
    "summary" : "A vector of length 1 along the Y axis.",
    "title" : "unitY"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/mapVertices(_:)-3k938"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : true,
        "message" : "Use array-returning version instead",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Deprecated. ",
    "summary" : "Deprecated.",
    "title" : "mapVertices(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/transform(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place.  A transform to apply to the value.",
    "summary" : "Transform the value in place.",
    "title" : "transform(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/normal"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A surface normal vector, perpendicular to the plane. ",
    "summary" : "A surface normal vector, perpendicular to the plane.",
    "title" : "normal"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/compare(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The relationship between the receiver and the specified plane.  The plane to compare with. Return Value The PlaneComparison between the receiver and the plane.",
    "summary" : "The relationship between the receiver and the specified plane.",
    "title" : "compare(with:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/intersects(_:)-790uh"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line intersects the receiver.  The line to compare with. Return Value true if the line and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the line intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/Interpolatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Interpolatable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/intersection(with:)-5hke2"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the point where the specified line intersects the line segment.  The line to compare with. Return Value The point of intersection, or nil if the line and segment don’t intersect.",
    "summary" : "Returns the point where the specified line intersects the line segment.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/clip(to:fill:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : true,
        "renamed" : "clipped(to:fill:)",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Deprecated. ",
    "summary" : "Deprecated.",
    "title" : "clip(to:fill:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/customMirror"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomReflectable.customMirror. ",
    "summary" : "Inherited from CustomReflectable.customMirror.",
    "title" : "customMirror"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/edgeVertices(for:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An array of vertices suitable for constructing a set of edge polygons for the path.  The wrap mode to use for generating texture coordinates. Return Value The edge vertices, or an empty array if path has subpaths.",
    "summary" : "An array of vertices suitable for constructing a set of edge polygons for the path.",
    "title" : "edgeVertices(for:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/transformed(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value.  A transform to apply to the value.",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "transformed(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/Interpolatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Interpolatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/scale(_:)-7a30s"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a uniform scale transform.  A uniform scale factor to apply.",
    "summary" : "Creates a uniform scale transform.",
    "title" : "scale(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/Transformable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Transformable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/.._(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable...<(_:). ",
    "summary" : "Inherited from Comparable...<(_:).",
    "title" : "..<(_:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An orientation or rotation in 3D space.   Overview A rotation can be converted to and from an axis vector and angle, or a set of 3 Euler angles (pitch, yaw and roll).",
    "summary" : "An orientation or rotation in 3D space.",
    "title" : "Rotation"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/-=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from AdditiveArithmetic.-=(_:_:). ",
    "summary" : "Inherited from AdditiveArithmetic.-=(_:_:).",
    "title" : "-=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/extrude(_:depth:twist:sections:faces:material:isCancelled:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Efficiently extrudes an array of paths along their respective face normals, avoiding duplicate work.  The collection of paths to extrude in order to create the mesh. The depth of the extrusion. Angular twist to apply along the extrusion. Number of sections to create along extrusion. The direction of the generated polygon faces. The optional material for the mesh. Callback used to cancel the operation. ",
    "summary" : "Efficiently extrudes an array of paths along their respective face normals, avoiding duplicate work.",
    "title" : "extrude(_:depth:twist:sections:faces:material:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/_(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns whether the leftmost plane has the lower value. This provides a stable order when sorting collections of planes. ",
    "summary" : "Returns whether the leftmost plane has the lower value. This provides a stable order when sorting collections of planes.",
    "title" : "<(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Faces\/front"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Generate front faces. ",
    "summary" : "Generate front faces.",
    "title" : "Mesh.Faces.front"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/hasVertexColors"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A Boolean value that indicates whether the mesh includes vertex colors. ",
    "summary" : "A Boolean value that indicates whether the mesh includes vertex colors.",
    "title" : "hasVertexColors"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/+=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from AdditiveArithmetic.+=(_:_:). ",
    "summary" : "Inherited from AdditiveArithmetic.+=(_:_:).",
    "title" : "+=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/Transformable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Transformable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/curved(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Curve or uncurve the point.  Whether the resultant point should be curved.",
    "summary" : "Curve or uncurve the point.",
    "title" : "curved(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/PlaneComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PlaneComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/distance(from:)-5p7ko"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : true,
        "renamed" : "signedDistance(from:)",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Deprecated. ",
    "summary" : "Deprecated.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/intersects(_:)-1hsp"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Determines if the receiver intersects the specified plane.  The plane to compare with. Return Value true if the receiver intersects the plane, and false otherwise.",
    "summary" : "Determines if the receiver intersects the specified plane.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/black"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "black"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/a"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The alpha component of the color. ",
    "summary" : "The alpha component of the color.",
    "title" : "a"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/transformed(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the mesh.  A transform to apply to the mesh.",
    "summary" : "Returns a transformed copy of the mesh.",
    "title" : "transformed(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/clipped(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Clip polygon to the specified plane  The Plane  to clip the polygon to. Return Value An array of the polygon fragments that lie in front of the plane.",
    "summary" : "Clip polygon to the specified plane",
    "title" : "clipped(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/...(_:)-732z3"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable....(_:). ",
    "summary" : "Inherited from Comparable....(_:).",
    "title" : "...(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/transformed(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value.  A transform to apply to the value.",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "transformed(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/IOError"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Input\/output error. ",
    "summary" : "Input\/output error.",
    "title" : "Mesh.IOError"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/atan2(y:x:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an angle representing the trigonometric arc tangent of the vector you provide.  The Y component of the input vector The X component of the input vector",
    "summary" : "Creates an angle representing the trigonometric arc tangent of the vector you provide.",
    "title" : "atan2(y:x:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/_=(_:_:)-1oq2t"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable.<=(_:_:). ",
    "summary" : "Inherited from Comparable.<=(_:_:).",
    "title" : "<=(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/intersection(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point if it intersects the receiver.  The point to compare with. Return Value The nearest point on the receiver that touches the point, or nil otherwise.",
    "summary" : "Returns the nearest point if it intersects the receiver.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/twoPi"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Angle representing a full rotation. ",
    "summary" : "Angle representing a full rotation.",
    "title" : "twoPi"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/sphereMapped()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return a copy of the mesh with spherically-mapped texture coordinates.  ",
    "summary" : "Return a copy of the mesh with spherically-mapped texture coordinates.",
    "title" : "sphereMapped()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/customMirror"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomReflectable.customMirror. ",
    "summary" : "Inherited from CustomReflectable.customMirror.",
    "title" : "customMirror"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/*(_:_:)-5mcy5"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a vector with its components multiplied by the specified value. ",
    "summary" : "Returns a vector with its components multiplied by the specified value.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/+=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from AdditiveArithmetic.+=(_:_:). ",
    "summary" : "Inherited from AdditiveArithmetic.+=(_:_:).",
    "title" : "+=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/Decodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Decodable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/intersects(_:)-3rdg"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line intersects the receiver.  The line to compare with. Return Value true if the line and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the line intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/line(_:_:color:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a linear path from a start and end point.  The starting point of the line. The ending point of the line. An optional Color to apply to the path’s points.",
    "summary" : "Creates a linear path from a start and end point.",
    "title" : "line(_:_:color:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Decodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Decodable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/symmetricDifference(_:isCancelled:)-swift.type.method"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Efficiently XORs multiple meshes.  A collection of meshes to be XORed. Callback used to cancel the operation Return Value A new mesh representing the XOR of the meshes. ",
    "summary" : "Efficiently XORs multiple meshes.",
    "title" : "symmetricDifference(_:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/isFlipped"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Does the transform apply a mirror operation (negative scale)? ",
    "summary" : "Does the transform apply a mirror operation (negative scale)?",
    "title" : "isFlipped"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/scale(by:)-7dhh3"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A uniform scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/inset(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Applies a uniform inset to the edges of the path.  The distance by which to inset the path edges. Return Value A copy of the path, inset by the specified distance. Discussion Passing a negative distance will expand the path instead of shrinking it.",
    "summary" : "Applies a uniform inset to the edges of the path.",
    "title" : "inset(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/encode(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Encodes this line into the given encoder.  The encoder to write data to.",
    "summary" : "Encodes this line into the given encoder.",
    "title" : "encode(to:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/intersects(_:)-9ht82"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line segment intersects the specified polygon.  The polygon to compare with. Return Value true if the polygon and segment intersect, and false otherwise.",
    "summary" : "Returns a true if the line segment intersects the specified polygon.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/Interpolatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Interpolatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Faces\/back"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Generate back faces. ",
    "summary" : "Generate back faces.",
    "title" : "Mesh.Faces.back"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/init(_:texcoord:color:isCurved:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a path point.  The location of the path point. An optional texture coordinate for this path point. An optional vertex color for this path point. A Boolean indicating if point should be curved or sharp.",
    "summary" : "Creates a path point.",
    "title" : "init(_:texcoord:color:isCurved:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/Encodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Encodable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/intersection(with:)-1qjiy"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the points where the specified bounds intersects the line segment.  The bounds to compare with. Return Value A set of zero or more points of intersection with the bounds.",
    "summary" : "Returns the points where the specified bounds intersects the line segment.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/STLTextOptions\/name"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The name to be embedded in the file. ",
    "summary" : "The name to be embedded in the file.",
    "title" : "name"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/CustomReflectable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomReflectable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(_:)-4eop9"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a vector from a CoreGraphics CGPoint.  The CoreGraphics point.",
    "summary" : "Creates a vector from a CoreGraphics CGPoint.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/.._(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable...<(_:). ",
    "summary" : "Inherited from Comparable...<(_:).",
    "title" : "..<(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/intersects(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the point touches or intersects the receiver.  The point to compare with. Return Value true if the point and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the point touches or intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/transform(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place.  A transform to apply to the value.",
    "summary" : "Transform the value in place.",
    "title" : "transform(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/clip(to:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : true,
        "renamed" : "clipped(to:)",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Deprecated. ",
    "summary" : "Deprecated.",
    "title" : "clip(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/inverted()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Flip the direction of the line segment ",
    "summary" : "Flip the direction of the line segment",
    "title" : "inverted()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/STLTextOptions\/zeroNormals"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Should normal values be zeroed out? ",
    "summary" : "Should normal values be zeroed out?",
    "title" : "zeroNormals"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/customMirror"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomReflectable.customMirror. ",
    "summary" : "Inherited from CustomReflectable.customMirror.",
    "title" : "customMirror"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/translate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Translate the value in place.  A translation to apply to the value.",
    "summary" : "Translate the value in place.",
    "title" : "translate(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/lerp(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Linearly interpolate between this vector and another.  The vector to interpolate towards. The normalized extent of interpolation, from 0 to 1.",
    "summary" : "Linearly interpolate between this vector and another.",
    "title" : "lerp(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/distance(from:)-9e6ey"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the shortest distance between the line and the specified object.  The object to compare with. Return Value The absolute distance from the nearest point on the object.",
    "summary" : "Returns the shortest distance between the line and the specified object.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/signedDistance(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the signed distance between the receiver and the specified plane.  The plane to compare with. Return Value The distance between the receiver and the plane. The value is positive if the receiver lies in front of the plane, negative if it lies behind it, or zero if it lies exactly on the plane, or crosses it.",
    "summary" : "Returns the signed distance between the receiver and the specified plane.",
    "title" : "signedDistance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/scaled(by:)-1dtbr"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A uniform scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/containsPoint(_:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : true,
        "renamed" : "intersects(_:)",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Deprecated. ",
    "summary" : "Deprecated.",
    "title" : "containsPoint(_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/clipped(to:isCancelled:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the parts of the line segment that lie outside of the specified mesh.  The mesh volume against which to clip the segments. Callback used to cancel the operation. Return Value The parts of the line segment that lie outside the mesh. Discussion When clipping multiple edges, it is more efficient to call Collection<LineSegment>.clipped(to:).",
    "summary" : "Returns the parts of the line segment that lie outside of the specified mesh.",
    "title" : "clipped(to:isCancelled:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/intersection(with:)-79olr"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the point of intersection between a line and a plane.  The Line to compare with. Return Value The point of intersection between the line and plane, or nil if they are parallel.",
    "summary" : "Computes the point of intersection between a line and a plane.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/atan(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an angle representing the trigonometric arc tangent of the value you provide.  The tangent value to use to calculate the angle.",
    "summary" : "Creates an angle representing the trigonometric arc tangent of the value you provide.",
    "title" : "atan(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/inset(by:)-4gk62"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new bounds inset by the specified amount.  The amount to inset the bounds by. Use a negative value to expand the bounds. Return Value The inset bounds.",
    "summary" : "Returns a new bounds inset by the specified amount.",
    "title" : "inset(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/scaled(by:)-20sq4"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A vector scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/z"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The Z component of the vector. ",
    "summary" : "The Z component of the vector.",
    "title" : "z"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/curve(_:detail:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a quadratic bezier spline.  The control points for the curve. The number of line segments used to approximate curved sections.  Discussion The method takes an array of PathPoint and a detail argument. Normally, the isCurved property is used to calculate surface normals (for lighting purposes), but with the curve(_:detail:) method it actually affects the shape of the Path. A sequence of regular (non-curved) PathPoints creates sharp corners in the Path as normal, but curved points are treated as off-curve Bezier control points. The method uses second-order (quadratic) Bezier curves, where each curve has two on-curve end points and a single off-curve control point. If two curved PathPoint are used in sequence then an on-curve point is interpolated between them. It is therefore  possible to create curves entirely out of curved (off-curve) control points. This approach to curve generation is based on the popular TrueType (TTF) font system, and provides a good balance between simplicity and flexibility. For more complex curves, on macOS and iOS you can create Euclid Path from a CGPath by using the CGPath.paths() extension method. CGPath supports cubic bezier curves as well as quadratic, and has convenience constructors for rounded rectangles and other shapes.",
    "summary" : "Creates a quadratic bezier spline.",
    "title" : "curve(_:detail:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(size:)-8y52g"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a size\/scale vector from an array of two coordinates.  An array of vector components. Discussion Omitted values are set equal to the first value specified. If no values are specified, the size defaults to one.",
    "summary" : "Creates a size\/scale vector from an array of two coordinates.",
    "title" : "init(size:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/init(points:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a plane from a set of points.  A set of coplanar points describing a polygon. Discussion The polygon can be convex or concave. The direction of the plane normal is based on the assumption that the points are wound in an anti-clockwise direction.",
    "summary" : "Creates a plane from a set of points.",
    "title" : "init(points:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/inverted()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Flips the polygon along its plane and reverses the order and surface normals of the vertices.  Return Value The inverted polygon.",
    "summary" : "Flips the polygon along its plane and reverses the order and surface normals of the vertices.",
    "title" : "inverted()"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/cos(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the trigonometric cosine of an angle.  The angle to calculate the cosine for. Return Value The trigonometric cosine of the angle.",
    "summary" : "Computes the trigonometric cosine of an angle.",
    "title" : "cos(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(stlString:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Create a mesh from an STL string.  ASCII STL string data.",
    "summary" : "Create a mesh from an STL string.",
    "title" : "init(stlString:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/.._(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable...<(_:). ",
    "summary" : "Inherited from Comparable...<(_:).",
    "title" : "..<(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/clipped(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Clip path to the specified plane.  The plane to clip the path to Return Value A path consisting of the parts of the original path that lie in front of the plane.",
    "summary" : "Clip path to the specified plane.",
    "title" : "clipped(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/Comparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Comparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/PlaneComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PlaneComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/customMirror"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomReflectable.customMirror. ",
    "summary" : "Inherited from CustomReflectable.customMirror.",
    "title" : "customMirror"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/_=(_:_:)-9rm6o"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable.>=(_:_:). ",
    "summary" : "Inherited from Comparable.>=(_:_:).",
    "title" : ">=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/transform(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place.  A transform to apply to the value.",
    "summary" : "Transform the value in place.",
    "title" : "transform(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/position"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The position  of the path point. ",
    "summary" : "The position  of the path point.",
    "title" : "position"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/translate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Translate the value in place.  A translation to apply to the value.",
    "summary" : "Translate the value in place.",
    "title" : "translate(by:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Euclid is a library for creating and manipulating 3D geometry using techniques such as extruding or “lathing” 2D paths to create solid 3D shapes, and CSG (Constructive Solid Geometry) to combine or subtract those shapes from one another. Overview Euclid is the underlying implementation for the open source ShapeScript scripting language and ShapeScript macOS app. Anything you can build in ShapeScript can be replicated programmatically in Swift using this library. If you would like to support the development of Euclid, please consider buying a copy of ShapeScript (the app itself is free, but there is an in-app purchase to unlock some features). You can also donate directly to the project via PayPal:  Note: Euclid is a fairly complex piece of code, at a fairly early stage of development. You should expect some bugs and breaking changes over the first few releases, and the documentation is a little sparse. Please report any issues you encounter, and I will do my best to fix them.",
    "summary" : "Euclid is a library for creating and manipulating 3D geometry using techniques such as extruding or “lathing” 2D paths to create solid 3D shapes, and CSG (Constructive Solid Geometry) to combine or subtract those shapes from one another.",
    "title" : "Euclid"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/inverted()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Flips the path along its plane and reverses the path points.  Return Value The inverted path.",
    "summary" : "Flips the path along its plane and reverses the path points.",
    "title" : "inverted()"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A point along a path.   Overview A path point can represent a sharp corner or a curve, and has a position, and optionally a texcoord and\/or color, but no normal. The isCurved property  indicates if the point is sharp or smooth, allowing the normal to be computed automatically.",
    "summary" : "A point along a path.",
    "title" : "PathPoint"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(_:materialLookup:)-3drza"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "12.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "26.0",
        "name" : "tvOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Creates a mesh from a RealityKit ModelEntity with optional material mapping.  The ModelEntity to convert into a mesh. An optional closure to map the RealityKit materials to Euclid materials.",
    "summary" : "Creates a mesh from a RealityKit ModelEntity with optional material mapping.",
    "title" : "init(_:materialLookup:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/icosahedron(radius:faces:wrapMode:material:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an icosahedron.  The radius of the icosahedron. The direction the polygon faces. The mode in which texture coordinates are wrapped around the mesh. The optional material for the mesh.",
    "summary" : "Creates an icosahedron.",
    "title" : "icosahedron(radius:faces:wrapMode:material:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/debugDescription"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomDebugStringConvertible.debugDescription. ",
    "summary" : "Inherited from CustomDebugStringConvertible.debugDescription.",
    "title" : "debugDescription"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/inverted()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Flips the face direction and vertex normals of all polygons within the mesh.  Return Value The inverted mesh.",
    "summary" : "Flips the face direction and vertex normals of all polygons within the mesh.",
    "title" : "inverted()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/init(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new angle by decoding from the given decoder.  The decoder to read data from.",
    "summary" : "Creates a new angle by decoding from the given decoder.",
    "title" : "init(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PlaneComparison\/hashValue"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from RawRepresentable.hashValue. ",
    "summary" : "Inherited from RawRepresentable.hashValue.",
    "title" : "hashValue"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/green"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "green"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/clipped(to:fill:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Clip mesh to the specified plane and optionally fill sheared faces with specified material.  The plane to clip the mesh to The material to fill the sheared face(s) with. Discussion Specifying nil for the fill material will leave the sheared face unfilled.",
    "summary" : "Clip mesh to the specified plane and optionally fill sheared faces with specified material.",
    "title" : "clipped(to:fill:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineComparable\/intersects(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line intersects the receiver.  The line to compare with. Return Value true if the line and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the line intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PointComparable\/intersects(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the point touches or intersects the receiver.  The point to compare with. Return Value true if the point and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the point touches or intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/translated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a translated copy of the value.  An offset vector to apply to the value.",
    "summary" : "Returns a translated copy of the value.",
    "title" : "translated(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/compare(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The relationship between the receiver and the specified plane.  The plane to compare with. Return Value The PlaneComparison between the receiver and the plane.",
    "summary" : "The relationship between the receiver and the specified plane.",
    "title" : "compare(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/Encodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Encodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/bounds"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The bounds of the object. ",
    "summary" : "The bounds of the object.",
    "title" : "bounds"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Faces\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/PointComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PointComparable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/intersection(with:)-5y3zr"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point if it intersects the receiver.  The point to compare with. Return Value The nearest point on the receiver that touches the point, or nil otherwise.",
    "summary" : "Returns the nearest point if it intersects the receiver.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/sin(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the trigonometric sine of an angle.  The angle to calculate the sine for. Return Value The trigonometric sine of the angle.",
    "summary" : "Computes the trigonometric sine of an angle.",
    "title" : "sin(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/init(_:detail:color:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a Path from a CGPath. The returned path may contain nested subpaths.  The CoreGraphics path to convert. The number of line segments used to approximate cubic or quadratic bezier curves. An optional Color to apply to the path vertices.",
    "summary" : "Creates a Path from a CGPath. The returned path may contain nested subpaths.",
    "title" : "init(_:detail:color:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/scaled(by:)-9vwak"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A vector scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/init(radians:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an angle from a radians value.  The angle in radians.",
    "summary" : "Creates an angle from a radians value.",
    "title" : "init(radians:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/IOError\/localizedDescription"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "8.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "10.10",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "9.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "2.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Inherited from Error.localizedDescription. ",
    "summary" : "Inherited from Error.localizedDescription.",
    "title" : "localizedDescription"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/LineComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "LineComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/rotate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Rotate the value in place.  A rotation to apply to the value.",
    "summary" : "Rotate the value in place.",
    "title" : "rotate(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/isNormalized"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A Boolean value that indicates whether the vector has a length of 1. ",
    "summary" : "A Boolean value that indicates whether the vector has a length of 1.",
    "title" : "isNormalized"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/cone(radius:height:slices:stacks:poleDetail:addDetailAtBottomPole:faces:wrapMode:material:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a conical mesh.  The radius of the cone. The height of the cone. The number of vertical slices that make up the cone. The number of horizontal stacks that make up the cone. Optionally add extra detail around top pole to prevent texture warping. Whether detail should be added at bottom pole. The direction of the generated polygon faces. The way that texture coordinates are calculated for the cone. The optional material for the mesh.  Discussion The default nil value for poleDetail will derive value automatically. Use zero instead if you wish to add no extra detail at the poles.",
    "summary" : "Creates a conical mesh.",
    "title" : "cone(radius:height:slices:stacks:poleDetail:addDetailAtBottomPole:faces:wrapMode:material:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/angle"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The angle of rotation. ",
    "summary" : "The angle of rotation.",
    "title" : "angle"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/up"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A normalized direction vector pointing upwards relative to the current rotation. ",
    "summary" : "A normalized direction vector pointing upwards relative to the current rotation.",
    "title" : "up"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transformable\/transform(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place.  A transform to apply to the value.",
    "summary" : "Transform the value in place.",
    "title" : "transform(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/intersection(with:)-9o28g"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the point of intersection between a line segment and a plane.  The LineSegment to compare with. Return Value The point of intersection between the line segment and plane, or nil if they do not intersect.",
    "summary" : "Computes the point of intersection between a line segment and a plane.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/Decodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Decodable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/compare(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The relationship between the receiver and the specified plane.  The plane to compare with. Return Value The PlaneComparison between the receiver and the plane.",
    "summary" : "The relationship between the receiver and the specified plane.",
    "title" : "compare(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/customMirror"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomReflectable.customMirror. ",
    "summary" : "Inherited from CustomReflectable.customMirror.",
    "title" : "customMirror"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/distance(from:)-42kck"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified plane.  The plane to compare with. Return Value The absolute distance between the receiver and the plane. The value will be positive if the receiver lies in front or behind the plane, or zero if they intersect.",
    "summary" : "Returns the absolute distance between the receiver and the specified plane.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/Decodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Decodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/customMirror"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomReflectable.customMirror. ",
    "summary" : "Inherited from CustomReflectable.customMirror.",
    "title" : "customMirror"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/PlaneComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PlaneComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/...(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable....(_:_:). ",
    "summary" : "Inherited from Comparable....(_:_:).",
    "title" : "...(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/rotate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Rotate the value in place.  A rotation to apply to the value.",
    "summary" : "Rotate the value in place.",
    "title" : "rotate(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/signedDistance(from:)-3hgu1"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the signed distance between the receiver and the specified plane.  The plane to compare with. Return Value The distance between the receiver and the plane. The value is positive if the receiver lies in front of the plane, negative if it lies behind it, or zero if it lies exactly on the plane, or crosses it.",
    "summary" : "Returns the signed distance between the receiver and the specified plane.",
    "title" : "signedDistance(from:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/distance(from:)-4ge8y"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified plane.  The plane to compare with. Return Value The absolute distance between the receiver and the plane. The value will be positive if the receiver lies in front or behind the plane, or zero if they intersect.",
    "summary" : "Returns the absolute distance between the receiver and the specified plane.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/edges(intersecting:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes a set of edges where the polygon intersects a plane.  The Plane to test against the polygon. Return Value A Set of LineSegment representing the polygon edges intersecting the plane.",
    "summary" : "Computes a set of edges where the polygon intersects a plane.",
    "title" : "edges(intersecting:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/intersects(_:)-6r5bc"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Determines if the receiver intersects the specified plane.  The plane to compare with. Return Value true if the receiver intersects the plane, and false otherwise.",
    "summary" : "Determines if the receiver intersects the specified plane.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/containsPoint(_:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : true,
        "renamed" : "intersects(_:)",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Deprecated. ",
    "summary" : "Deprecated.",
    "title" : "containsPoint(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Alignment"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Alignment mode to use when extruding along a path. ",
    "summary" : "Alignment mode to use when extruding along a path.",
    "title" : "Mesh.Alignment"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/minowskiSum(with:isCancelled:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new mesh representing the Minowski sum of the mesh parameter and the receiver.  The mesh to form a sum with. Callback used to cancel the operation. Return Value A new mesh representing the Minowski sum of the input meshes.  Discussion  \/A \\                   \/        \n_\/  +—––+   =   +          + |       |       |          | |   B   |       |          | |       |       |          | +—––+       +          + _______\/",
    "summary" : "Returns a new mesh representing the Minowski sum of the mesh parameter and the receiver.",
    "title" : "minowskiSum(with:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/line(_:color:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : true,
        "message" : "Path.init(_:) instead",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Deprecated.  ",
    "summary" : "Deprecated.",
    "title" : "line(_:color:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/isConvex"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A Boolean value that indicates whether the polygon is convex. ",
    "summary" : "A Boolean value that indicates whether the polygon is convex.",
    "title" : "isConvex"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/rotated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a rotated copy of the value.  A rotation to apply to the value.",
    "summary" : "Returns a rotated copy of the value.",
    "title" : "rotated(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PointComparable\/distance(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the distance between the receiver and the specified point.  The point to compare with. Return Value The distance between the receiver and the point. The value is always positive if the receiver is not touching the point, or zero if it touches or intersects the point.",
    "summary" : "Returns the distance between the receiver and the specified point.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Material"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Material used by the mesh polygons. See Polygon.Material for details. ",
    "summary" : "Material used by the mesh polygons. See Polygon.Material for details.",
    "title" : "Mesh.Material"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/rotated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a rotated copy of the bounds.  A rotation to apply to the bounds. Discussion Because a bounds must be axially-aligned, rotating by an angle that is not a multiple of 90 degrees will result in the bounds being increased in size. Rotating it back again will not reduce the size, so this is a potentially irreversible operation. In general, after rotating a shape it is better to recalculate the bounds rather than trying to rotate the previous bounds.",
    "summary" : "Returns a rotated copy of the bounds.",
    "title" : "rotated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/xy"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A plane located at the origin, aligned with the X and Y axes. ",
    "summary" : "A plane located at the origin, aligned with the X and Y axes.",
    "title" : "xy"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/*(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/translate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Translate the value in place.  A translation to apply to the value.",
    "summary" : "Translate the value in place.",
    "title" : "translate(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/stlString(name:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return ASCII STL string data for the mesh. ",
    "summary" : "Return ASCII STL string data for the mesh.",
    "title" : "stlString(name:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Encodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Encodable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/edges(intersecting:isCancelled:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes a set of edges where the mesh intersects another mesh.  A Mesh to find the edge intersections with. Callback used to cancel the operation. Return Value A Set of LineSegment representing the polygon edge intersections.",
    "summary" : "Computes a set of edges where the mesh intersects another mesh.",
    "title" : "edges(intersecting:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/*=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place. ",
    "summary" : "Transform the value in place.",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/+(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the componentwise sum of two vectors. ",
    "summary" : "Returns the componentwise sum of two vectors.",
    "title" : "+(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/extrude(_:along:twist:align:faces:material:isCancelled:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a mesh by extruding one path along another path.  The shape to extrude into a mesh. The path along which to extrude the shape. Angular twist to apply along the extrusion. The alignment mode to use for the extruded shape. The direction of the generated polygon faces. The optional material for the mesh. Callback used to cancel the operation. ",
    "summary" : "Creates a mesh by extruding one path along another path.",
    "title" : "extrude(_:along:twist:align:faces:material:isCancelled:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/intersects(_:)-4f51y"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line intersects the receiver.  The line to compare with. Return Value true if the line and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the line intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/CustomDebugStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomDebugStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/PlaneComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PlaneComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/...(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable....(_:_:). ",
    "summary" : "Inherited from Comparable....(_:_:).",
    "title" : "...(_:_:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/subpaths"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An array of the subpaths that make up the path.  Discussion For paths without nested subpaths, this will return an array containing only self.",
    "summary" : "An array of the subpaths that make up the path.",
    "title" : "subpaths"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/transformed(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value.  A transform to apply to the value.",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "transformed(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/*=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place. ",
    "summary" : "Transform the value in place.",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/intersection(with:)-4vq1t"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the point where the specified polygon intersects the line segment.  The polygon to compare with. Return Value The point of intersection, or nil if the line and polygon don’t intersect.",
    "summary" : "Returns the point where the specified polygon intersects the line segment.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/init(_:_:_:normal:texcoord:color:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a vertex at the specified X, Y and Z coordinates.  The X coordinate of the vertex. The Y coordinate of the vertex The Z coordinate of the vertex (optional - defaults to zero). The surface normal for the vertex (defaults to zero). The optional texture coordinates for the vertex (defaults to zero). The optional vertex color (defaults to white).",
    "summary" : "Creates a vertex at the specified X, Y and Z coordinates.",
    "title" : "init(_:_:_:normal:texcoord:color:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/CustomDebugStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomDebugStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounded"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A common protocol for objects that have a bounds. ",
    "summary" : "A common protocol for objects that have a bounds.",
    "title" : "Bounded"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/scale(by:)-2v2ef"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A vector scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/ExpressibleByArrayLiteral-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "ExpressibleByArrayLiteral Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/*(_:_:)-2ew65"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the product of a numeric multiplier and an angle. ",
    "summary" : "Returns the product of a numeric multiplier and an angle.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/distance(from:)-5tciz"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the distance between the receiver and the specified point.  The point to compare with. Return Value The distance between the receiver and the point. The value is always positive if the receiver is not touching the point, or zero if it touches or intersects the point.",
    "summary" : "Returns the distance between the receiver and the specified point.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/scale(_:)-55t4p"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a scale transform.  A vector scale factor to apply.",
    "summary" : "Creates a scale transform.",
    "title" : "scale(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/signedDistance(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the signed distance between the receiver and the specified plane.  The plane to compare with. Return Value The distance between the receiver and the plane. The value is positive if the receiver lies in front of the plane, negative if it lies behind it, or zero if it lies exactly on the plane, or crosses it.",
    "summary" : "Returns the signed distance between the receiver and the specified plane.",
    "title" : "signedDistance(from:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/merge(_:)-swift.type.method"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new mesh that is the combination of the polygons from all the specified meshes.  The meshes to merge. Return Value A new mesh that includes all polygons from all meshes. Discussion No attempt is made to deduplicate or join meshes. Polygons are neither split nor removed.",
    "summary" : "Creates a new mesh that is the combination of the polygons from all the specified meshes.",
    "title" : "merge(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PlaneComparable\/intersects(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Determines if the receiver intersects the specified plane.  The plane to compare with. Return Value true if the receiver intersects the plane, and false otherwise.",
    "summary" : "Determines if the receiver intersects the specified plane.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/...(_:)-7xdsm"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable....(_:). ",
    "summary" : "Inherited from Comparable....(_:).",
    "title" : "...(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/*=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place. ",
    "summary" : "Transform the value in place.",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/PlaneComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PlaneComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/mapTexcoords(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return a copy of the polygon with transformed texture coordinates  A closure to be applied to each texcoord in the polygon.",
    "summary" : "Return a copy of the polygon with transformed texture coordinates",
    "title" : "mapTexcoords(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/CustomDebugStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomDebugStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/encode(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Encodes this path point into the given encoder.  The encoder to write data to.",
    "summary" : "Encodes this path point into the given encoder.",
    "title" : "encode(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/init(offset:rotation:scale:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : true,
        "renamed" : "init(scale:rotation:translation:)",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Deprecated ",
    "summary" : "Deprecated",
    "title" : "init(offset:rotation:scale:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/sphere(radius:slices:stacks:poleDetail:faces:wrapMode:material:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a spherical mesh.  The radius of the sphere. The number of vertical slices that make up the sphere. The number of horizontal stacks that make up the sphere. Optionally add extra detail around poles to prevent texture warping The direction the polygon faces. The way that texture coordinates are calculated for the sphere. The optional material for the mesh. ",
    "summary" : "Creates a spherical mesh.",
    "title" : "sphere(radius:slices:stacks:poleDetail:faces:wrapMode:material:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/scaled(by:)-19ukh"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A uniform scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/CustomReflectable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomReflectable Implementations"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/isEmpty"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A Boolean value that indicates whether the path is empty (has no points).  Discussion This is not the same as checking if the path is closed or has zero area",
    "summary" : "A Boolean value that indicates whether the path is empty (has no points).",
    "title" : "isEmpty"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/_=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Divides the components of the vector by the value you provide. ",
    "summary" : "Divides the components of the vector by the value you provide.",
    "title" : "\/=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PlaneComparison\/RawRepresentable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "RawRepresentable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/scale(by:)-mpk5"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A vector scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/nearestPoint(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point on the receiver to the specified point.  The point to compare with. Return Value The nearest point on the receiver to the specified point.",
    "summary" : "Returns the nearest point on the receiver to the specified point.",
    "title" : "nearestPoint(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/*(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value. ",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/withColor(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Replace\/remove path point colors.  The color to apply to each point in the path.",
    "summary" : "Replace\/remove path point colors.",
    "title" : "withColor(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/distance(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified line.  The line to compare with. Return Value The distance between the receiver and the line. The value is positive if the receiver lies in front or behind the line, or zero if it lies exactly on the line, or crosses it.",
    "summary" : "Returns the absolute distance between the receiver and the specified line.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/*(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value. ",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/r"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The red component of the color. ",
    "summary" : "The red component of the color.",
    "title" : "r"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/translated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a translated copy of the value.  An offset vector to apply to the value.",
    "summary" : "Returns a translated copy of the value.",
    "title" : "translated(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/intersection(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point if it intersects the receiver.  The point to compare with. Return Value The nearest point on the receiver that touches the point, or nil otherwise.",
    "summary" : "Returns the nearest point if it intersects the receiver.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init(_:)-68leo"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a rotation from a SceneKit quaternion.  The SCNQuaternion to convert.",
    "summary" : "Creates a rotation from a SceneKit quaternion.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/init(_:)-7d8un"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a color from an NSColor.  The NSColor to convert.",
    "summary" : "Creates a color from an NSColor.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/hasVertexNormals"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A Boolean value that indicates whether the polygon includes vertex normals that differ from the face normal. ",
    "summary" : "A Boolean value that indicates whether the polygon includes vertex normals that differ from the face normal.",
    "title" : "hasVertexNormals"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/init(_:color:)-snde"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a path from a set of line segments.  An unsorted, undirected collection ofLineSegments to convert to a path. An optional Color to apply to the path’s points.",
    "summary" : "Creates a path from a set of line segments.",
    "title" : "init(_:color:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/scale(by:)-4egi6"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A uniform scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/scale(by:)-8v4ag"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A uniform scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/*=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place. ",
    "summary" : "Transform the value in place.",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/withPosition(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a copy of the vertex with the specified position.  The position to apply to the vertex.",
    "summary" : "Creates a copy of the vertex with the specified position.",
    "title" : "withPosition(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/intersects(_:)-jd8x"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Determines if the receiver intersects the specified plane.  The plane to compare with. Return Value true if the receiver intersects the plane, and false otherwise.",
    "summary" : "Determines if the receiver intersects the specified plane.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/stlData(options:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return binary STL data for the mesh.  The output ooptions for the STL file Return Value The encoded STL data.",
    "summary" : "Return binary STL data for the mesh.",
    "title" : "stlData(options:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/PointComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PointComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An infinite line in 3D space. ",
    "summary" : "An infinite line in 3D space.",
    "title" : "Line"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/transformed(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value.  A transform to apply to the value.",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "transformed(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/nearestPoint(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point on the receiver to the specified point.  The point to compare with. Return Value The nearest point on the receiver to the specified point.",
    "summary" : "Returns the nearest point on the receiver to the specified point.",
    "title" : "nearestPoint(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/loft(_:faces:material:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a mesh by connecting a series of 3D paths representing the cross sections.  The paths to connect. The direction of the generated polygon faces. The optional material for the mesh. ",
    "summary" : "Creates a mesh by connecting a series of 3D paths representing the cross sections.",
    "title" : "loft(_:faces:material:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/intersects(_:)-6v9sq"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns true if the vector (representing a position in space) intersects the specified object.  The object to compare with. Return Value true if the bounds intersect, and false otherwise.",
    "summary" : "Returns true if the vector (representing a position in space) intersects the specified object.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/radians(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an angle from a radians value.  The angle in radians.",
    "summary" : "Creates an angle from a radians value.",
    "title" : "radians(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PointComparable\/distance(from:)-3c6uk"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the distance between the receiver and the specified point.  The point to compare with. Return Value The distance between the receiver and the point. The value is always positive if the receiver is not touching the point, or zero if it touches or intersects the point.",
    "summary" : "Returns the distance between the receiver and the specified point.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/minowskiSum(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new bounds representing the Minowski sum of the specified bounds and this one.  The bounds with which to form the Minowski sum. Return Value The combined bounds.",
    "summary" : "Creates a new bounds representing the Minowski sum of the specified bounds and this one.",
    "title" : "minowskiSum(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/PointComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PointComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/polygon(radius:sides:color:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a closed regular polygon.  The distance from the center of the polygon to each point. The number of sides on the polygon. An optional Color to apply to the path’s points. ",
    "summary" : "Creates a closed regular polygon.",
    "title" : "polygon(radius:sides:color:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init(from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a rotation between two direction vectors.  The first vector The second vector",
    "summary" : "Creates a rotation between two direction vectors.",
    "title" : "init(from:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A finite line segment in 3D space.  ",
    "summary" : "A finite line segment in 3D space.",
    "title" : "LineSegment"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/distance(from:)-8lhq5"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the shortest distance between the line and the line segment.  The lineSegment to compare with. Return Value The absolute distance from the nearest point on the object.",
    "summary" : "Returns the shortest distance between the line and the line segment.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/STLBinaryOptions\/colorLookup"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A closure that maps each polygon’s material to an STL facet color. ",
    "summary" : "A closure that maps each polygon’s material to an STL facet color.",
    "title" : "colorLookup"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/scaled(by:)-19jpq"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A vector scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineComparable"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Protocol for line-comparable types. ",
    "summary" : "Protocol for line-comparable types.",
    "title" : "LineComparable"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/isZero"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "All vector components are zero (or  close to zero) in length. ",
    "summary" : "All vector components are zero (or  close to zero) in length.",
    "title" : "isZero"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/...(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable....(_:_:). ",
    "summary" : "Inherited from Comparable....(_:_:).",
    "title" : "...(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/lengthSquared"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The square of the length of the vector. This is less expensive to compute than the length itself. ",
    "summary" : "The square of the length of the vector. This is less expensive to compute than the length itself.",
    "title" : "lengthSquared"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/slerp(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Performs a spherical linear interpolation between two rotations.  The rotation to interpolate towards. The normalized extent of interpolation, from 0 to 1. Return Value The interpolated rotation.",
    "summary" : "Performs a spherical linear interpolation between two rotations.",
    "title" : "slerp(_:_:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/init(_:)-987r7"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a color from an array of component values.  An array of vector components. Discussion The number of values specified determines how each value is interpreted. The following patterns are supported (R = red, G = green, B = blue, A = alpha, L = luminance): L LA RGB RGBA",
    "summary" : "Creates a color from an array of component values.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/transform(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place.  A transform to apply to the value.",
    "summary" : "Transform the value in place.",
    "title" : "transform(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/Alignment\/default"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Use default alignment heuristic for the given path. ",
    "summary" : "Use default alignment heuristic for the given path.",
    "title" : "Path.Alignment.default"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/*=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place. ",
    "summary" : "Transform the value in place.",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/CustomDebugStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomDebugStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/stroke(_:width:detail:material:isCancelled:)-7vbo2"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Efficiently strokes an array of paths, avoiding duplicate work.  The paths to stroke. The line width of the stroke. The number of sides to use for the cross-sectional shape of each stroked mesh. The optional material for the mesh. Callback used to cancel the operation.",
    "summary" : "Efficiently strokes an array of paths, avoiding duplicate work.",
    "title" : "stroke(_:width:detail:material:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/translate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Translate the value in place.  A translation to apply to the value.",
    "summary" : "Translate the value in place.",
    "title" : "translate(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/w"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The perpendicular distance from the world origin to the plane. ",
    "summary" : "The perpendicular distance from the world origin to the plane.",
    "title" : "w"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/Decodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Decodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/pitch(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a rotation around the X axis.  The angle to rotate by.",
    "summary" : "Creates a rotation around the X axis.",
    "title" : "pitch(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/stroke(_:width:detail:material:isCancelled:)-2rx6l"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Efficiently strokes a collection of line segments (useful for drawing wireframes).  A collection of LineSegment to stroke. The line width of the strokes. The number of sides to use for the cross-sectional shape of the stroked mesh. The optional material for the mesh. Callback used to cancel the operation. ",
    "summary" : "Efficiently strokes a collection of line segments (useful for drawing wireframes).",
    "title" : "stroke(_:width:detail:material:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Interpolatable"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Protocol for interpolatable types. ",
    "summary" : "Protocol for interpolatable types.",
    "title" : "Interpolatable"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/...(_:)-4yucl"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable....(_:). ",
    "summary" : "Inherited from Comparable....(_:).",
    "title" : "...(_:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A 3D surface made of polygons.   Overview A mesh surface can be convex or concave, and can have zero volume (for example, a flat shape such as a square) but shouldn’t contain holes or exposed back-faces. The result of CSG operations on meshes that have holes or exposed back-faces is undefined.",
    "summary" : "A 3D surface made of polygons.",
    "title" : "Mesh"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new rotation by decoding from the given decoder.  The decoder to read data from.",
    "summary" : "Creates a new rotation by decoding from the given decoder.",
    "title" : "init(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/translation(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a translation or position transform.  An offset distance.",
    "summary" : "Creates a translation or position transform.",
    "title" : "translation(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/CustomDebugStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomDebugStringConvertible Implementations"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/clipped(to:isCancelled:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Clip receiver to the specified mesh.  The mesh to clip the receiver to. Callback used to cancel the operation. Discussion Unlike subtracting(), this method does not require the receiver to be watertight, but also does not fill the hole(s) left behind by the clipping operation, and may expose backfaces.",
    "summary" : "Clip receiver to the specified mesh.",
    "title" : "clipped(to:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/Decodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Decodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/rotated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a rotated copy of the value.  A rotation to apply to the value.",
    "summary" : "Returns a rotated copy of the value.",
    "title" : "rotated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/cube(center:size:faces:wrapMode:material:)-eado"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an axis-aligned cubical mesh.  The center point of the mesh. The size of the mesh. The direction of the generated polygon faces. The way that texture coordinates are calculated for the cube. The optional material for the mesh.",
    "summary" : "Creates an axis-aligned cubical mesh.",
    "title" : "cube(center:size:faces:wrapMode:material:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/scale(by:)-8g7t0"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A vector scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/_=(_:_:)-375to"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable.<=(_:_:). ",
    "summary" : "Inherited from Comparable.<=(_:_:).",
    "title" : "<=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/text(_:width:detail:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an array of glyph contours from an attributed string.  The text to convert. The optional width at which to line-wrap the text. The number line segments used to approximate glyph curves. ",
    "summary" : "Creates an array of glyph contours from an attributed string.",
    "title" : "text(_:width:detail:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/IOError\/Error-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Error Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/intersects(_:)-5e2gp"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the point touches or intersects the receiver.  The point to compare with. Return Value true if the point and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the point touches or intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/withoutTexcoords()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return a copy of the mesh without texture coordinates. ",
    "summary" : "Return a copy of the mesh without texture coordinates.",
    "title" : "withoutTexcoords()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/asin(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an angle representing the trigonometric arc sine of the value you provide.  The sine value to use to calculate the angle.",
    "summary" : "Creates an angle representing the trigonometric arc sine of the value you provide.",
    "title" : "asin(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/compare(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The relationship between the receiver and the specified plane.  The plane to compare with. Return Value The PlaneComparison between the receiver and the plane.",
    "summary" : "The relationship between the receiver and the specified plane.",
    "title" : "compare(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/Encodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Encodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/CustomReflectable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomReflectable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(_:ignoringTransforms:materialLookup:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a mesh from a SceneKit node, with optional material mapping.  The SCNNode to convert into a mesh. Should transforms from the input node and its children be ignored. An optional closure to map the SceneKit materials to Euclid materials. If omitted, the SCNMaterial will be directly used as the mesh material.",
    "summary" : "Creates a mesh from a SceneKit node, with optional material mapping.",
    "title" : "init(_:ignoringTransforms:materialLookup:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/Decodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Decodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new vector by decoding from the given decoder.  The decoder to read data from.",
    "summary" : "Creates a new vector by decoding from the given decoder.",
    "title" : "init(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/Interpolatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Interpolatable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/distance(from:)-85838"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified line.  The line to compare with. Return Value The distance between the receiver and the line. The value is positive if the receiver lies in front or behind the line, or zero if it lies exactly on the line, or crosses it.",
    "summary" : "Returns the absolute distance between the receiver and the specified line.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/signedDistance(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the signed distance between the receiver and the specified plane.  The plane to compare with. Return Value The distance between the receiver and the plane. The value is positive if the receiver lies in front of the plane, negative if it lies behind it, or zero if it lies exactly on the plane, or crosses it.",
    "summary" : "Returns the signed distance between the receiver and the specified plane.",
    "title" : "signedDistance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/Decodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Decodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/translated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a translated copy of the value.  An offset vector to apply to the value.",
    "summary" : "Returns a translated copy of the value.",
    "title" : "translated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/Comparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Comparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/scaled(by:)-90bab"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A vector scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/*=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Multiplies the components of the vector by the specified value. ",
    "summary" : "Multiplies the components of the vector by the specified value.",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/curve(_:_:_:texcoord:color:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a curved path point at the specified X, Y and Z coordinates.  The X coordinate of the path point. The Y coordinate of the path point. The Z coordinate of the path point. An optional texture coordinate for this path point. An optional vertex color for this path point.",
    "summary" : "Creates a curved path point at the specified X, Y and Z coordinates.",
    "title" : "curve(_:_:_:texcoord:color:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/translated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a translated copy of the value.  An offset vector to apply to the value.",
    "summary" : "Returns a translated copy of the value.",
    "title" : "translated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/clear"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "clear"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/WrapMode\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/interpolated(with:by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Interpolate between two values.  The value to interpolate towards. The extent of the interpolation, from 0 - 1 (unclamped) Return Value The interpolated value.",
    "summary" : "Interpolate between two values.",
    "title" : "interpolated(with:by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/signedDistance(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the signed distance between the receiver and the specified plane.  The plane to compare with. Return Value The distance between the receiver and the plane. The value is positive if the receiver lies in front of the plane, negative if it lies behind it, or zero if it lies exactly on the plane, or crosses it.",
    "summary" : "Returns the signed distance between the receiver and the specified plane.",
    "title" : "signedDistance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/scale(by:)-74kzv"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A vector scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/color"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The color of the path point (optional). ",
    "summary" : "The color of the path point (optional).",
    "title" : "color"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/lerp(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Linearly interpolates between two vertices.  The vertex to interpolate towards. The unit value that indicates the distance between of this vertex and the target vertex. Return Value A new vertex with values interpolated between the two vertices. Discussion Interpolation is applied to the texture coordinate, normal and color, as well as the position.",
    "summary" : "Linearly interpolates between two vertices.",
    "title" : "lerp(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/scaled(by:)-6axqe"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A uniform scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/distance(from:)-4hlw9"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified line.  The line to compare with. Return Value The distance between the receiver and the line. The value is positive if the receiver lies in front or behind the line, or zero if it lies exactly on the line, or crosses it.",
    "summary" : "Returns the absolute distance between the receiver and the specified line.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/point(_:texcoord:color:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a corner path point at the specified position.  The location of the path point. An optional texture coordinate for this path point. An optional vertex color for this path point.",
    "summary" : "Creates a corner path point at the specified position.",
    "title" : "point(_:texcoord:color:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/intersects(_:)-2u3t"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the point touches or intersects the receiver.  The point to compare with. Return Value true if the point and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the point touches or intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/points"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The array of points that makes up this path. ",
    "summary" : "The array of points that makes up this path.",
    "title" : "points"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/yaw"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The angle of rotation around the Y-axis. ",
    "summary" : "The angle of rotation around the Y-axis.",
    "title" : "yaw"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/rotate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Rotate the value in place.  A rotation to apply to the value.",
    "summary" : "Rotate the value in place.",
    "title" : "rotate(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/intersects(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the point touches or intersects the receiver.  The point to compare with. Return Value true if the point and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the point touches or intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/distance(from:)-9jrcu"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the distance between the vector (representing a position in space) and the specified object.  The object to compare with. Return Value The absolute perpendicular distance between the point and object.",
    "summary" : "Returns the distance between the vector (representing a position in space) and the specified object.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/texcoord"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The texture coordinate of the path point (optional). If omitted, will be inferred automatically. ",
    "summary" : "The texture coordinate of the path point (optional). If omitted, will be inferred automatically.",
    "title" : "texcoord"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/withTextureTransform(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return a copy of the mesh with transformed texture coordinates.  The transform to apply to the texture coordinates. ",
    "summary" : "Return a copy of the mesh with transformed texture coordinates.",
    "title" : "withTextureTransform(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/max(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new vector representing the maximum of the components of the two vectors. ",
    "summary" : "Returns a new vector representing the maximum of the components of the two vectors.",
    "title" : "max(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/components"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An array containing the X, Y, and Z components of the vector. ",
    "summary" : "An array containing the X, Y, and Z components of the vector.",
    "title" : "components"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/*(_:_:)-55zcf"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Combines two rotations to get the cumulative rotation. ",
    "summary" : "Combines two rotations to get the cumulative rotation.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/withoutVertexColors()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a copy of the mesh with vertex colors removed. ",
    "summary" : "Returns a copy of the mesh with vertex colors removed.",
    "title" : "withoutVertexColors()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/customMirror"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "customMirror"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/angle(with:)-9sfg1"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the angle between this vector and the specified plane.  The plane to compare with.",
    "summary" : "Returns the angle between this vector and the specified plane.",
    "title" : "angle(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/translate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Translate the value in place.  A translation to apply to the value.",
    "summary" : "Translate the value in place.",
    "title" : "translate(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/ellipse(width:height:segments:color:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a closed elliptical path.  The horizontal diameter of the ellipse. The vertical diameter of the ellipse. The number of line segments used to approximate the ellipse. An optional Color to apply to the path’s points. ",
    "summary" : "Creates a closed elliptical path.",
    "title" : "ellipse(width:height:segments:color:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/STLTextOptions\/init(name:indent:zeroNormals:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "init(name:indent:zeroNormals:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/distance(from:)-1sbj"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the distance between the receiver and the specified point.  The point to compare with. Return Value The distance between the receiver and the point. The value is always positive if the receiver is not touching the point, or zero if it touches or intersects the point.",
    "summary" : "Returns the distance between the receiver and the specified point.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/split(along:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Split the polygon along a plane.  The Plane to split the polygon along. Return Value A pair of arrays representing the polygon fragments in front of and behind the plane respectively. Discussion If the plane and polygon do not intersect, one of the returned arrays will be empty.",
    "summary" : "Split the polygon along a plane.",
    "title" : "split(along:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/init(_:)-7uurk"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a bounds from a homogenous collection of Bounded objects.  A collection of bounded objects.",
    "summary" : "Creates a bounds from a homogenous collection of Bounded objects.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/Alignment\/axis"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Align extruded cross-sections with the X, Y or Z axis (whichever is most perpendicular to the extrusion path). ",
    "summary" : "Align extruded cross-sections with the X, Y or Z axis (whichever is most perpendicular to the extrusion path).",
    "title" : "Path.Alignment.axis"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/scaled(by:)-356zr"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A vector scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/Transformable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Transformable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/init(_:)-5517j"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new vertex from a position with default values for normal, texcoord and color.  The position of the vertex in 3D space.",
    "summary" : "Creates a new vertex from a position with default values for normal, texcoord and color.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/*(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value. ",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/union(_:isCancelled:)-swift.method"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new mesh representing the combined volume of the mesh parameter and the receiver, with inner faces removed.  The mesh to form a union with. Callback used to cancel the operation. Return Value A new mesh representing the union of the input meshes.  Discussion ",
    "summary" : "Returns a new mesh representing the combined volume of the mesh parameter and the receiver, with inner faces removed.",
    "title" : "union(_:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/PointComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PointComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/transform(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place.  A transform to apply to the value.",
    "summary" : "Transform the value in place.",
    "title" : "transform(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/intersection(with:)-4v7tg"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the line of intersection between two planes.  The plane to compare with. Return Value The line of intersection between the planes, or nil if the planes are parallel.",
    "summary" : "Computes the line of intersection between two planes.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/intersection(with:)-7s1sd"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the point where the specified plane intersects the line.  The plane to compare with. Return Value The point of intersection, or nil if the line and plane are parallel (don’t intersect).",
    "summary" : "Returns the point where the specified plane intersects the line.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/...(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable....(_:_:). ",
    "summary" : "Inherited from Comparable....(_:_:).",
    "title" : "...(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/withoutVertexColors()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return a copy of the polygon without vertex colors ",
    "summary" : "Return a copy of the polygon without vertex colors",
    "title" : "withoutVertexColors()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/init(_:_:_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Create a color from RGB values and optional alpha component  The red component of the color, from 0 to 1. The green component of the color, from 0 to 1. The blue component of the color, from 0 to 1. The alpha component of the color. Defaults to 1 (fully opaque)",
    "summary" : "Create a color from RGB values and optional alpha component",
    "title" : "init(_:_:_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/hasTexcoords"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A Boolean value that indicates whether the mesh includes texture coordinates. ",
    "summary" : "A Boolean value that indicates whether the mesh includes texture coordinates.",
    "title" : "hasTexcoords"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/init(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new line segment by decoding from the given decoder.  The decoder to read data from.",
    "summary" : "Creates a new line segment by decoding from the given decoder.",
    "title" : "init(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/CustomReflectable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomReflectable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/icosphere(radius:subdivisions:faces:wrapMode:material:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a sphere by subdividing an icosahedron.  The radius of the icosphere. The number of times to subdivide (each iteration quadruples the triangle count). The direction the polygon faces. The mode in which texture coordinates are wrapped around the mesh. The optional material for the mesh.",
    "summary" : "Creates a sphere by subdividing an icosahedron.",
    "title" : "icosphere(radius:subdivisions:faces:wrapMode:material:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/inset(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Applies a uniform inset to the edges of the polygon.  The distance by which to inset the polygon edges. Return Value A copy of the polygon, inset by the specified distance. Discussion Passing a negative distance will expand the polygon instead of shrinking it.",
    "summary" : "Applies a uniform inset to the edges of the polygon.",
    "title" : "inset(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/minowskiSum(along:isCancelled:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the minowskiSum sum of the receiver along the specified path.  A Path along which to sum the mesh. Callback used to cancel the operation. Return Value A new mesh representing the Minowski sum of all the inputs.",
    "summary" : "Computes the minowskiSum sum of the receiver along the specified path.",
    "title" : "minowskiSum(along:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/AdditiveArithmetic-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "AdditiveArithmetic Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/difference(_:isCancelled:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Efficiently gets the difference between multiple meshes.  An ordered collection of meshes. All but the first will be subtracted from the first. Callback used to cancel the operation. Return Value A new mesh representing the difference between the meshes.",
    "summary" : "Efficiently gets the difference between multiple meshes.",
    "title" : "difference(_:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/origin"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The closest point on the plane to the world origin. ",
    "summary" : "The closest point on the plane to the world origin.",
    "title" : "origin"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/intersects(_:)-87xk8"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the point touches or intersects the receiver.  The point to compare with. Return Value true if the point and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the point touches or intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/scale(by:)-3en6y"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A vector scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Faces"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The face generation policy for Euclid to use when creating a mesh. ",
    "summary" : "The face generation policy for Euclid to use when creating a mesh.",
    "title" : "Mesh.Faces"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/clipped(to:isCancelled:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Clip polygon to the specified mesh  The Mesh  to clip the polygon to. Callback used to cancel the operation. Return Value An array of polygon fragments that lie outside the Mesh.",
    "summary" : "Clip polygon to the specified mesh",
    "title" : "clipped(to:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/origin"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An arbitrary point on the line selected as the origin. ",
    "summary" : "An arbitrary point on the line selected as the origin.",
    "title" : "origin"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/center"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The position of the center of the polygon. This is calculated as the average of the vertex positions, and may not be equal to the center of the polygon’s bounds. ",
    "summary" : "The position of the center of the polygon. This is calculated as the average of the vertex positions, and may not be equal to the center of the polygon’s bounds.",
    "title" : "center"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/Encodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Encodable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/intersection(with:)-2ooms"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the points where the specified bounds intersects the line.  The bounds to compare with. Return Value A set of zero or more points of intersection with the bounds.",
    "summary" : "Returns the points where the specified bounds intersects the line.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/intersection(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point if it intersects the receiver.  The point to compare with. Return Value The nearest point on the receiver that touches the point, or nil otherwise.",
    "summary" : "Returns the nearest point if it intersects the receiver.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/isIdentity"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform has no effect. ",
    "summary" : "Transform has no effect.",
    "title" : "isIdentity"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/_=(_:_:)-5dvuy"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable.>=(_:_:). ",
    "summary" : "Inherited from Comparable.>=(_:_:).",
    "title" : ">=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/LineComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "LineComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init(_:)-7j4ql"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a Rotation from a simd quaternion.  A simd quaternion.",
    "summary" : "Creates a Rotation from a simd quaternion.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(_:material:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a mesh from a SceneKit geometry, with the material you provide.  The SCNGeometry to convert. A Mesh.Material to apply to the geometry, replacing any existing materials. Pass nil to use the default Euclid material.",
    "summary" : "Creates a mesh from a SceneKit geometry, with the material you provide.",
    "title" : "init(_:material:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/*(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value. ",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/init(_:)-3c0eo"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a closed path from a polygon.  A Polygon to convert to a path.",
    "summary" : "Creates a closed path from a polygon.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/degrees(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an angle from a degrees value.  The angle in degrees.",
    "summary" : "Creates an angle from a degrees value.",
    "title" : "degrees(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/init(undirected:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an ‘undirected’ line segment from a directional one.  The input segment.",
    "summary" : "Creates an ‘undirected’ line segment from a directional one.",
    "title" : "init(undirected:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init(_:)-8izj"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a Rotation from a simd quaternion.  A simd quaternion.",
    "summary" : "Creates a Rotation from a simd quaternion.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/init(subpaths:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a composite path from a collection of subpaths.  A collection of paths.",
    "summary" : "Creates a composite path from a collection of subpaths.",
    "title" : "init(subpaths:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A vertex represents a corner of a Polygon or a point on the surface of a Mesh. ",
    "summary" : "A vertex represents a corner of a Polygon or a point on the surface of a Mesh.",
    "title" : "Vertex"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transformable\/*=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place. ",
    "summary" : "Transform the value in place.",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/init(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new plane by decoding from the given decoder.  The decoder to read data from.",
    "summary" : "Creates a new plane by decoding from the given decoder.",
    "title" : "init(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/rotate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Rotate the value in place.  A rotation to apply to the value.",
    "summary" : "Rotate the value in place.",
    "title" : "rotate(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/init(axis:angle:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a rotation from an axis and angle.  A vector defining the axis of rotation. The angle of rotation around the axis.",
    "summary" : "Creates a rotation from an axis and angle.",
    "title" : "init(axis:angle:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/-(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a vector with all components inverted. ",
    "summary" : "Returns a vector with all components inverted.",
    "title" : "-(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/scaled(by:)-2lm8c"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A vector scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(_:materials:)-22brv"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "12.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "26.0",
        "name" : "tvOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Creates a mesh from a RealityKit MeshDescriptor with optional material.  The MeshDescriptor to convert into a mesh. An array of materials to apply to the mesh.",
    "summary" : "Creates a mesh from a RealityKit MeshDescriptor with optional material.",
    "title" : "init(_:materials:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/CustomReflectable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomReflectable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/minowskiSum(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the Minowski sum of the receiver and a polygon.  The polygon with which to sum the mesh. Return Value A new mesh representing the Minowski sum of the inputs.",
    "summary" : "Computes the Minowski sum of the receiver and a polygon.",
    "title" : "minowskiSum(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/_=(_:_:)-9s7pp"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable.>=(_:_:). ",
    "summary" : "Inherited from Comparable.>=(_:_:).",
    "title" : ">=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/Interpolatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Interpolatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/*=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place. ",
    "summary" : "Transform the value in place.",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/CustomReflectable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomReflectable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/debugDescription"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomDebugStringConvertible.debugDescription. ",
    "summary" : "Inherited from CustomDebugStringConvertible.debugDescription.",
    "title" : "debugDescription"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/Alignment\/tangent"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Align extruded cross-sections to the tangent of the path curve. ",
    "summary" : "Align extruded cross-sections to the tangent of the path curve.",
    "title" : "Path.Alignment.tangent"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/_(_:_:)-9688a"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable.>(_:_:). ",
    "summary" : "Inherited from Comparable.>(_:_:).",
    "title" : ">(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/Interpolatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Interpolatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/normal"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The surface normal of the vertex, used to calculate lighting. Set this to zero if you want the normal to be calculated automatically from the polygon face normal. ",
    "summary" : "The surface normal of the vertex, used to calculate lighting. Set this to zero if you want the normal to be calculated automatically from the polygon face normal.",
    "title" : "normal"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(size:)-nkyk"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a vector of uniform size.  The value to use for all components.",
    "summary" : "Creates a vector of uniform size.",
    "title" : "init(size:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/transform(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a transform from the current position, scale and orientation of a SceneKit node.  The SCNNode from which to determine the transform.",
    "summary" : "Creates a transform from the current position, scale and orientation of a SceneKit node.",
    "title" : "transform(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/init(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new path point by decoding from the given decoder.  The decoder to read data from.",
    "summary" : "Creates a new path point by decoding from the given decoder.",
    "title" : "init(from:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/convexHull(of:isCancelled:)-6ttl5"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the convex hull of a set of polygons.  A collection of polygons to compute a hull around. Callback used to cancel the operation. Return Value A new mesh representing the convex hull around the inputs.",
    "summary" : "Computes the convex hull of a set of polygons.",
    "title" : "convexHull(of:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/rotated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a rotated copy of the value.  A rotation to apply to the value.",
    "summary" : "Returns a rotated copy of the value.",
    "title" : "rotated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/Bounded-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Bounded Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/write(to:materialLookup:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Saves a mesh to a file, with optional material mapping.  The URL of the file to be written. A closure to map Euclid materials to format-appropriate materials. Use nil for default mapping.",
    "summary" : "Saves a mesh to a file, with optional material mapping.",
    "title" : "write(to:materialLookup:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/Encodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Encodable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/distance(from:)-v36y"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the distance between the receiver and the specified point.  The point to compare with. Return Value The distance between the receiver and the point. The value is always positive if the receiver is not touching the point, or zero if it touches or intersects the point.",
    "summary" : "Returns the distance between the receiver and the specified point.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A distance or position in 3D space.   Overview Euclid doesn’t have a 2D vector type. When working with primarily 2D shapes, such as Paths, you can omit the z component when constructing vector and it will default to zero.",
    "summary" : "A distance or position in 3D space.",
    "title" : "Vector"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/RealityKitMaterialProvider"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "12.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "26.0",
        "name" : "tvOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "A closure that converts a RealityKit material to a Euclid material.  A RealityKit material to convert. Return Value A Euclid Material.",
    "summary" : "A closure that converts a RealityKit material to a Euclid material.",
    "title" : "Mesh.RealityKitMaterialProvider"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/text(_:font:width:depth:detail:material:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an extruded text model from a string.  The text to convert into a model The font to use for the text glyphs. The optional width at which to line-wrap the text. The depth of the extruded text. The number line segments used to approximate glyph curves. An optional material to apply to the mesh. ",
    "summary" : "Creates an extruded text model from a string.",
    "title" : "text(_:font:width:depth:detail:material:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/*(_:_:)-98mbu"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value. ",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/intersects(_:)-7lw4v"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line intersects the receiver.  The line to compare with. Return Value true if the line and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the line intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/rotate(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Rotates the specified vector relative to the origin.  The Vector to be rotated. Return Value The rotated vector.",
    "summary" : "Rotates the specified vector relative to the origin.",
    "title" : "rotate(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/color"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The color for the vertex. This will be multiplied by the material color, so set it to white if you do not require per-vertex colors. ",
    "summary" : "The color for the vertex. This will be multiplied by the material color, so set it to white if you do not require per-vertex colors.",
    "title" : "color"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transformable\/translated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a translated copy of the value.  An offset vector to apply to the value.",
    "summary" : "Returns a translated copy of the value.",
    "title" : "translated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/scale"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The size or scale component of the transform. ",
    "summary" : "The size or scale component of the transform.",
    "title" : "scale"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/size"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The size of the bounds. The minimum returned size is zero, even if max < min. ",
    "summary" : "The size of the bounds. The minimum returned size is zero, even if max < min.",
    "title" : "size"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/_=(_:_:)-5nk27"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable.>=(_:_:). ",
    "summary" : "Inherited from Comparable.>=(_:_:).",
    "title" : ">=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/signedVolume"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the signed volume of the polygon. ",
    "summary" : "Returns the signed volume of the polygon.",
    "title" : "signedVolume"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/intersects(_:)-5acvs"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Determines if the plane intersects a PlaneComparable object.  The object to compare with. Return Value true if the plane intersects the object, and false otherwise.",
    "summary" : "Determines if the plane intersects a PlaneComparable object.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/intersects(_:)-3u1wv"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Determines if the receiver intersects the specified plane.  The plane to compare with. Return Value true if the receiver intersects the plane, and false otherwise.",
    "summary" : "Determines if the receiver intersects the specified plane.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/+(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from AdditiveArithmetic.+(_:). ",
    "summary" : "Inherited from AdditiveArithmetic.+(_:).",
    "title" : "+(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/intersects(_:)-6y8of"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the point touches or intersects the receiver.  The point to compare with. Return Value true if the point and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the point touches or intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/distance(from:)-1zuql"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified plane.  The plane to compare with. Return Value The absolute distance between the receiver and the plane. The value will be positive if the receiver lies in front or behind the plane, or zero if they intersect.",
    "summary" : "Returns the absolute distance between the receiver and the specified plane.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/signedVolume"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The signed volume of the mesh. A negative value indicates that the mesh is inside-out.  Discussion If the mesh is not watertight (has holes) then this value will not be accurate.",
    "summary" : "The signed volume of the mesh. A negative value indicates that the mesh is inside-out.",
    "title" : "signedVolume"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/nearestPoint(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point on the receiver to the specified point.  The point to compare with. Return Value The nearest point on the receiver to the specified point.",
    "summary" : "Returns the nearest point on the receiver to the specified point.",
    "title" : "nearestPoint(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/init(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new vertex by decoding from the given decoder.  The decoder to read data from.",
    "summary" : "Creates a new vertex by decoding from the given decoder.",
    "title" : "init(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/Transformable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Transformable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/volume"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : true,
        "renamed" : "signedVolume",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "The volume of a watertight mesh. ",
    "summary" : "The volume of a watertight mesh.",
    "title" : "volume"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/rotate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Rotate the value in place.  A rotation to apply to the value.",
    "summary" : "Rotate the value in place.",
    "title" : "rotate(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/signedDistance(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the signed distance between the receiver and the specified plane.  The plane to compare with. Return Value The distance between the receiver and the plane. The value is positive if the receiver lies in front of the plane, negative if it lies behind it, or zero if it lies exactly on the plane, or crosses it.",
    "summary" : "Returns the signed distance between the receiver and the specified plane.",
    "title" : "signedDistance(from:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/lerp(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Linearly interpolates between two path points.  The path point to interpolate with. The normalized extent of interpolation, from 0 to 1. Return Value A new path point at the interpolated position.",
    "summary" : "Linearly interpolates between two path points.",
    "title" : "lerp(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/-(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the difference between two angles. ",
    "summary" : "Returns the difference between two angles.",
    "title" : "-(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/translate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Translate the value in place.  A translation to apply to the value.",
    "summary" : "Translate the value in place.",
    "title" : "translate(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/distance(from:)-31bws"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the distance between the receiver and the specified point.  The point to compare with. Return Value The distance between the receiver and the point. The value is always positive if the receiver is not touching the point, or zero if it touches or intersects the point.",
    "summary" : "Returns the distance between the receiver and the specified point.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/intersection(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new bounds representing the intersection between the specified bounds and this one.  The bounds with which to intersect. Return Value The combined bounds, which may be empty if the bounds don’t intersect.",
    "summary" : "Creates a new bounds representing the intersection between the specified bounds and this one.",
    "title" : "intersection(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/translated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a translated copy of the value.  An offset vector to apply to the value.",
    "summary" : "Returns a translated copy of the value.",
    "title" : "translated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/center"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The center of the bounds. If the bounds is empty this will return the zero vector. ",
    "summary" : "The center of the bounds. If the bounds is empty this will return the zero vector.",
    "title" : "center"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/distance(from:)-78gff"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the distance between the receiver and the specified point.  The point to compare with. Return Value The distance between the receiver and the point. The value is always positive if the receiver is not touching the point, or zero if it touches or intersects the point.",
    "summary" : "Returns the distance between the receiver and the specified point.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/lerp(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Linearly interpolate between two colors.  The color to interpolate towards. The normalized extent of interpolation, from 0 to 1. Return Value The interpolated color.",
    "summary" : "Linearly interpolate between two colors.",
    "title" : "lerp(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/STLTextOptions"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Configuration options for text\/ASCII STL export. ",
    "summary" : "Configuration options for text\/ASCII STL export.",
    "title" : "STLTextOptions"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/transformed(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value.  A transform to apply to the value.",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "transformed(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(_:)-228p6"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new vector from a SceneKit vector.  The SceneKit SCNVector3.",
    "summary" : "Creates a new vector from a SceneKit vector.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/scaled(by:)-37r1v"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A uniform scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/.._(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable...<(_:_:). ",
    "summary" : "Inherited from Comparable...<(_:_:).",
    "title" : "..<(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/scaled(by:)-17goh"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A vector scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/scaled(by:)-29v7y"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A vector scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/init(_:normal:texcoord:color:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new vertex from a position, normal, texcoord and color.  The position of the vertex in 3D space. The surface normal for the vertex (defaults to zero). The optional texture coordinates for the vertex (defaults to zero). The optional vertex color (defaults to white).",
    "summary" : "Creates a new vertex from a position, normal, texcoord and color.",
    "title" : "init(_:normal:texcoord:color:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PointComparable"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Protocol for point-comparable types. ",
    "summary" : "Protocol for point-comparable types.",
    "title" : "PointComparable"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/_(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns whether the leftmost line segment has the lower value. This provides a stable order when sorting collections of line segments. ",
    "summary" : "Returns whether the leftmost line segment has the lower value. This provides a stable order when sorting collections of line segments.",
    "title" : "<(_:_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/triangulate()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Tessellates the polygon into triangles.  Return Value An array of triangles. Discussion If the polygon is already a triangle then it is returned unchanged.",
    "summary" : "Tessellates the polygon into triangles.",
    "title" : "triangulate()"
  },
  {
    "headings" : [
      "Overview",
      "Primitive Geometry",
      "Builders",
      "Curves",
      "Constructive Solid Geometry (CSG)",
      "Text"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/ConstructingMeshes"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Define 3D objects by constructing meshes. Overview To create a 3D object, create a Mesh in Euclid. You can manually create an array of Polygon instances, but that’s pretty tedious. Euclid offers a number of helper methods to quickly create complex geometry. Primitive Geometry The simplest way to create a Mesh is to start with an existing primitive, such as a cube or sphere. The following primitive types are available in Euclid, and are defined as static constructor methods on Mesh: cube(center:size:faces:wrapMode:material:) - A cubic Mesh (or cuboid, if you specify different values for the width, height and\/or depth). sphere(radius:slices:stacks:poleDetail:faces:wrapMode:material:) - A spherical Mesh. cylinder(radius:height:slices:poleDetail:faces:wrapMode:material:) - A cylindrical Mesh. cone(radius:height:slices:stacks:poleDetail:addDetailAtBottomPole:faces:wrapMode:material:) -  A conical Mesh. All Mesh instances are made of flat polygons. Since true curves cannot be represented using straight edges, the sphere, cylinder and cone primitives are approximations. Control the quality of these approximations by using the slices and\/or stacks parameters to configure the level of detail. In addition to the 3D Mesh primitives listed, there are also 2D Path primitives. These are implemented as static constructor methods on the Path type instead of Mesh: line(_:color:) - A straight line. ellipse(width:height:segments:color:)- A closed, elliptical Path. circle(radius:segments:color:)  - A closed, circular Path. rectangle(width:height:color:) - A closed, rectangular Path. roundedRectangle(width:height:radius:detail:color:) - A closed, rectangular Path with rounded corners. square(size:color:) - Same as rectangle(width:height:color:), but with equal width and height. polygon(radius:sides:color:) - A regular polygon shape (not to be confused with Euclid’s Polygon type). Builders Geometric primitives are all very well, but there is a limit to what you can create by combining spheres, cubes, etc. As an intermediate step between the extremes of using predefined primitives or individually positioning polygons, you can use builders. Builders create a Mesh from a (typically) 2D Path. The following builders are defined as static constructor functions on the Mesh type: fill(_:faces:material:) - This builder fills a single Path to create a pair of Polygons (front and back faces). stroke(_:width:detail:material:isCancelled:) - This builder strokes a single Path to create a strip or tube. A second variant (stroke(_:width:detail:material:isCancelled:)) of the function accepts an collection of LineSegment, which is convenient for creating a wireframe geometry from the uniqueEdges of a Mesh. lathe(_:slices:poleDetail:addDetailForFlatPoles:faces:wrapMode:material:) - This builder takes a 2D Path and rotates it around the Y-axis to create a rotationally symmetrical Mesh. This is an easy way to create complex shapes like candlesticks, chess pieces, rocket ships, etc. extrude(_:along:twist:align:faces:material:isCancelled:) - This builder fills a Path and extrudes it along its axis, or another path. This can turn a circular path into a tube, or a square into a cube etc. loft(_:faces:material:) - This builder is similar to extrude(_:along:twist:align:faces:material:isCancelled:), but takes multiple Path instances and joins them. The sequence of Path instances do not need to be the same shape, but must all have the same number of points and subpaths. To work correctly, each Path must be pre-positioned in 3D space so they do not all lie on the same plane. convexHull(of:material:isCancelled:) - Similar the the loft(_:faces:material:) builder, this method can form a Mesh by wrapping a skin around one or more Path instances. But unlike the other builders, in addition to paths you can also form a convex hull around a collection of meshes, polygons, vertices or points. Curves Builders are a powerful tool for creating interesting Mesh instances from one or more Path instances, but what about creating an interesting Path in the first place? Creating a polygonal Path by specifying points individually is straightforward, but creating curves that way is tedious. That’s where Bezier curves come in. Beziers allow you to specify complex curves using just a few control points. Euclid exposes this feature via the curve(_:detail:) constructor method. The curve(_:detail:) method takes an array of PathPoint and a detail argument. Normally, the isCurved property is used to calculate surface normals (for lighting purposes), but with the curve(_:detail:) method it actually affects the shape of the Path. A sequence of regular (non-curved) PathPoints create sharp corners in the Path as normal, but curved ones are treated as off-curve Bezier control points. The detail argument of the curve(_:detail:) method controls how many line segments are used to approximate the curve. The curve(_:detail:) method uses second-order (quadratic) Bezier curves, where each curve has two on-curve end points and a single off-curve control point. If two curved PathPoint are used in sequence then an on-curve point is interpolated between them. It is therefore  possible to create curves entirely out of curved (off-curve) control points. This approach to curve generation is based on the popular TrueType (TTF) font system, and provides a good balance between simplicity and flexibility. For more complex curves, on macOS and iOS you can create Euclid Path from a Core Graphics CGPath by using the CGPath.paths() extension method. CGPath supports cubic bezier curves as well as quadratic. Constructive Solid Geometry (CSG) CSG is another powerful tool for creating intricate geometry. CSG allows you to perform boolean operations (logical AND, OR, etc.) on solid shapes. The following CSG operations are defined as methods on the Mesh type: subtracting(_:isCancelled:) - Subtracts the volume of one Mesh from another. symmetricDifference(_:isCancelled:) - Produces a shape representing the non-overlapping parts of the input Meshes (this is useful for rendering text glyphs). union(_:isCancelled:) - Combines two intersecting Meshes, removing internal faces and leaving only the outer shell around both shapes (logical OR). intersection(_:isCancelled:) - Returns a single Mesh representing the common volume of two intersecting Meshes (logical AND). stencil(_:isCancelled:) - This effectively “paints” part of one Mesh with the material from another. convexHull(with:isCancelled:) - This creates a convex hull around one or more meshes. minowskiSum(with:isCancelled:) - This traces the edges of one mesh with another. Most CSG operations require Meshes that are “watertight”, that is they have no holes in their surface. Using a CSG operation on a mesh that isn’t sealed may result in unexpected results. Text On macOS and iOS you can make use of Euclid’s Core Text integration to create 2D or 3D extruded text. The text(_:width:detail:) method produces an array of 2D Path that represent the contours of each glyph in an AttributedString. You can use these paths with either fill(_:faces:material:) or extrude(_:depth:twist:sections:faces:material:isCancelled:) builder methods to create solid text. Alternatively, the text(_:font:width:depth:detail:material:) constructor directly produces an extruded 3D text model from a String or AttributedString. Each glyph in the input string maps to a single Path in the result, but these Paths may contain nested subpaths. Glyphs formed from multiple subpaths will be filled using the even-odd rule (equivalent to using symmetricDifference with the individually filled or extruded subpaths).",
    "summary" : "Define 3D objects by constructing meshes.",
    "title" : "Constructing Meshes"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/...(_:)-2uz97"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable....(_:). ",
    "summary" : "Inherited from Comparable....(_:).",
    "title" : "...(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/PlaneComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PlaneComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transformable\/scale(by:)-8ec9r"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A vector scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/distance(from:)-8gud1"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the distance between the receiver and the specified point.  The point to compare with. Return Value The distance between the receiver and the point. The value is always positive if the receiver is not touching the point, or zero if it touches or intersects the point.",
    "summary" : "Returns the distance between the receiver and the specified point.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/detriangulate()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Merges coplanar polygons that share one or more edges, provided the result will be convex.  Return Value A new mesh containing the merged polygons.",
    "summary" : "Merges coplanar polygons that share one or more edges, provided the result will be convex.",
    "title" : "detriangulate()"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/LineComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "LineComparable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/intersects(_:)-4qbek"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line intersects the receiver.  The line to compare with. Return Value true if the line and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the line intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineComparable\/intersects(_:)-3xh7b"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line intersects the receiver.  The line to compare with. Return Value true if the line and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the line intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An angle or 2D rotation. ",
    "summary" : "An angle or 2D rotation.",
    "title" : "Angle"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/point(_:_:_:texcoord:color:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a corner path point at the specified X, Y and Z coordinates.  The X coordinate of the path point. The Y coordinate of the path point. The Z coordinate of the path point (optional - defaults to zero). An optional texture coordinate for this path point. An optional vertex color for this path point.",
    "summary" : "Creates a corner path point at the specified X, Y and Z coordinates.",
    "title" : "point(_:_:_:texcoord:color:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/merge(_:ensureConvex:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Merges this polygon with another, removing redundant vertices where possible.  The polygon to merge with. A Boolean indicating is the resultant polygon must be convex. Return Value The combined polygon, or nil if the polygons can’t be merged.",
    "summary" : "Merges this polygon with another, removing redundant vertices where possible.",
    "title" : "merge(_:ensureConvex:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/CustomDebugStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomDebugStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/translated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a translated copy of the value.  An offset vector to apply to the value.",
    "summary" : "Returns a translated copy of the value.",
    "title" : "translated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/scale(by:)-758tv"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A uniform scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/customMirror"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomReflectable.customMirror. ",
    "summary" : "Inherited from CustomReflectable.customMirror.",
    "title" : "customMirror"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/interpolated(with:by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Interpolate between two values.  The value to interpolate towards. The extent of the interpolation, from 0 - 1 (unclamped) Return Value The interpolated value.",
    "summary" : "Interpolate between two values.",
    "title" : "interpolated(with:by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/CustomDebugStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomDebugStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/Encodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Encodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/objString()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Return Wavefront OBJ string data for the mesh. ",
    "summary" : "Return Wavefront OBJ string data for the mesh.",
    "title" : "objString()"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/Decodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Decodable Implementations"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/arc(angle:radius:segments:color:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a circular arc.  The angular span of the arc, measured clockwise from vertical. Defaults to pi (180 degrees). The distance from the center of the arc to each point used to approximate its shape. The number of line segments used to approximate the circle. An optional Color to apply to the path’s points. Discussion Because the arc is approximated using line segments, its radius is not uniform. The radius specified is the outer radius, i.e. the radius at the end points.",
    "summary" : "Creates a circular arc.",
    "title" : "arc(angle:radius:segments:color:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/compare(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The relationship between the receiver and the specified plane.  The plane to compare with. Return Value The PlaneComparison between the receiver and the plane.",
    "summary" : "The relationship between the receiver and the specified plane.",
    "title" : "compare(with:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/projected(onto:)-6d7xl"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point on the specified line to the vector (representing a position in space).  The line to project onto. Return Value The nearest point in 3D space that lies on the line.",
    "summary" : "Returns the nearest point on the specified line to the vector (representing a position in space).",
    "title" : "projected(onto:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/distance(from:)-9tjq5"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified plane.  The plane to compare with. Return Value The absolute distance between the receiver and the plane. The value will be positive if the receiver lies in front or behind the plane, or zero if they intersect.",
    "summary" : "Returns the absolute distance between the receiver and the specified plane.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/b"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The blue component of the color. ",
    "summary" : "The blue component of the color.",
    "title" : "b"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transformable\/translate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Translate the value in place.  A translation to apply to the value.",
    "summary" : "Translate the value in place.",
    "title" : "translate(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/hasTexcoords"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A Boolean value that indicates whether the polygon includes texture coordinates. ",
    "summary" : "A Boolean value that indicates whether the polygon includes texture coordinates.",
    "title" : "hasTexcoords"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/CustomReflectable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomReflectable Implementations"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/init(_:material:)-5edpl"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a polygon from a set of vertex positions.  A collection of Vector positions for the polygon vertices. An optional Polygon.Material to use for the polygon. Discussion Vertex normals will be set to match the overall face normal of the polygon. Texture coordinates will be set to zero. Vertex colors will be defaulted to white.",
    "summary" : "Creates a polygon from a set of vertex positions.",
    "title" : "init(_:material:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/tessellate(maxSides:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Splits a polygon into two or more convex polygons using the “ear clipping” method.  The maximum number of sides each polygon may have. Return Value An array of convex polygons.",
    "summary" : "Splits a polygon into two or more convex polygons using the “ear clipping” method.",
    "title" : "tessellate(maxSides:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/distance(from:)-77i61"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified line.  The line to compare with. Return Value The distance between the receiver and the line. The value is positive if the receiver lies in front or behind the line, or zero if it lies exactly on the line, or crosses it.",
    "summary" : "Returns the absolute distance between the receiver and the specified line.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/compare(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The relationship between the receiver and the specified plane.  The plane to compare with. Return Value The PlaneComparison between the receiver and the plane.",
    "summary" : "The relationship between the receiver and the specified plane.",
    "title" : "compare(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/Transformable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Transformable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/init(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new polygon by decoding from the given decoder.  The decoder to read data from.",
    "summary" : "Creates a new polygon by decoding from the given decoder.",
    "title" : "init(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/scaled(by:)-4wtbg"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a scaled copy of the value.  A vector scale factor to apply to the value.",
    "summary" : "Returns a scaled copy of the value.",
    "title" : "scaled(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/*(_:_:)-9qb43"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value. ",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/init(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new transform by decoding from the given decoder.  The decoder to read data from.",
    "summary" : "Creates a new transform by decoding from the given decoder.",
    "title" : "init(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/y"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The Y component of the vector. ",
    "summary" : "The Y component of the vector.",
    "title" : "y"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/bounds"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The bounds of the object. ",
    "summary" : "The bounds of the object.",
    "title" : "bounds"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PointComparable\/nearestPoint(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point on the receiver to the specified point.  The point to compare with. Return Value The nearest point on the receiver to the specified point.",
    "summary" : "Returns the nearest point on the receiver to the specified point.",
    "title" : "nearestPoint(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transformable"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Protocol for transformable types. ",
    "summary" : "Protocol for transformable types.",
    "title" : "Transformable"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/merge(_:)-swift.method"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Merges the polygons from two meshes.  The mesh to merge with this one. Return Value A new mesh that includes all polygons from both meshes. Discussion No attempt is made to deduplicate or join meshes. Polygons are neither split nor removed.",
    "summary" : "Merges the polygons from two meshes.",
    "title" : "merge(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An infinite 2D plane in 3D space. ",
    "summary" : "An infinite 2D plane in 3D space.",
    "title" : "Plane"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/Decodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Decodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/customMirror"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomReflectable.customMirror. ",
    "summary" : "Inherited from CustomReflectable.customMirror.",
    "title" : "customMirror"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/WrapMode"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The texture wrapping mode to use when generating a mesh. ",
    "summary" : "The texture wrapping mode to use when generating a mesh.",
    "title" : "Mesh.WrapMode"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PointComparable\/intersection(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point if it intersects the receiver.  The point to compare with. Return Value The nearest point on the receiver that touches the point, or nil otherwise.",
    "summary" : "Returns the nearest point if it intersects the receiver.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/edgeVertices"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An array of vertices suitable for constructing a set of edge polygons for the path.  Discussion Returns an empty array if the path has subpaths.",
    "summary" : "An array of vertices suitable for constructing a set of edge polygons for the path.",
    "title" : "edgeVertices"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/empty"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An empty mesh. ",
    "summary" : "An empty mesh.",
    "title" : "empty"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/init(arrayLiteral:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a color from an array of component values.  Discussion The number of values specified determines how each value is interpreted. The following patterns are supported (R = red, G = green, B = blue, A = alpha, L = luminance): L LA RGB RGBA",
    "summary" : "Creates a color from an array of component values.",
    "title" : "init(arrayLiteral:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/LineComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "LineComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/encode(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Encodes the vector into the given encoder.  The encoder to write data to.",
    "summary" : "Encodes the vector into the given encoder.",
    "title" : "encode(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/text(_:font:width:detail:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates an array of glyph contours from a string and font you provide.  The text to convert. The font to use for the text. The optional width at which to line-wrap the text. The number line segments used to approximate glyph curves.",
    "summary" : "Creates an array of glyph contours from a string and font you provide.",
    "title" : "text(_:font:width:detail:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/STLColorProvider"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A closure that maps a Euclid material to an STL facet color.  A Euclid material to convert, or nil for the default material. Return Value A Euclid Color value.",
    "summary" : "A closure that maps a Euclid material to an STL facet color.",
    "title" : "Mesh.STLColorProvider"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/init(origin:direction:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a line from an origin and direction.  An arbitrary point on the line selected as the origin. The direction of the line, emanating from the origin.",
    "summary" : "Creates a line from an origin and direction.",
    "title" : "init(origin:direction:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/init(_:material:)-9mns5"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a polygon from an array of vertices.  An array of Vertex that make up the polygon. An optional Polygon.Material to use for the polygon. Discussion A polygon can be convex or concave, but vertices must be coplanar and non-degenerate. Vertices are assumed to be in anti-clockwise order for the purpose of deriving the face normal.",
    "summary" : "Creates a polygon from an array of vertices.",
    "title" : "init(_:material:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/distance(from:)-4jevq"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified plane.  The plane to compare with. Return Value The absolute distance between the receiver and the plane. The value will be positive if the receiver lies in front or behind the plane, or zero if they intersect.",
    "summary" : "Returns the absolute distance between the receiver and the specified plane.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Faces\/default"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The default face generation behavior. Context-dependent. ",
    "summary" : "The default face generation behavior. Context-dependent.",
    "title" : "Mesh.Faces.default"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/stroke(_:width:detail:material:isCancelled:)-85o14"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a mesh by stroking a path with the line width, detail, and material you provide.  The path to stroke. The line width of the stroke. The number of sides to use for the cross-sectional shape of the stroked mesh. The optional material for the mesh. Callback used to cancel the operation. ",
    "summary" : "Creates a mesh by stroking a path with the line width, detail, and material you provide.",
    "title" : "stroke(_:width:detail:material:isCancelled:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/reflected(along:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Reflects each vertex of the polygon along a plane.  The Plane against which the vertices are to be reflected. Return Value A Polygon representing the reflected vertices.",
    "summary" : "Reflects each vertex of the polygon along a plane.",
    "title" : "reflected(along:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/distance(from:)-32yd2"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the distance between the receiver and the specified point.  The point to compare with. Return Value The distance between the receiver and the point. The value is always positive if the receiver is not touching the point, or zero if it touches or intersects the point.",
    "summary" : "Returns the distance between the receiver and the specified point.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(_:materialLookup:)-7p5hd"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a mesh from a SceneKit geometry, with optional material mapping.  The SCNGeometry to convert into a mesh. An optional closure to map SceneKit materials to Euclid materials. If omitted, the SCNMaterial will be directly used as the mesh material.",
    "summary" : "Creates a mesh from a SceneKit geometry, with optional material mapping.",
    "title" : "init(_:materialLookup:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/intersection(with:)-88med"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the point where the specified polygon intersects the line.  The polygon to compare with. Return Value The point of intersection, or nil if the line and polygon don’t intersect.",
    "summary" : "Returns the point where the specified polygon intersects the line.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/encode(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Encodes this angle into the given encoder.  The encoder to write data to.",
    "summary" : "Encodes this angle into the given encoder.",
    "title" : "encode(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/_=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Divides the angle by a numeric denominator. ",
    "summary" : "Divides the angle by a numeric denominator.",
    "title" : "\/=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/Decodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Decodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/IOError\/errorUserInfo"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomNSError.errorUserInfo. ",
    "summary" : "Inherited from CustomNSError.errorUserInfo.",
    "title" : "errorUserInfo"
  },
  {
    "headings" : [
      "Overview",
      "Materials",
      "Colors",
      "Textures"
    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/RenderingMeshes"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Display the 3D shapes you created with meshes. Overview After creating some 3D shapes, you probably want to actually display them. Most of the Euclid library is completely self-contained, with no dependencies on any particular rendering technology or framework. However, when running on iOS or macOS you can take advantage of Euclid’s built-in SceneKit and RealityKit integration. This is demonstrated in the Example app included with the project. SceneKit is a high-level Apple 3D framework that can use either OpenGL or Metal for rendering on supported devices. Euclid provides extensions for creating an SCNGeometry from a Mesh, as well as converting Euclid Vector and Rotation types to SCNVector and SCNQuaternion respectively. The SceneKit integration makes it easy to display Euclid geometry on-screen, and to integrate with ARKit, etc. You can also use SceneKit to export Euclid-generated Mesh in standard 3D model formats such as DAE, STL or OBJ. RealityKit is a newer Apple framework mainly intended for VR\/AR purposes. It is slightly lower-level than SceneKit, and missing some high-level functionality such as camera control, but is equally-well supported by Euclid. Materials Interesting geometry is one thing, but to really bring a shape to life it needs colors and textures. Every Polygon has a material property that can be used to apply any kind of material you like on a per-polygon basis. All primitives and builder methods accept a material parameter which will apply that material to every polygon in the resultant Mesh. When you later combine meshes using CSG operations, the original materials from the Mesh that contributed to each part of the resultant shape are preserved. Before a material can be used with SceneKit, you need to convert the Euclid material to an SCNMaterial. If the material is already an SCNMaterial instance it will be used directly.  If the material is a Color, a CG\/UI\/NSColor or CG\/UI\/NSImage it will be converted to an SCNMaterial automatically. For all other material types, you will need to do this conversion yourself. You can convert materials using the optional closure argument for Euclid’s SCNGeometry constructor, which receives the Euclid material as an input and returns an SCNMaterial. An equivalent closure exists for Euclid’s RealityKit ModelEntity constructor. When serializing Euclid geometry using Codable, only specific material types can be supported. Currently, material serialization works for Strings, Ints, Color and any class that conforms to NSCoding (which includes many UIKit, AppKit and SceneKit types, such as UI\/NSColor, UI\/NSImage and SCNMaterial). Colors Euclid supports applying colors to a Mesh or Polygon using the material property, but you can also set colors individually for each vertex, which will be interpolated to create smooth gradients. The material property is of type AnyHashable which basically means it can be anything you want. You can set the material to an instance of Euclid’s Color, or you can use a CGColor, UIColor or NSColor instead if you prefer. This approach is demonstrated in the Example app included in the project. Textures Euclid automatically adds 2D texture coordinates to the vertices of a Mesh created using primitives or builder methods. There is limited control over how those coordinates are specified at the moment, but they allow for simple cylindrical or spherical texture wrapping. You can also scale, rotate or translate the texture coordinates for a Mesh by using - withTextureTransform(_:), or remap the texture coordinates completely by using the sphereMapped(), cylinderMapped() and cubeMapped() methods. This can be useful for wrapping composite objects that you’ve created using CSG functions, where the texture coordinates may end up scrambled. To apply a texture image to a Mesh, store a UIImage or NSImage as the material property and it will be converted to an SCNMaterial automatically. If you want to do something more complex, such as applying both a color and texture to the same Mesh, or maybe including a normal map or some other material properties, you could create a custom material type to store all the properties you care about, or even assign an SCNMaterial or RealityKit Material directly.",
    "summary" : "Display the 3D shapes you created with meshes.",
    "title" : "Rendering Meshes"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/_(_:_:)-3fd8h"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Comparable.>(_:_:). ",
    "summary" : "Inherited from Comparable.>(_:_:).",
    "title" : ">(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/distance(from:)-1ulo1"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified plane.  The plane to compare with. Return Value The absolute distance between the receiver and the plane. The value will be positive if the receiver lies in front or behind the plane, or zero if they intersect.",
    "summary" : "Returns the absolute distance between the receiver and the specified plane.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/containsPoint(_:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : true,
        "renamed" : "intersects(_:)",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Deprecated. ",
    "summary" : "Deprecated.",
    "title" : "containsPoint(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/IOError\/errorCode"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "8.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "10.10",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "9.0",
        "name" : "tvOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "2.0",
        "name" : "watchOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Inherited from CustomNSError.errorCode. ",
    "summary" : "Inherited from CustomNSError.errorCode.",
    "title" : "errorCode"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/intersects(_:)-jp9x"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the point touches or intersects the receiver.  The point to compare with. Return Value true if the point and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the point touches or intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/nearestPoint(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point on the receiver to the specified point.  The point to compare with. Return Value The nearest point on the receiver to the specified point.",
    "summary" : "Returns the nearest point on the receiver to the specified point.",
    "title" : "nearestPoint(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/axis"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The axis of rotation. ",
    "summary" : "The axis of rotation.",
    "title" : "axis"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/*(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value. ",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/distance(from:)-1js5s"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the absolute distance between the receiver and the specified plane.  The plane to compare with. Return Value The absolute distance between the receiver and the plane. The value will be positive if the receiver lies in front or behind the plane, or zero if they intersect.",
    "summary" : "Returns the absolute distance between the receiver and the specified plane.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/Bounded-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Bounded Implementations"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/interpolated(with:by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Interpolatable.interpolated(with:by:).  Discussion Interpolation is applied to the texture coordinate, normal and color, as well as the position.",
    "summary" : "Inherited from Interpolatable.interpolated(with:by:).",
    "title" : "interpolated(with:by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/distance(from:)-33ygh"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the distance between the receiver and the specified point.  The point to compare with. Return Value The distance between the receiver and the point. The value is always positive if the receiver is not touching the point, or zero if it touches or intersects the point.",
    "summary" : "Returns the distance between the receiver and the specified point.",
    "title" : "distance(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/CustomDebugStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomDebugStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/scale(by:)-9pjki"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A vector scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/rectangle(width:height:color:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a closed rectangular path.  The width of the rectangle. The height of the rectangle. An optional Color to apply to the path’s points. ",
    "summary" : "Creates a closed rectangular path.",
    "title" : "rectangle(width:height:color:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/curve(_:texcoord:color:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a curved path point at the specified position.  The location of the path point. The texture coordinate corresponding to this path point. An optional vertex color for this path point.",
    "summary" : "Creates a curved path point at the specified position.",
    "title" : "curve(_:texcoord:color:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/*(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a transformed copy of the value. ",
    "summary" : "Returns a transformed copy of the value.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/intersects(_:)-88unb"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the point touches or intersects the receiver.  The point to compare with. Return Value true if the point and receiver intersect, and false otherwise.",
    "summary" : "Returns a true if the point touches or intersects the receiver.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/rotated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a rotated copy of the value.  A rotation to apply to the value.",
    "summary" : "Returns a rotated copy of the value.",
    "title" : "rotated(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/transform(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place.  A transform to apply to the value.",
    "summary" : "Transform the value in place.",
    "title" : "transform(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/undirectedEdges"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An unordered set of bounds edges. The direction of each edge is normalized relative to the origin to simplify edge-equality comparisons. ",
    "summary" : "An unordered set of bounds edges. The direction of each edge is normalized relative to the origin to simplify edge-equality comparisons.",
    "title" : "undirectedEdges"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/PlaneComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "PlaneComparable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/intersects(_:)-81cpy"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Determines if the receiver intersects the specified plane.  The plane to compare with. Return Value true if the receiver intersects the plane, and false otherwise.",
    "summary" : "Determines if the receiver intersects the specified plane.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/rotation"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The rotation or orientation component of the transform. ",
    "summary" : "The rotation or orientation component of the transform.",
    "title" : "rotation"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/makeWatertight()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Removes hairline cracks by inserting additional vertices without altering the shape.  Return Value A new mesh with new vertices inserted if needed. Discussion This method is not always successful. Check isWatertight after to verify.",
    "summary" : "Removes hairline cracks by inserting additional vertices without altering the shape.",
    "title" : "makeWatertight()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/transform(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transform the value in place.  A transform to apply to the value.",
    "summary" : "Transform the value in place.",
    "title" : "transform(by:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/init(min:max:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a bounds with min and max coordinates.  The minimum coordinate value. The maximum coordinate value. Discussion If the value for max is less than the value for min, the bounds is considered to be empty.",
    "summary" : "Creates a bounds with min and max coordinates.",
    "title" : "init(min:max:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/Faces\/frontAndBack"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Generate both the front and back faces. ",
    "summary" : "Generate both the front and back faces.",
    "title" : "Mesh.Faces.frontAndBack"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PlaneComparison\/back"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "All points in the shape lie behind the plane. ",
    "summary" : "All points in the shape lie behind the plane.",
    "title" : "PlaneComparison.back"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(stlData:materialLookup:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Create a mesh from STL data.  Binary or ASCII STL file data A closure to map STL facet colors to Euclid materials. Use nil for default mapping.",
    "summary" : "Create a mesh from STL data.",
    "title" : "init(stlData:materialLookup:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/LineComparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "LineComparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/STLFormat"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Configuration for exported STL file. ",
    "summary" : "Configuration for exported STL file.",
    "title" : "STLFormat"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/nearestPoint(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point on the receiver to the specified point.  The point to compare with. Return Value The nearest point on the receiver to the specified point.",
    "summary" : "Returns the nearest point on the receiver to the specified point.",
    "title" : "nearestPoint(to:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/dot(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Computes the dot-product of this vector and another.  The vector with which to compute the dot product. Return Value The dot product of the two vectors.",
    "summary" : "Computes the dot-product of this vector and another.",
    "title" : "dot(_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/symmetricDifference(_:isCancelled:)-swift.method"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new mesh reprenting only the volume exclusively occupied by one shape or the other, but not both.  The mesh to be XORed with this one. Callback used to cancel the operation. Return Value A new mesh representing the XOR of the meshes. Discussion ",
    "summary" : "Returns a new mesh reprenting only the volume exclusively occupied by one shape or the other, but not both.",
    "title" : "symmetricDifference(_:isCancelled:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/Transformable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Transformable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PlaneComparable\/compare(with:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The relationship between the receiver and the specified plane.  The plane to compare with. Return Value The PlaneComparison between the receiver and the plane.",
    "summary" : "The relationship between the receiver and the specified plane.",
    "title" : "compare(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/Decodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Decodable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/cyan"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "cyan"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/debugDescription"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomDebugStringConvertible.debugDescription. ",
    "summary" : "Inherited from CustomDebugStringConvertible.debugDescription.",
    "title" : "debugDescription"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(_:materials:)-4k8gs"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "15.0",
        "name" : "iOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "12.0",
        "name" : "macOS",
        "unavailable" : false
      },
      {
        "beta" : false,
        "deprecated" : false,
        "introducedAt" : "26.0",
        "name" : "tvOS",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Creates a mesh from a RealityKit MeshResource.  The MeshResource to convert into a mesh. An array of materials to apply to the mesh.",
    "summary" : "Creates a mesh from a RealityKit MeshResource.",
    "title" : "init(_:materials:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/pi"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Angle representing a half-rotation. ",
    "summary" : "Angle representing a half-rotation.",
    "title" : "pi"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/CustomDebugStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomDebugStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Polygon\/clip(to:)"
      },
      "type" : "topLevelPage"
    },
    "platforms" : [
      {
        "beta" : false,
        "deprecated" : true,
        "renamed" : "clipped(to:)",
        "unavailable" : false
      }
    ],
    "rawIndexableTextContent" : "Deprecated. ",
    "summary" : "Deprecated.",
    "title" : "clip(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/+(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from AdditiveArithmetic.+(_:). ",
    "summary" : "Inherited from AdditiveArithmetic.+(_:).",
    "title" : "+(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/debugDescription"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomDebugStringConvertible.debugDescription. ",
    "summary" : "Inherited from CustomDebugStringConvertible.debugDescription.",
    "title" : "debugDescription"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/components"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns an array containing the red, green, blue, and alpha components of the color. ",
    "summary" : "Returns an array containing the red, green, blue, and alpha components of the color.",
    "title" : "components"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/scale(by:)-9i9s9"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A vector scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/*(_:_:)-5fe82"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a rotation multiplied by the specified value. ",
    "summary" : "Returns a rotation multiplied by the specified value.",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Plane\/nearestPoint(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the nearest point on the receiver to the specified point.  The point to compare with. Return Value The nearest point on the receiver to the specified point.",
    "summary" : "Returns the nearest point on the receiver to the specified point.",
    "title" : "nearestPoint(to:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/faceVertices"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An array of vertices suitable for constructing a polygon from the path.  Discussion Vertices include normals and uv coordinates normalized to the bounding rectangle of the path. Returns nil if path is not closed, or has subpaths.",
    "summary" : "An array of vertices suitable for constructing a polygon from the path.",
    "title" : "faceVertices"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/CustomDebugStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "CustomDebugStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/init(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new mesh by decoding from the given decoder.  The decoder to read data from.",
    "summary" : "Creates a new mesh by decoding from the given decoder.",
    "title" : "init(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Color\/gray"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : " ",
    "summary" : "",
    "title" : "gray"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/intersection(with:)-1tffl"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the point where the specified plane intersects the line segment.  The plane to compare with. Return Value The point of intersection, or nil if the line segment and plane don’t intersect.",
    "summary" : "Returns the point where the specified plane intersects the line segment.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/init(_:)-83oy3"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a transform from a SceneKit transform matrix.  The SCNMatrix4 from which to determine the transform.",
    "summary" : "Creates a transform from a SceneKit transform matrix.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/scale(by:)-vnel"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A uniform scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/STLBinaryOptions\/zeroNormals"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Should normal values be zeroed out? ",
    "summary" : "Should normal values be zeroed out?",
    "title" : "zeroNormals"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transform\/encode(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Encodes this transform into the given encoder.  The encoder to write data to.",
    "summary" : "Encodes this transform into the given encoder.",
    "title" : "encode(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vector\/init(arrayLiteral:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ExpressibleByArrayLiteral.init(arrayLiteral:). ",
    "summary" : "Inherited from ExpressibleByArrayLiteral.init(arrayLiteral:).",
    "title" : "init(arrayLiteral:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/intersection(with:)-2u7vo"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns the point where the specified line segment intersects the line segment.  The line segment to compare with. Return Value The point of intersection, or nil if the segments don’t intersect.",
    "summary" : "Returns the point where the specified line segment intersects the line segment.",
    "title" : "intersection(with:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/max"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The maximum coordinate of the bounds. ",
    "summary" : "The maximum coordinate of the bounds.",
    "title" : "max"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/STLBinaryOptions\/header"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Data to use for file header. Note: data will be padded to 80 bytes. If more than 80 bytes are provided, data will be truncated. ",
    "summary" : "Data to use for file header. Note: data will be padded to 80 bytes. If more than 80 bytes are provided, data will be truncated.",
    "title" : "header"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PlaneComparison\/hash(into:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from RawRepresentable.hash(into:). ",
    "summary" : "Inherited from RawRepresentable.hash(into:).",
    "title" : "hash(into:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Path\/rotate(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Rotate the value in place.  A rotation to apply to the value.",
    "summary" : "Rotate the value in place.",
    "title" : "rotate(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/_=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Divides the rotation angle by the specified value. ",
    "summary" : "Divides the rotation angle by the specified value.",
    "title" : "\/=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/roll(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a rotation around the Z axis.  The angle to rotate by.",
    "summary" : "Creates a rotation around the Z axis.",
    "title" : "roll(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An axially-aligned bounding box in 3D space. Used for efficient intersection elimination between more complex shapes. ",
    "summary" : "An axially-aligned bounding box in 3D space. Used for efficient intersection elimination between more complex shapes.",
    "title" : "Bounds"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Line\/intersects(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a true if the line intersects the specified object.  The object to compare with. Return Value true if the line and object intersect, and false otherwise.",
    "summary" : "Returns a true if the line intersects the specified object.",
    "title" : "intersects(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PlaneComparison\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/PathPoint\/isCurved"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A Boolean indicating whether the point is curved or sharp.  ",
    "summary" : "A Boolean indicating whether the point is curved or sharp.",
    "title" : "isCurved"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Vertex\/Transformable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Transformable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/isZero"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The angle is zero (or close to zero). ",
    "summary" : "The angle is zero (or close to zero).",
    "title" : "isZero"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/debugDescription"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomDebugStringConvertible.debugDescription. ",
    "summary" : "Inherited from CustomDebugStringConvertible.debugDescription.",
    "title" : "debugDescription"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/detessellate()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Merges any coplanar polygons that share one or more edges.  Return Value A new mesh containing the merged (possibly non-convex) polygons.",
    "summary" : "Merges any coplanar polygons that share one or more edges.",
    "title" : "detessellate()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Bounds\/encode(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Encodes this bounds into the given encoder.  The encoder to write data to.",
    "summary" : "Encodes this bounds into the given encoder.",
    "title" : "encode(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Transformable\/scale(by:)-89xwv"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Scale the value in place.  A uniform scale factor to apply to the value.",
    "summary" : "Scale the value in place.",
    "title" : "scale(by:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Rotation\/yaw(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a rotation around the Y axis.  The angle to rotate by.",
    "summary" : "Creates a rotation around the Y axis.",
    "title" : "yaw(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/interpolated(with:by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Interpolate between two values.  The value to interpolate towards. The extent of the interpolation, from 0 - 1 (unclamped) Return Value The interpolated value.",
    "summary" : "Interpolate between two values.",
    "title" : "interpolated(with:by:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Mesh\/triangulate()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Splits all polygons in the mesh into triangles.  Return Value A new mesh containing the triangles.",
    "summary" : "Splits all polygons in the mesh into triangles.",
    "title" : "triangulate()"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/Angle\/Comparable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "",
    "summary" : "",
    "title" : "Comparable Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.charcoaldesign.Euclid\/documentation\/Euclid\/LineSegment\/rotated(by:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a rotated copy of the value.  A rotation to apply to the value.",
    "summary" : "Returns a rotated copy of the value.",
    "title" : "rotated(by:)"
  }
]