#if !canImport(ObjectiveC)
import XCTest

extension AngleTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AngleTests = [
        ("testAcosFirstQuadrant", testAcosFirstQuadrant),
        ("testAcosSecondQuadrant", testAcosSecondQuadrant),
        ("testAddition", testAddition),
        ("testAsinFirstQuadrant", testAsinFirstQuadrant),
        ("testAsinFourthQuadrant", testAsinFourthQuadrant),
        ("testAtanFirstQuadrant", testAtanFirstQuadrant),
        ("testAtanFourthQuadrant", testAtanFourthQuadrant),
        ("testAtanSecondQuadrant", testAtanSecondQuadrant),
        ("testAtanThirdQuadrant", testAtanThirdQuadrant),
        ("testComparable1", testComparable1),
        ("testComparable2", testComparable2),
        ("testConstructor", testConstructor),
        ("testCosFirstQuadrant", testCosFirstQuadrant),
        ("testCosFourthQuadrant", testCosFourthQuadrant),
        ("testCosSecondQuadrant", testCosSecondQuadrant),
        ("testCosThirdQuadrant", testCosThirdQuadrant),
        ("testEquality1", testEquality1),
        ("testEquality2", testEquality2),
        ("testPrefix", testPrefix),
        ("testRadians", testRadians),
        ("testSinFirstQuadrant", testSinFirstQuadrant),
        ("testSinFourthQuadrant", testSinFourthQuadrant),
        ("testSinSecondQuadrant", testSinSecondQuadrant),
        ("testSinThirdQuadrant", testSinThirdQuadrant),
        ("testSubtraction", testSubtraction),
        ("testTanFirstQuadrant", testTanFirstQuadrant),
        ("testTanFourthQuadrant", testTanFourthQuadrant),
        ("testTanSecondQuadrant", testTanSecondQuadrant),
        ("testTanThirdQuadrant", testTanThirdQuadrant),
    ]
}

extension BoundsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BoundsTests = [
        ("testIntersectionOfAdjacentBounds", testIntersectionOfAdjacentBounds),
        ("testIntersectionOfBoundsAndEmpty", testIntersectionOfBoundsAndEmpty),
        ("testIntersectionOfCoincidingBounds", testIntersectionOfCoincidingBounds),
        ("testIntersectionOfEmptyAndBounds", testIntersectionOfEmptyAndBounds),
        ("testUnionOfAdjacentBounds", testUnionOfAdjacentBounds),
        ("testUnionOfBoundsAndEmpty", testUnionOfBoundsAndEmpty),
        ("testUnionOfCoincidingBounds", testUnionOfCoincidingBounds),
        ("testUnionOfEmptyAndBounds", testUnionOfEmptyAndBounds),
    ]
}

extension CGPathTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CGPathTests = [
        ("testClosedLineAndQuadCurveCGPath", testClosedLineAndQuadCurveCGPath),
        ("testRectangularCGPath", testRectangularCGPath),
        ("testRoundedRectCGPath", testRoundedRectCGPath),
        ("testUnclosedLineAndCubicCurveCGPath", testUnclosedLineAndCubicCurveCGPath),
        ("testUnclosedLineAndQuadCurveCGPath", testUnclosedLineAndQuadCurveCGPath),
    ]
}

extension CSGTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CSGTests = [
        ("testIntersectionOfAdjacentBoxes", testIntersectionOfAdjacentBoxes),
        ("testIntersectionOfAdjacentSquares", testIntersectionOfAdjacentSquares),
        ("testIntersectionOfCoincidingBoxes", testIntersectionOfCoincidingBoxes),
        ("testIntersectionOfCoincidingSquares", testIntersectionOfCoincidingSquares),
        ("testIntersectionOfOverlappingBoxes", testIntersectionOfOverlappingBoxes),
        ("testIntersectionOfOverlappingSquares", testIntersectionOfOverlappingSquares),
        ("testIntersectionWithEmptyMesh", testIntersectionWithEmptyMesh),
        ("testSubtractAdjacentBoxes", testSubtractAdjacentBoxes),
        ("testSubtractAdjacentSquares", testSubtractAdjacentSquares),
        ("testSubtractCoincidingBoxes", testSubtractCoincidingBoxes),
        ("testSubtractCoincidingBoxesWhenTriangulated", testSubtractCoincidingBoxesWhenTriangulated),
        ("testSubtractCoincidingSquares", testSubtractCoincidingSquares),
        ("testSubtractEmptyMesh", testSubtractEmptyMesh),
        ("testSubtractOverlappingBoxes", testSubtractOverlappingBoxes),
        ("testSubtractOverlappingSquares", testSubtractOverlappingSquares),
        ("testUnionOfAdjacentBoxes", testUnionOfAdjacentBoxes),
        ("testUnionOfAdjacentSquares", testUnionOfAdjacentSquares),
        ("testUnionOfCoincidingBoxes", testUnionOfCoincidingBoxes),
        ("testUnionOfCoincidingSquares", testUnionOfCoincidingSquares),
        ("testUnionOfOverlappingBoxes", testUnionOfOverlappingBoxes),
        ("testUnionOfOverlappingSquares", testUnionOfOverlappingSquares),
        ("testUnionWithEmptyMesh", testUnionWithEmptyMesh),
        ("testXorAdjacentCubes", testXorAdjacentCubes),
        ("testXorAdjacentSquares", testXorAdjacentSquares),
        ("testXorCoincidingCubes", testXorCoincidingCubes),
        ("testXorCoincidingSquares", testXorCoincidingSquares),
        ("testXorOverlappingCubes", testXorOverlappingCubes),
        ("testXorOverlappingSquares", testXorOverlappingSquares),
        ("testXorWithEmptyMesh", testXorWithEmptyMesh),
    ]
}

extension CodingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CodingTests = [
        ("testDecodingAngle", testDecodingAngle),
        ("testDecodingAngle2", testDecodingAngle2),
        ("testDecodingAngle3", testDecodingAngle3),
        ("testDecodingAxisAngleRotation", testDecodingAxisAngleRotation),
        ("testDecodingCurvedPathPoint2D", testDecodingCurvedPathPoint2D),
        ("testDecodingCurvedPathPoint2DWithTexcoord", testDecodingCurvedPathPoint2DWithTexcoord),
        ("testDecodingCurvedPathPoint3D", testDecodingCurvedPathPoint3D),
        ("testDecodingCurvedPathPoint3DWithTexcoord", testDecodingCurvedPathPoint3DWithTexcoord),
        ("testDecodingCurvedPathPoint3DWithTexcoord3D", testDecodingCurvedPathPoint3DWithTexcoord3D),
        ("testDecodingFlattenedVertex", testDecodingFlattenedVertex),
        ("testDecodingFlattenedVertexWithoutNormal", testDecodingFlattenedVertexWithoutNormal),
        ("testDecodingFlattenedVertexWithoutTexcoord", testDecodingFlattenedVertexWithoutTexcoord),
        ("testDecodingFlattenedVertexWithTexcoord3D", testDecodingFlattenedVertexWithTexcoord3D),
        ("testDecodingIdentityRotation", testDecodingIdentityRotation),
        ("testDecodingInvalidVectors", testDecodingInvalidVectors),
        ("testDecodingKeyedLine", testDecodingKeyedLine),
        ("testDecodingKeyedLineSegment", testDecodingKeyedLineSegment),
        ("testDecodingKeyedPath", testDecodingKeyedPath),
        ("testDecodingKeyedPlane", testDecodingKeyedPlane),
        ("testDecodingKeyedVector", testDecodingKeyedVector),
        ("testDecodingKeyedZeroLengthLine", testDecodingKeyedZeroLengthLine),
        ("testDecodingKeyedZeroLengthLineSegment", testDecodingKeyedZeroLengthLineSegment),
        ("testDecodingMesh", testDecodingMesh),
        ("testDecodingPathPoint2D", testDecodingPathPoint2D),
        ("testDecodingPathPoint2DWithTexcoord", testDecodingPathPoint2DWithTexcoord),
        ("testDecodingPathPoint3D", testDecodingPathPoint3D),
        ("testDecodingPathPoint3DWithTexcoord", testDecodingPathPoint3DWithTexcoord),
        ("testDecodingPathPoint3DWithTexcoord3D", testDecodingPathPoint3DWithTexcoord3D),
        ("testDecodingPitchYawRollRotation", testDecodingPitchYawRollRotation),
        ("testDecodingPolygon", testDecodingPolygon),
        ("testDecodingPolygonWithPlane", testDecodingPolygonWithPlane),
        ("testDecodingRollRotation", testDecodingRollRotation),
        ("testDecodingSimplePath", testDecodingSimplePath),
        ("testDecodingSubpath", testDecodingSubpath),
        ("testDecodingUnkeyedLine", testDecodingUnkeyedLine),
        ("testDecodingUnkeyedLineSegment", testDecodingUnkeyedLineSegment),
        ("testDecodingUnkeyedPlane", testDecodingUnkeyedPlane),
        ("testDecodingUnkeyedZeroLengthLine", testDecodingUnkeyedZeroLengthLine),
        ("testDecodingUnkeyedZeroLengthLineSegment", testDecodingUnkeyedZeroLengthLineSegment),
        ("testDecodingVector2", testDecodingVector2),
        ("testDecodingVector3", testDecodingVector3),
        ("testDecodingVertex", testDecodingVertex),
        ("testDecodingVertexWithInvalidNormal", testDecodingVertexWithInvalidNormal),
        ("testDecodingVertexWithoutNormal", testDecodingVertexWithoutNormal),
        ("testDecodingVertexWithoutNormalWithTexcoord3D", testDecodingVertexWithoutNormalWithTexcoord3D),
        ("testDecodingVertexWithoutTexcoord", testDecodingVertexWithoutTexcoord),
        ("testDecodingVertexWithTexcoord3D", testDecodingVertexWithTexcoord3D),
        ("testEncodingAndDecodingPitchYawRollRotation", testEncodingAndDecodingPitchYawRollRotation),
        ("testEncodingAndDecodingRotation", testEncodingAndDecodingRotation),
        ("testEncodingCurvedPathPoint2D", testEncodingCurvedPathPoint2D),
        ("testEncodingCurvedPathPoint2DWithTexcoord3D", testEncodingCurvedPathPoint2DWithTexcoord3D),
        ("testEncodingCurvedPathPoint2DWithTexcoord", testEncodingCurvedPathPoint2DWithTexcoord),
        ("testEncodingCurvedPathPoint3D", testEncodingCurvedPathPoint3D),
        ("testEncodingCurvedPathPoint3DWithTexcoord3D", testEncodingCurvedPathPoint3DWithTexcoord3D),
        ("testEncodingCurvedPathPoint3DWithTexcoord", testEncodingCurvedPathPoint3DWithTexcoord),
        ("testEncodingIdentityRotation", testEncodingIdentityRotation),
        ("testEncodingLine", testEncodingLine),
        ("testEncodingLineSegment", testEncodingLineSegment),
        ("testEncodingMeshWithMaterial", testEncodingMeshWithMaterial),
        ("testEncodingMeshWithMixedMaterials", testEncodingMeshWithMixedMaterials),
        ("testEncodingMeshWithoutMaterial", testEncodingMeshWithoutMaterial),
        ("testEncodingPathPoint2D", testEncodingPathPoint2D),
        ("testEncodingPathPoint2DWithTexcoord", testEncodingPathPoint2DWithTexcoord),
        ("testEncodingPathPoint3D", testEncodingPathPoint3D),
        ("testEncodingPathPoint3DWithTexcoord3D", testEncodingPathPoint3DWithTexcoord3D),
        ("testEncodingPathPoint3DWithTexcoord", testEncodingPathPoint3DWithTexcoord),
        ("testEncodingPlane", testEncodingPlane),
        ("testEncodingPolygonWithDataMaterial", testEncodingPolygonWithDataMaterial),
        ("testEncodingPolygonWithIntMaterial", testEncodingPolygonWithIntMaterial),
        ("testEncodingPolygonWithNilMaterial", testEncodingPolygonWithNilMaterial),
        ("testEncodingPolygonWithOSColorMaterial", testEncodingPolygonWithOSColorMaterial),
        ("testEncodingPolygonWithPlane", testEncodingPolygonWithPlane),
        ("testEncodingPolygonWithStringMaterial", testEncodingPolygonWithStringMaterial),
        ("testEncodingPolygonWithUnsupportedMaterial", testEncodingPolygonWithUnsupportedMaterial),
        ("testEncodingVector2", testEncodingVector2),
        ("testEncodingVector3", testEncodingVector3),
        ("testEncodingVertex", testEncodingVertex),
        ("testEncodingVertexWithoutTexcoord", testEncodingVertexWithoutTexcoord),
        ("testEncodingVertexWithTexcoord3D", testEncodingVertexWithTexcoord3D),
        ("testKeylessPolygon", testKeylessPolygon),
    ]
}

extension LineSegmentTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LineSegmentTests = [
        ("testContainsPoint", testContainsPoint),
        ("testDoesNotContainPoint", testDoesNotContainPoint),
        ("testDoesNotContainPointAfterEnd", testDoesNotContainPointAfterEnd),
        ("testDoesNotContainPointBeforeStart", testDoesNotContainPointBeforeStart),
    ]
}

extension LineTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LineTests = [
        ("testCoincidentLineIntersection", testCoincidentLineIntersection),
        ("testContainsPoint", testContainsPoint),
        ("testContainsPoint2", testContainsPoint2),
        ("testDistanceFromPointHarder", testDistanceFromPointHarder),
        ("testDistanceFromPointSimple", testDistanceFromPointSimple),
        ("testDoesNotContainPoint", testDoesNotContainPoint),
        ("testLineIntersectionXY", testLineIntersectionXY),
        ("testLineIntersectionXZ", testLineIntersectionXZ),
        ("testLineIntersectionYZ", testLineIntersectionYZ),
        ("testProjectPointDiagonal", testProjectPointDiagonal),
        ("testProjectPointDown", testProjectPointDown),
        ("testProjectPointLeft", testProjectPointLeft),
        ("testProjectPointRight", testProjectPointRight),
        ("testProjectPointUp", testProjectPointUp),
    ]
}

extension MetadataTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MetadataTests = [
        ("testLatestVersionInChangelog", testLatestVersionInChangelog),
        ("testLatestVersionInPodspec", testLatestVersionInPodspec),
    ]
}

extension PathTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PathTests = [
        ("testClipClosedClockwiseTriangleMostlyRightOfAxis", testClipClosedClockwiseTriangleMostlyRightOfAxis),
        ("testClipClosedClockwiseTriangleToRightOfAxis", testClipClosedClockwiseTriangleToRightOfAxis),
        ("testClipClosedRectangleSpanningAxis", testClipClosedRectangleSpanningAxis),
        ("testClosedAnticlockwiseTriangleLeftOfAxis", testClosedAnticlockwiseTriangleLeftOfAxis),
        ("testConcaveClosedPathAnticlockwiseWinding", testConcaveClosedPathAnticlockwiseWinding),
        ("testConcaveClosedPathClockwiseWinding", testConcaveClosedPathClockwiseWinding),
        ("testConcaveClosedPathClockwiseWinding2", testConcaveClosedPathClockwiseWinding2),
        ("testConcaveOpenPathAnticlockwiseWinding", testConcaveOpenPathAnticlockwiseWinding),
        ("testConcaveOpenPathClockwiseWinding", testConcaveOpenPathClockwiseWinding),
        ("testConvexClosedPathAnticlockwiseWinding", testConvexClosedPathAnticlockwiseWinding),
        ("testConvexClosedPathClockwiseWinding", testConvexClosedPathClockwiseWinding),
        ("testConvexOpenPathAnticlockwiseWinding", testConvexOpenPathAnticlockwiseWinding),
        ("testConvexOpenPathClockwiseWinding", testConvexOpenPathClockwiseWinding),
        ("testEdgeVerticesForCircle", testEdgeVerticesForCircle),
        ("testEdgeVerticesForEllipse", testEdgeVerticesForEllipse),
        ("testEdgeVerticesForSemicircle", testEdgeVerticesForSemicircle),
        ("testEdgeVerticesForSharpEdgedCylinder", testEdgeVerticesForSharpEdgedCylinder),
        ("testEdgeVerticesForSmoothedClosedRect", testEdgeVerticesForSmoothedClosedRect),
        ("testEdgeVerticesForSmoothedCylinder", testEdgeVerticesForSmoothedCylinder),
        ("testEdgeVerticesForVerticalPath", testEdgeVerticesForVerticalPath),
        ("testEdgeVerticesForZigZag", testEdgeVerticesForZigZag),
        ("testFaceVerticesForConcaveClockwisePath", testFaceVerticesForConcaveClockwisePath),
        ("testFaceVerticesForDegenerateClosedAnticlockwisePath", testFaceVerticesForDegenerateClosedAnticlockwisePath),
        ("testNestedSubpathsAreFlattenedCorrectly", testNestedSubpathsAreFlattenedCorrectly),
        ("testOverlappingClosedQuad", testOverlappingClosedQuad),
        ("testOverlappingOpenQuad", testOverlappingOpenQuad),
        ("testPathWithConjoinedLoopsHasCorrectSubpaths", testPathWithConjoinedLoopsHasCorrectSubpaths),
        ("testPathWithLineEndingInLoopHasCorrectSubpaths", testPathWithLineEndingInLoopHasCorrectSubpaths),
        ("testPathWithLoopEndingInLineHasCorrectSubpaths", testPathWithLoopEndingInLineHasCorrectSubpaths),
        ("testPathWithTwoSeparateLoopsHasCorrectSubpaths", testPathWithTwoSeparateLoopsHasCorrectSubpaths),
        ("testSimpleClosedPathHasNoSubpaths", testSimpleClosedPathHasNoSubpaths),
        ("testSimpleClosedQuad", testSimpleClosedQuad),
        ("testSimpleClosedTriangle", testSimpleClosedTriangle),
        ("testSimpleLine", testSimpleLine),
        ("testSimpleOpenPathHasNoSubpaths", testSimpleOpenPathHasNoSubpaths),
        ("testSimpleOpenQuad", testSimpleOpenQuad),
        ("testSimpleOpenTriangle", testSimpleOpenTriangle),
        ("testStraightLinePathAnticlockwiseWinding", testStraightLinePathAnticlockwiseWinding),
        ("testStraightLinePathAnticlockwiseWinding2", testStraightLinePathAnticlockwiseWinding2),
        ("testStraightLinePathAnticlockwiseWinding3", testStraightLinePathAnticlockwiseWinding3),
    ]
}

extension PlaneTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PlaneTests = [
        ("testConcavePolygonClockwiseWinding", testConcavePolygonClockwiseWinding),
        ("testConcavePolygonPlaneTranslation", testConcavePolygonPlaneTranslation),
        ("testFlatteningPlaneForNegativeUnitZ", testFlatteningPlaneForNegativeUnitZ),
        ("testFlatteningPlaneForUnitX", testFlatteningPlaneForUnitX),
        ("testFlatteningPlaneForUnitY", testFlatteningPlaneForUnitY),
        ("testFlatteningPlaneForUnitZ", testFlatteningPlaneForUnitZ),
        ("testFlatteningPlaneForXYDiagonal", testFlatteningPlaneForXYDiagonal),
        ("testIntersectionWithAxisLine", testIntersectionWithAxisLine),
        ("testIntersectionWithParallelPlane", testIntersectionWithParallelPlane),
        ("testIntersectionWithPerpendicularPlane", testIntersectionWithPerpendicularPlane),
        ("testIntersectionWithRandomPlane", testIntersectionWithRandomPlane),
        ("testIntersectionWithSkewedLine", testIntersectionWithSkewedLine),
        ("testIntersectWithNormalLine", testIntersectWithNormalLine),
        ("testIntersectWithParallelLine", testIntersectWithParallelLine),
    ]
}

extension PolygonTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PolygonTests = [
        ("testConcaveAnticlockwisePolygonContainsPoint", testConcaveAnticlockwisePolygonContainsPoint),
        ("testConcaveAnticlockwisePolygonContainsPoint2", testConcaveAnticlockwisePolygonContainsPoint2),
        ("testConcaveAnticlockwisePolygonCorrectlyDetessellated", testConcaveAnticlockwisePolygonCorrectlyDetessellated),
        ("testConcaveAnticlockwisePolygonCorrectlyTessellated", testConcaveAnticlockwisePolygonCorrectlyTessellated),
        ("testConcaveAnticlockwisePolygonCorrectlyTriangulated", testConcaveAnticlockwisePolygonCorrectlyTriangulated),
        ("testConcavePolygonAnticlockwiseWinding", testConcavePolygonAnticlockwiseWinding),
        ("testConcavePolygonClockwiseWinding", testConcavePolygonClockwiseWinding),
        ("testConvexAnticlockwisePolygonContainsPoint", testConvexAnticlockwisePolygonContainsPoint),
        ("testConvexClockwisePolygonContainsPoint", testConvexClockwisePolygonContainsPoint),
        ("testConvexPolygonAnticlockwiseWinding", testConvexPolygonAnticlockwiseWinding),
        ("testConvexPolygonClockwiseWinding", testConvexPolygonClockwiseWinding),
        ("testCubeIsWatertight", testCubeIsWatertight),
        ("testDegeneratePolygonWithColinearPoints", testDegeneratePolygonWithColinearPoints),
        ("testDegeneratePolygonWithSelfIntersectingPoints", testDegeneratePolygonWithSelfIntersectingPoints),
        ("testDoubleSidedFaceIsWatertight", testDoubleSidedFaceIsWatertight),
        ("testHouseShapedPolygonCorrectlyDetessellated", testHouseShapedPolygonCorrectlyDetessellated),
        ("testHouseShapedPolygonCorrectlyTriangulated", testHouseShapedPolygonCorrectlyTriangulated),
        ("testInvertedConcaveAnticlockwisePolygonCorrectlyDetessellated", testInvertedConcaveAnticlockwisePolygonCorrectlyDetessellated),
        ("testInvertedConcaveAnticlockwisePolygonCorrectlyTessellated", testInvertedConcaveAnticlockwisePolygonCorrectlyTessellated),
        ("testInvertedConcaveAnticlockwisePolygonCorrectlyTriangulated", testInvertedConcaveAnticlockwisePolygonCorrectlyTriangulated),
        ("testInvertedSlightlyNonPlanarPolygonTriangulated", testInvertedSlightlyNonPlanarPolygonTriangulated),
        ("testLatheIsWatertight", testLatheIsWatertight),
        ("testMerge1", testMerge1),
        ("testMerge2", testMerge2),
        ("testMergeB2TAdjacentRects", testMergeB2TAdjacentRects),
        ("testMergeEdgeCase", testMergeEdgeCase),
        ("testMergeL2RAdjacentRectAndTriangle", testMergeL2RAdjacentRectAndTriangle),
        ("testMergeL2RAdjacentRects", testMergeL2RAdjacentRects),
        ("testMergeR2LAdjacentRects", testMergeR2LAdjacentRects),
        ("testMergeT2BAdjacentRects", testMergeT2BAdjacentRects),
        ("testNonDegeneratePolygonWithColinearPoints", testNonDegeneratePolygonWithColinearPoints),
        ("testNonWatertightPolygonsCorrectlyDetessellated", testNonWatertightPolygonsCorrectlyDetessellated),
        ("testOpenShapeExtrusionIsWatertight", testOpenShapeExtrusionIsWatertight),
        ("testPathWithZeroAreaColinearPointTriangulated", testPathWithZeroAreaColinearPointTriangulated),
        ("testPolygonIDPreservedThroughTessellation", testPolygonIDPreservedThroughTessellation),
        ("testPolygonIDPreservedThroughTriangulation", testPolygonIDPreservedThroughTriangulation),
        ("testPolygonWithColinearPointsCorrectlyDetessellated", testPolygonWithColinearPointsCorrectlyDetessellated),
        ("testPolygonWithColinearPointsCorrectlyTriangulated", testPolygonWithColinearPointsCorrectlyTriangulated),
        ("testSingleSidedFaceIsNotWatertight", testSingleSidedFaceIsNotWatertight),
        ("testSingleSidedOpenShapeExtrusionIsNotWatertight", testSingleSidedOpenShapeExtrusionIsNotWatertight),
        ("testSlightlyNonPlanarPolygonTriangulated", testSlightlyNonPlanarPolygonTriangulated),
        ("testSphereIsWatertight", testSphereIsWatertight),
        ("testUniqueEdgesForCube", testUniqueEdgesForCube),
        ("testUniqueEdgesForSphere", testUniqueEdgesForSphere),
    ]
}

extension SceneKitTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SceneKitTests = [
        ("testGeometryImportedWithCorrectDetail", testGeometryImportedWithCorrectDetail),
    ]
}

extension ShapeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ShapeTests = [
        ("testCircleIsClosed", testCircleIsClosed),
        ("testClosedCurvedPath", testClosedCurvedPath),
        ("testClosedCurvedPathWithSharpFirstCorner", testClosedCurvedPathWithSharpFirstCorner),
        ("testClosedCurvedPathWithSharpSecondAndThirdCorner", testClosedCurvedPathWithSharpSecondAndThirdCorner),
        ("testClosedCurvedPathWithSharpSecondCorner", testClosedCurvedPathWithSharpSecondCorner),
        ("testCurveWithConsecutiveMixedTypePointsWithSamePosition", testCurveWithConsecutiveMixedTypePointsWithSamePosition),
        ("testExtrudeSelfIntersectingPath", testExtrudeSelfIntersectingPath),
        ("testFillAnticlockwiseQuad", testFillAnticlockwiseQuad),
        ("testFillClockwiseQuad", testFillClockwiseQuad),
        ("testFillNonPlanarQuad", testFillNonPlanarQuad),
        ("testFillSelfIntersectingPath", testFillSelfIntersectingPath),
        ("testLatheSelfIntersectingPath", testLatheSelfIntersectingPath),
        ("testLoftNonParallelEdges", testLoftNonParallelEdges),
        ("testLoftParallelEdges", testLoftParallelEdges),
        ("testSimpleCurvedPath", testSimpleCurvedPath),
        ("testSimpleCurveEndedPath", testSimpleCurveEndedPath),
    ]
}

extension TextTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TextTests = [
        ("testTextMeshWithAttributedString", testTextMeshWithAttributedString),
        ("testTextMeshWithString", testTextMeshWithString),
        ("testTextPaths", testTextPaths),
    ]
}

extension TransformTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TransformTests = [
        ("testAxisAngleRotation1", testAxisAngleRotation1),
        ("testAxisAngleRotation2", testAxisAngleRotation2),
        ("testAxisAngleRotation3", testAxisAngleRotation3),
        ("testPitch", testPitch),
        ("testRoll", testRoll),
        ("testRotatePlane", testRotatePlane),
        ("testRotationIdentityAxis", testRotationIdentityAxis),
        ("testRotationMultipliedByScale", testRotationMultipliedByScale),
        ("testRotationMultipliedByTranslation", testRotationMultipliedByTranslation),
        ("testScaleMultipliedByRotation", testScaleMultipliedByRotation),
        ("testScalePlane", testScalePlane),
        ("testScalePlaneUniformly", testScalePlaneUniformly),
        ("testTransformPlane", testTransformPlane),
        ("testTransformVector", testTransformVector),
        ("testTranslatePlane", testTranslatePlane),
        ("testTranslationMultipliedByRotation", testTranslationMultipliedByRotation),
        ("testTranslationMultipliedByScale", testTranslationMultipliedByScale),
        ("testYaw", testYaw),
    ]
}

extension UtilityTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UtilityTests = [
        ("testColinearPointsDontPreventConvexness", testColinearPointsDontPreventConvexness),
        ("testConvexnessResultNotAffectedByTranslation", testConvexnessResultNotAffectedByTranslation),
        ("testDegenerateColinearVertices", testDegenerateColinearVertices),
        ("testDegenerateVerticesWithZeroLengthEdge", testDegenerateVerticesWithZeroLengthEdge),
        ("testNonDegenerateColinearVertices", testNonDegenerateColinearVertices),
        ("testRemoveZeroAreaColinearPointRemoved", testRemoveZeroAreaColinearPointRemoved),
        ("testSanitizeInvalidClosedPath", testSanitizeInvalidClosedPath),
        ("testVectorFromPointToLine", testVectorFromPointToLine),
    ]
}

extension VectorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__VectorTests = [
        ("testAngledLength", testAngledLength),
        ("testAxisAlignedLength", testAxisAlignedLength),
        ("testDistanceBehindPlane", testDistanceBehindPlane),
        ("testDistanceInFrontOfPlane", testDistanceInFrontOfPlane),
        ("testNonNormalizedAngle", testNonNormalizedAngle),
        ("testNonNormalizedAngleWithPlane", testNonNormalizedAngleWithPlane),
        ("testRightAngle", testRightAngle),
        ("testRightAngleWithPlane", testRightAngleWithPlane),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AngleTests.__allTests__AngleTests),
        testCase(BoundsTests.__allTests__BoundsTests),
        testCase(CGPathTests.__allTests__CGPathTests),
        testCase(CSGTests.__allTests__CSGTests),
        testCase(CodingTests.__allTests__CodingTests),
        testCase(LineSegmentTests.__allTests__LineSegmentTests),
        testCase(LineTests.__allTests__LineTests),
        testCase(MetadataTests.__allTests__MetadataTests),
        testCase(PathTests.__allTests__PathTests),
        testCase(PlaneTests.__allTests__PlaneTests),
        testCase(PolygonTests.__allTests__PolygonTests),
        testCase(SceneKitTests.__allTests__SceneKitTests),
        testCase(ShapeTests.__allTests__ShapeTests),
        testCase(TextTests.__allTests__TextTests),
        testCase(TransformTests.__allTests__TransformTests),
        testCase(UtilityTests.__allTests__UtilityTests),
        testCase(VectorTests.__allTests__VectorTests),
    ]
}
#endif
